#%RAML 1.0
title: Lighthouse REST API
version: v3.7
documentation:
- title: Lighthouse REST API
  content: This API allows control and inspection of an Opengear Lighthouse management instance.
baseUri: https://{lighthousehost}/api/v3.7
protocols: [ HTTPS ]

securitySchemes:
  token:
    description: Lighthouse base authentication scheme
    type: Basic Authentication
    describedBy:
      headers:
        Authorization:
          description: authorization session token
          type: string
          required: true
          displayName: Authorization
          example: Token 521a00e57d4a461b3e4bb0c55166f97c

types:
  error:
    type: object
    properties:
      error:
        type: array
        description: A list of errors
        required: true
        items:
          type: object
          properties:
            type:
              type: integer
              required: true
            code:
              type: integer
              required: true
            level:
              type: integer
              required: true
            text:
              type: string
            args:
              type: object

  credentials:
    type: object
    properties:
      username:
        type: string
        required: true
      password:
        type: string
        required: true

  getSessionResponse:
    type: object
    properties:
      state:
        type: string
      password_expired:
        type: boolean
      session:
        type: string
      user:
        type: string
        required: false
      last_challenge:
        type: string
        required: false

  user:
    type: object
    properties:
      id:
        type: string
        required: false
      username:
        type: string
        required: false
      description:
        type: string
        required: false
      enabled:
        type: boolean
        required: false
      expired:
        type: boolean
        required: false
      locked_out:
        type: boolean
        required: false
      rights:
        type: entityRights
        required: false
      groups:
        type: array
        items: string
        required: false
      no_password:
        type: boolean
        required: true
      password:
        type: string | nil
        required: false
      deletable:
        type: boolean
        required: true

  passwordPolicy:
    type: object
    properties:
      enabled:
        type: boolean
      min_password_length:
        type: integer
      no_username:
        type: boolean
      must_contain_capital_letter:
        type: boolean
      must_contain_number:
        type: boolean
      must_contain_special_character:
        type: boolean
      password_reuse_period:
        type: integer
      password_expiry_period:
        type: integer
      max_login_attempts:
        type: integer
      login_lockout_period:
        type: integer

  passwordValidation:
    type: object
    properties:
      username:
        type: string
      password:
        type: string

  getGroupResponse:
    "type": "object"
    "properties":
      "group":
        "type": "object"
        "properties":
          "id": string
          "groupname":
            "type": "string"
          "mode":
            "type": "string"
          "enabled":
            "type": boolean
          "global_roles":
            "type": "string"
            required: false
          "smart_group_roles":
            "type": "string"
            required: false
          "smart_group":
            "type": "string"
            required: false
          "managed_device_filter":
            "type": "string"
            required: false
          "description":
            "type": "string"
            required: false
          "members":
            "type": "array"
            "items":
              "type": "string"
          rights: entityRights

  setGroup:
    "type": "object"
    "properties":
      "group":
        "type": "object"
        "properties":
          "groupname":
            "type": "string"
            "required": true
          "mode":
            "type": "string"
            "required": true
          "enabled":
            "type": boolean
          "global_roles":
            "type": "string"
            "required": false
          "smart_group_roles":
            "type": "string"
            "required": false
          "smart_group":
            "type": "string"
            "required": false
          "managed_device_filter":
            "type": "string"
            required: false
          "description":
            "type": "string"
            "required": false

  responseToSessionChallenge:
    type: object
    properties:
      session:
        type: string
        required: true
      state:
        type: object
        required: true
      challenge:
        description: Next challenge (if any)
        type: string

  deleteSessionResponse:
    type: object
    properties:
      session:
        type: string
        required: true
      success:
        type: string
        required: true
      state:
        type: string
      user:
        type: string

  getNodesResponse:
    type: object
    properties:
      "nodes":
        type: array
        items:
          description: "Lighthouse client node"
          type: object
          properties:
            "status":
              required: true
              type: string
              enum: [
                "Enrolled",
                "Registering",
                "Registered",
                "Unknown",
                "Pending",
              ]
            name:
              required: true
              type: string
            "id":
              required: true
              type: string
            "lhvpn_address":
              type: string
            "product":
              type: string
            "runtime_status":
              type: object
              properties :
                "change_delta":
                    type: integer
                "change_time":
                    type: integer
                "action_status":
                    type: string
                    enum: [
                      "in progress",
                      "finished",
                      "error",
                      "unknown",
                    ]
                "id":
                    type: string
                "action_type":
                    type: string
                    enum: [
                      "registration",
                      "enrollment",
                      "none",
                    ]
                "connection_status":
                  type: string
                  enum: [
                    "connected",
                    "pending",
                    "disconnected",
                    "unknown",
                    "never seen",
                  ]
                "action_error_message":
                  type: string
            "cellhealth_runtime_status":
              type: object
              properties :
                "change_delta":
                    type: integer
                "change_time":
                    type: integer
                "status":
                  type: string
                  enum: [
                    "bad",
                    "moderate",
                    "good",
                    "pending",
                    "unknown",
                    "sim_issues",
                    "connectivity_test_failed",
                    "interface_disabled",
                  ]
            "ports":
              type: array
              items:
                type: object
                properties:
                  "id": string
                  "label": string
                  "mode":
                    type: string
                    enum: [
                      "disabled",
                      "localConsole",
                      "consoleServer",
                      "sdtServer",
                      "bridge",
                      "terminalServer",
                      "reserved",
                      "powerman",
                      "unknown",
                    ]
                  proxied_ssh_url:
                    type: string
                    description: "URI to ssh to a port on a Lighthouse-enrolled node"
                    example: "ssh://username:consoleserver:portnumber@lhip"
            "tag_list":
              type: object
              properties:
                "id": string
                rights: entityRights
                "tags":
                  type: array
                  items:
                    properties:
                      "id": string
                      name: string
                      "value": string
            rights:
              type: object
              properties:
                view_template_push_status: boolean
                delete: boolean
                view_config_sync_status: boolean
                modify: boolean
                view_cellhealth_runtime_details: boolean
                netops: boolean
            model: string
            approved: boolean
            firmware_version: string
            mac_address: string
            serial_number: string
            enrollment_bundle: string
            interfaces:
              type: array
              items:
                type: object
                properties:
                  "id":
                    type: string
                    required: true
                  "name":
                    type: string
                    required: true
                  "ipv4_addr":
                    type: string
                    required: false
                  "ipv6_addr":
                    type: string
                    required: false
            etags:
              type: array
              items:
                type: object
                properties:
                  "id": string
                  "status": string
                  "version": integer
                  "name": string
            "config-push-status":
              type: object
              properties:
                "failed":
                  type: array
                  required: false
                  items: string
                "finished":
                  type: array
                  required: false
                  items: string
            nom_modules:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    required: false
                  version:
                    type: string
                    required: false
            firewall_zones:
              type: array
              items:
                type: object
                properties:
                  "name":
                    type: string
                    required: true
                  "label":
                    type: string
                    required: true
                  "interfaces":
                    type: array
                    required: true
                    items:
                      type: string
      "meta":
        type: object
        properties:
          "searchId":
            type: string
            required: false
          "total_pages": integer

  new_node:
      type: object
      properties:
        "enrollment":
          type: object
          properties:
            "product":
              type: string
              required: false
            "call_home":
              type: "boolean"
              required: false
            "hostname":
              type: string
              required: false
            "bundle":
              type: string
              required: false
            "token":
              type: string
              required: false
            name:
              type: string
              required: false
            "address":
              type: string
              required: false
            "username":
              type: string
              required: false
            "password":
              type: string
              required: false
            "auto_approve":
              type: "boolean"
              required: false
            "connection_method":
              type: string
              required: false
            "base_port":
              type: integer
              required: false
            "port_count":
              type: integer
              required: false
            "port_labels":
              type: array
              required: false
              items:
                type: string

  findNodeByIDResponse:
      description: "Lighthouse client node"
      type: object
      properties:
        node:
          type: object
          properties:
            "status":
              type: string
              enum: [
                "Enrolled",
                "Registering",
                "Registered",
                "Unknown",
                "Pending",
              ]
            name:
              type: string
            "id":
              type: string
            "lhvpn_address":
              type: string
            "product":
              type: string
            "runtime_status":
              type: object
              properties :
                "change_time" :
                    type: integer
                "action_status" :
                    type: string
                    enum: [
                      "in progress",
                      "finished",
                      "error",
                      "unknown",
                    ]
                "id" :
                    type: string
                "action_type":
                    type: string
                    enum: [
                      "registration",
                      "enrollment",
                      "none",
                    ]
                "connection_status":
                  type: string
                  enum: [
                    "connected",
                    "pending",
                    "disconnected",
                    "unknown",
                    "never seen",
                  ]
                "action_error_message":
                  type: string
            "cellhealth_runtime_status":
              type: object
              properties :
                "change_delta":
                    type: integer
                "change_time":
                    type: integer
                "status":
                    type: string
                    enum: [
                      "bad",
                      "moderate",
                      "good",
                      "pending",
                      "unknown",
                      "sim_issues",
                      "connectivity_test_failed",
                      "interface_disabled",
                    ]
            "tag_list":
              type: object
              properties:
                "id": string
                rights: entityRights
                "tags":
                  type: array
                  items:
                    properties:
                      "id": string
                      name: string
                      "value": string
            rights: entityRights
            model: string
            approved: boolean
            firmware_version: string
            mac_address: string
            serial_number: string
            enrollment_bundle: string
            interfaces:
              type: array
              items:
                type: object
                properties:
                  "id":
                    type: string
                    required: true
                  "name":
                    type: string
                    required: true
                  "ipv4_addr":
                    type: string
                    required: false
                  "ipv6_addr":
                    type: string
                    required: false
            etags:
              type: array
              items:
                type: object
                properties:
                  "id": string
                  "status": string
                  "version": integer
                  "name": string
            "ports":
                type: array
                items:
                  type: object
                  properties:
                    "id": string
                    "label": string
                    "mode":
                      type: string
                      enum: [
                        "disabled",
                        "localConsole",
                        "consoleServer",
                        "sdtServer",
                        "bridge",
                        "terminalServer",
                        "reserved",
                        "powerman",
                        "unknown",
                      ]
                    proxied_ssh_url:
                      type: string
                      description: "URI to ssh to a port on a Lighthouse-enrolled node"
                      example: "ssh://username:consoleserver:portnumber@lhip"
            nom_modules:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    required: false
                  version:
                    type: string
                    required: false
            firewall_zones:
              type: array
              items:
                type: object
                properties:
                  "name":
                    type: string
                    required: true
                  "label":
                    type: string
                    required: true
                  "interfaces":
                    type: array
                    required: true
                    items:
                      type: string

  getNodeIdsResponse:
      type: object
      properties:
        "nodes":
          type: array
          items:
              type: string
        "meta": metaResponse

  put_node:
      type: object
      properties:
        node:
          type: object
          properties:
            name:
              type: string
              required: true
            connection_info:
              type: object
              required: false
              properties:
                "address":
                  type: string
                  required: false
                "username":
                  type: string
                  required: false
                "password":
                  type: string
                  required: false
            "mac_address":
              type: string
              required: false
            "approved":
              type: boolean
              required: true
            "tags":
              type: array
              required: false
              items:
                type: object
                properties:
                  "id": string
                  name: string
                  "value": string

  getPortByIdResponse:
      type: object
      properties:
        "id":
          required: true
          type: string
        "mode":
          type: string
          enum: [
            "disabled",
            "localConsole",
            "consoleServer",
            "sdtServer",
            "bridge",
            "terminalServer",
            "reserved",
            "powerman",
            "unknown",
          ]
        "port_csid":
          type: string
        "label":
          type: string
        "proxied_ssh_url":
          type: string
          description: "URI to ssh to a port on a Lighthouse-enrolled node"
          example: "ssh://username:consoleserver:portnumber@lhip"
        "web_terminal_url":
          type: string
        "node_name":
          type: string
        "ssh_enabled":
          type: boolean
        "webshell_enabled":
          type: boolean
        "runtime_status":
          type: object
          properties :
            "change_time":
                type: integer
            "change_delta":
                type: integer
            "action_status":
                type: string
                enum: [
                  "in progress",
                  "finished",
                  "error",
                  "unknown",
                ]
            "id" :
                type: string
            "action_type":
                type: string
                enum: [
                  "registration",
                  "enrollment",
                  "none",
                ]
            "connection_status":
              type: string
              enum: [
                "connected",
                "pending",
                "disconnected",
                "unknown",
                "never seen",
              ]
            "action_error_message":
              type: string
              required: false

  getPortByIdResponseList:
      type: object
      properties:
        "ports":
          type: array
          items:
              type: getPortByIdResponse
        meta: metaResponse

  registrationPackageResponse:
      type: object
      properties:
        "cert":
          type: string
        "key":
          type: string
        "ca":
          type: string
        "address":
          type: string
        "server_api_port":
          type: number
        "server_vpn_port":
          type: number
        "lh_ext_eps":
          type: array
          items:
            properties:
              "server":
                type: string
              "server_api_port":
                type: number
              "server_vpn_port":
                type: number
        "ignore_date_header":
          type: "boolean"

  getSearchResponse:
      type: object
      properties:
        "search":
          type: object
          properties:
            "id":
              type: string

  searchFieldsResponse:
      type: object
      properties:
        "fields":
          type: array
          items:
            type: string

  getNodeTagsResponse:
      type: object
      properties:
        "tags":
          type: array
          items:
            properties:
              "id": string
              name: string
              "value": string

  postNodeTagsResponse:
      type: object
      properties:
        "tag":
          type: object
          properties:
            "id": string
            name: string
            "value": string

  createNodeTag:
      type: object
      properties:
        "tag":
          required: true
          type: object
          properties:
            name:
              type: string
              required: true
            "value":
              type: string
              required: true

  getTagsListResponse:
      type: object
      description: "A list of tags and associated information"
      properties:
        meta: metaResponse
        nodeTags:
          type: array
          items:
            type: object
            properties:
              "id":
                type: string
              name:
                type: string
              values:
                type: array
                description: "A list of values associated with this tag"
                items:
                  type: object
                  properties:
                    "id": string
                    "value": string
              rights: entityRights

  getInterfaceList :
    description: "A list of network interfaces"
    type: object
    properties:
      "meta": metaResponse
      interfaces:
        type: array
        items:
          properties:
            "enabled":
              type: "boolean"
            description:
              type: string
            "media":
              type: string
            "physif":
              type: string
            "role":
              type: string
            name:
              type: string
            "ipv4_static_settings":
              type: object
              required: false
              properties:
                "id":
                  type: string
                "netmask":
                  type: string
                "address":
                  type: string
                "gateway":
                  type: string
                "dns1":
                  type: string
                "dns2":
                  type: string
            "ipv6_static_settings":
              type: object
              required: false
              properties:
                "id":
                  type: string
                "prefix_length":
                  type: number
                "address":
                  type: string
                "gateway":
                  type: string
                "dns1":
                  type: string
                "dns2":
                  type: string
            "mode":
              type: string
            "runtime_status":
              type: object
              properties:
                "status":
                  type: string
                "last_status_change":
                  type: number
                "id":
                  type: string
                "address":
                  type: string
                  required: false
                "gateway":
                  type: string
                  required: false
                "dns":
                  type: string
                  required: false
                "addresses":
                  type: array
                  items:
                    properties:
                      "address":
                        type: string
                        required: false
                      "id":
                        type: string
                      "netmask":
                        type: string
                        required: false
                      "prefix_length":
                        type: number
                        required: false
            "id":
              type: string

  interfaceItem:
      type: object
      description: "A network interface"
      properties:
        interface:
          type: object
          properties:
            "id":
              type: string
              required: false
            "enabled":
              type: "boolean"
            description:
              type: string
            "media":
              type: string
            "physif":
              type: string
            "role":
              type: string
            name:
              type: string
            "ipv4_static_settings":
              type: object
              required: false
              properties:
                "netmask":
                  type: string
                "address":
                  type: string
                "gateway":
                  type: string
                  required: false
                "dns1":
                  type: string
                  required: false
                "dns2":
                  type: string
                  required: false
            "ipv6_static_settings":
              type: object
              required: false
              properties:
                "prefix_length":
                  type: number
                "address":
                  type: string
                "gateway":
                  type: string
                  required: false
                "dns1":
                  type: string
                  required: false
                "dns2":
                  type: string
                  required: false
            "mode":
              type: string
            "runtime_status":
              type: object
              properties:
                "status":
                  type: string
                "last_status_change":
                  type: number
                "id":
                  type: string
              required: false

  getSupportReport:
      type: object
      description: "A concise system report"
      properties:
        "support_report":
          type: object
          properties:
            "message":
              type: string
              description: "Status of the support report retrieval."
              required: true
            "contents":
              type: string
              description: "A new line delimited dump of the current state of the system."
              required: false
            "zip_file":
              type: string
              description: "url to a zip file which contains the system report."
              required: false

  defaultNetworkAddress:
    type: object
    properties:
      os_default_external_address:
        type: object
        properties:
          address: string

  systemHostname:
    type: object
    properties:
      system_hostname:
        type: object
        properties:
          hostname: string

  systemLighthouseName:
    type: object
    properties:
      system:
        type: object
        properties:
          lighthouse_name: string

  systemLogging:
    type: object
    properties:
      system_logging:
        type: object
        properties:
          cli_enabled:
            type: boolean
            required: true
          rest_enabled:
            type: boolean
            required: true
          rest_request_enabled:
            type: boolean
            required: true
          rest_response_enabled:
            type: boolean
            required: true

  systemSSHPort:
    type: object
    properties:
      system_ssh_port:
        type: object
        properties:
          port: number

  systemTimezone:
    type: object
    properties:
        system_timezone:
          type: object
          properties:
            timezone: string

  systemTime:
    type: object
    properties:
      time:
        type: object
        properties:
          time: string

  systemGlobalEnrollmentToken:
    type: object
    properties:
      system_global_enrollment_token:
        type: object
        properties:
          token: string

  systemVersion:
    type: object
    properties:
      system_version:
        type: object
        properties:
          rest_api_version: string
          firmware_version: string

  enrollmentAPI:
    type: object
    properties:
      system_alternate_api:
        type: object
        properties:
          enabled: boolean
          port:
            type: number
            required: false
            description: The port is optional - the default value is 8443.

  manifestLink:
    type: object
    properties:
      system_global_manifest_link:
        type: object
        properties:
          url: string

  externalEndpoint:
    type: object
    properties:
      system_external_endpoint:
        type: object
        properties:
          id: string
          address: string
          api_port: number
          vpn_port: number
          mi_vpn_port: number

  externalEndpoints:
    properties:
      system_external_endpoints:
        type: array
        items:
          properties:
            id: string
            address: string
            api_port: number
            vpn_port: number
            mi_vpn_port: number

  webSessionTimeout:
    type: object
    properties:
      system_webui_session_timeout:
        type: object
        properties:
          timeout: integer

  cliSessionTimeout:
    type: object
    properties:
      system_cli_session_timeout:
        type: object
        properties:
          timeout: integer

  connectionSummaryResponse:
    type: object
    properties:
      connectionSummary:
        type: array
        items:
          properties:
            "status":
              required: true
              type: string
              enum: [
                "connected",
                "pending",
                "disconnected",
              ]
            "count":
              type: integer
              required: true

  cellularHealthSummaryResponse:
    type: object
    properties:
      connectionSummary:
        type: array
        items:
          properties:
            "status":
              required: true
              type: string
              enum: [
                "bad",
                "moderate",
                "good",
                "pending",
              ]
            "count":
              type: integer
              required: true

  create_tag:
      type: object
      properties:
        nodeTag:
          type: object
          properties:
            name:
              type: string
              required: true
            values:
              type: array
              required: true

  bundle:
      description: "Lighthouse configuration bundle"
      type: object
      properties:
        bundle:
          type: object
          properties:
            "id": string
            name:
              type: string
            auto_approve:
              type: "boolean"
            token:
              type: string
            automatic_tags:
              type: array
              items:
                description: "Lighthouse client node"
                type: object
                properties:
                  "id":
                    type: string
                  name:
                    type: string
                  "value":
                    type: string
            "nodes":
              type: array
              items:
                type: string
            "templates":
              type: array
              items:
                type: string
            "manifest_link":
              type: string

  put_tag:
      type: object
      properties:
        nodeTag:
          type: object
          properties:
            name:
              type: string
              required: true
            values:
              type: array
              required: true

  consoleGatewayResponse:
    type: object
    properties:
      console_gateway:
        type: object
        properties:
          ssh_url_delimiter:
            type: string
            required: true
          ssh_url_address:
            type: string
            required: true

  entityRights:
    type: object
    properties:
      create:
        type: boolean
        required: false
      delete: boolean
      modify: boolean
      netops: boolean

  metaResponse:
    type: object
    properties:
      "searchId":
        type: string
        required: false
      "total_pages": integer

  firmwareUpgradeStatus:
    type: object
    properties:
      system_firmware_upgrade_status:
        type: object
        properties:
          state:
            required: true
            type: string
            enum: [
              "pending",
              "running",
              "error",
              "finished",
            ]
          error_message:
            required: false
            type: string
            enum: [
              "format_error",
              "download_error",
              "version_error",
              "runtime_error",
            ]

  node_firmware:
    type: object
    properties:
      id:
        type: string
        required: true
      filename:
        type: string
        required: true
      family:
        type: string
        required: true
      version:
        type: string
        required: true
      size:
        type: string
        required: true
      upload_date:
        type: string
        required: true
      sha1:
        type: string
        required: true

  node_upgrade_job_get:
    type: object
    properties:
      id:
        type: integer
        required: true
      name:
        type: string
        required: true
      scheduled_time:
        type: string
        required: true
      firmware:
        type: string
        required: true
      creator:
        type: string
        required: true
      creation_time:
        type: string
        required: true
      status:
        type: string
        required: true
      error_message:
        type: string
        required: true
      start_time:
        type: string
        required: true
      finish_time:
        type: string
        required: true
      total_nodes:
        type: integer
        required: true
      number_failures:
        type: integer
        required: true
      number_successes:
        type: integer
        required: true

  node_upgrade_job_post:
    type: object
    properties:
      name:
        type: string
        required: true
      scheduled_time:
        type: string
        required: true
      firmware_id:
        type: integer
        required: true
      immediate:
        type: boolean
        required: true
      nodes:
        type: array
        required: true
        items:
          type: node_upgrade_node_post

  node_upgrade_node_get:
    type: object
    properties:
      node_id:
        type: integer
        required: true
      allow_in_failover:
        type: boolean
        required: true

  node_upgrade_node_post:
    type: object
    properties:
      node_id:
        type: integer
        required: true
      status:
        type: string
        required: true
      allow_in_failover:
        type: boolean
        required: true
      original_firmware:
        type: string
        required: true
      error_message:
        type: string
        required: true

  entitlements:
    type: object
    properties:
      id:
        type: string
        required: true
      contact:
        type: object
        required: true
        properties:
          name:
            type: string
            required: true
          email:
            type: string
            required: true
          phone:
            type: string
            required: false
      features:
        type: object
        required: true
        properties:
          maintenance:
            type: integer
            required: true
          nodes:
            type: integer
            required: true
          additional:
            type: object
            required: false

  license:
    type: object
    properties:
      id:
        type: integer
        required: false
      raw:
        type: string
        required: true

  template_group:
    displayName: "Group"
    type: object
    properties:
      groupname: string
      description: string
      roles:
        type: array
        items: string
      restrict_ports:
        type: boolean
        required: true
      ports:
        type: string
        required: false

  template_user:
    displayName: "User"
    type: object
    properties:
      username: string
      description:
        type: string
        required: false
      password:
        type: string
        required: false
      groups:
        type: array
        required: false
        items: string

  template_auth_server:
    displayName: "Authentication Server"
    type: object
    properties:
      port:
        type: number
        required: false
      hostname: string

  template:
    type: object
    properties:
      id:
        type: string
        required: false
      "type":
        type: string
        required: true
        enum: [
          "auth",
          "users_groups",
        ]
      description:
        type: string
        required: false
      name:
        type: string
        required: true
      groups:
        type: template_group[]
        description: The groups for a users_groups template.
        required: false
      users:
        type: template_user[]
        description: The users for a users_groups template.
        required: false
      group_operation_type:
        type: string
        description: The group operation to be performed for a users_groups template.
        required: false
        enum: [
          "group_set_list",
        ]
      user_operation_type:
        type: string
        description: The user operation to be performed for a users_groups template.
        required: false
        enum: [
          "user_set_list",
        ]
      authMode:
        type: string
        description: The authentication type for an auth template.
        required: false
        enum: [
          "local",
          "radius",
          "tacacs",
          "ldap",
        ]
      radiusAuthenticationServers:
        type: template_auth_server[]
        description: The radius servers to apply for an auth template.
        required: false
      radiusAccountingServers:
        type: template_auth_server[]
        description: The radius servers to apply for an auth template.
        required: false
      radiusPassword:
        type: string
        description: The radius authentication password.
        required: false
      tacacsAuthenticationServers:
        type: template_auth_server[]
        description: The tacacs servers to apply for an auth template.
        required: false
      tacacsService:
        type: string
        description: The tacacs service.
        required: false
      tacacsMethod:
        type: string
        description: The tacacs method.
        required: false
      tacacsPassword:
        type: string
        description: The tacacs server password.
        required: false
      ldapAuthenticationServers:
        type: template_auth_server[]
        description: The ldap servers to apply for an auth template.
        required: false
      ldapGroupMembershipAttribute:
        type: string
        description: The ldap group membership attribute type.
        required: false
      ldapBaseDN:
        type: string
        description: The ldap base dn.
        required: false
      ldapBindDN:
        type: string
        description: The ldap bind dn.
        required: false
      ldapUsernameAttribute:
        type: string
        description: The ldap username attribute.
        required: false
      ldapBindPassword:
        type: string
        description: The ldap bind password.
        required: false
      ldapIgnoreReferrals:
        type: boolean
        description: Disregard LDAP referrals to other servers
        required: false
      ldapSslMode:
        type: string
        description: Specifies whether LDAP/LDAPS/auto when contacting LDAP servers
        required: false
      ldapSslIgnoreCertErrors:
        type: boolean
        description: Disregard LDAPS certificate errors
        required: false
      ldapSslCaCert:
        type: string
        description: PEM formatted string for the CA certificate used to verify LDAPS servers
        required: false
      script_checksum:
        type: string
        description: SHA1 checksum of script.
        required: false
      script_size:
        type: string
        description: Size in bytes of script.
        required: false

  template_push_post:
    type: object
    properties:
      "template_ids":
        type: array
        items:
          type: string
      "node_ids":
        type: array
        items:
          type: string

  template_push:
    type: object
    properties:
      id:
        type: string
        required: true
      username:
        type: string
        required: true
        description: |
          Automatically stored against the template_push based on the
          current user who created it.
      templates:
        type: array
        items:
          type: string
        required: true
      status:
        type: string
        description: The current state of the template_push.
        required: true
      node_contexts:
        type: array
        items:
          schema: node_context

  node_context:
    type: object
    properties:
      id:
        type: string
        required: true
      node_id:
        type: string
        required: true
        description: The id of the node this context refers to.
      status:
        type: string
        required: true
        description: The current state of the node within the template_push.
      preflight_messages:
        type: array
      preflight_warnings:
        type: array
      preflight_errors:
        type: array
      preflight_changes:
        type: array
      execution_messages:
        type: array
      execution_warnings:
        type: array
      execution_errors:
        type: array
      execution_changes:
        type: array

  lhvpn:
    type: object
    properties:
      mtu:
        type: integer
        required: true
      mask:
        type: string
        required: true
      address:
        type: string
        required: true
      cidr:
        type: integer
        required: false

  snmp:
    type: object
    properties:
      enabled:
        type: boolean
        required: true
      protocol:
        type: string
        required: true
      location:
        type: string
        required: false
      contact:
        type: string
        required: false
      v3_enabled:
        type: boolean
        required: true
      v1_enabled:
        type: boolean
        required: true
      read_write_community:
        type: string
        required: false
      read_only_community:
        type: string
        required: false
      auth_protocol:
        type: string
        required: false
      auth_password:
        type: string
        required: false
      username:
        type: string
        required: false
      engine_id:
        type: string
        required: false
      privacy_protocol:
        type: string
        required: false
      privacy_password:
        type: string
        required: false
      security_level:
        type: string
        required: false

  snmp_manager:
    type: object
    properties:
      enabled:
        type: boolean
        required: true
      protocol:
        type: string
        enum: [
          "UDP",
          "TCP",
        ]
        required: true
      address:
        type: string
        required: true
      port:
        type: integer
        minimum: 1
        maximum: 65535
        required: false
      msg_type:
        type: string
        description: Type of SNMP message to send.
        enum: [
          "TRAP",
          "INFORM",
        ]
        required: true
      version:
        type: string
        enum: [
          "v1",
          "v2c",
          "v3",
        ]
        required: true
      community:
        type: string
        required: false
      auth_protocol:
        type: string
        enum: [
          "SHA",
          "MD5",
        ]
        required: false
      auth_password:
        type: string
        required: false
      username:
        type: string
        required: false
      engine_id:
        type: string
        required: false
      privacy_protocol:
        type: string
        enum: [
          "AES",
          "DES",
        ]
        required: false
      privacy_password:
        type: string
        required: false
      security_level:
        type: string
        enum: [
          "noAuthNoPriv",
          "authNoPriv",
          "authPriv",
        ]
        required: false
      traps:
        type: array
        items:
          type: string
          enum: [
            "nodes_conn_status",
            "nodes_cellular_health_status",
          ]
        description: >
          List of things that will trigger an SNMP message.
          Currently only sending TRAPS/INFORMS on a change in node connection
          status is supported.
        required: false

  actionConfigurationGet:
    type: object
    properties:
      action_configuration:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          thirdparty_enabled:
            type: boolean

  actionConfigurationPut:
    type: object
    properties:
      action_configuration:
        type: object
        properties:
          id:
            type: integer
          thirdparty_enabled:
            type: boolean

  actionConfigurationsGet:
    type: object
    properties:
      action_configurations:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            thirdparty_enabled:
              type: boolean

  actionConfigurationsPut:
    type: object
    properties:
      action_configurations:
        type: array
        items:
          type: object
          properties:
            id:
              type: integer
            thirdparty_enabled:
              type: boolean

  actionSubscription:
    type: object
    properties:
      action_type:
        type: string
      subscription_type:
        type: string
      details:
        type: object
        properties:
          webhook_url:
            type: string

  netopsModuleConfiguration:
    type: object
    properties:
      netops_modules:
        type: object
        properties:
          always_activate:
            type: boolean

  netopsContainer:
    type: object
    properties:
      description:
        type: string
        required: false
      local_version:
        type: string
        required: false
      name:
        type: string
      tags:
        type: array
        items:
          type: string

  netopsModule:
    type: object
    properties:
      module:
        type: string
      description:
        type: string
      images:
        type: array
        items:
          type: string
      id:
        type: string
      license_required:
        type: string
      to_update:
        type: integer
      name:
        type: string
      version:
        type: string
      status:
        type: string
        enum: [
          "available",
          "not available",
          "running",
        ]
      containers:
        type: array
        items:
          type: netopsContainer
      activations:
        type: integer
      always_activate:
        type: boolean
      port:
        type: integer
      min_lh_version:
        type: string
      min_ngcs_version:
        type: string
      retroactively_activate:
        type: boolean
      running:
        type: boolean
      available_activations:
        type: integer
      entitled_activations:
        type: integer

  getNetopsModulesResponse:
    type: object
    properties:
      licenses-available:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            license:
              type: string
            nodes:
              type: integer
      netops-modules:
        type: array
        items:
          type: netopsModule

  dependentLighthousePostRequest:
    type: object
    properties:
      dependent_lighthouse:
        required: true
        type: object
        properties:
          address:
            type: string
            required: true
          username:
            type: string
            required: true
          password:
            type: string
            required: true
          lhvpn_subnet_address:
            type: string
            required: true
          lhvpn_subnet_netmask:
            type: string
            required: true
          port:
            type: integer
            required: false

  dependentLighthouseObject:
    type: object
    properties:
      name:
        type: string
        required: true
      status:
        type: string
        required: true
      lhvpn_subnet:
        type: object
        required: true
        properties:
          address:
            type: string
            required: true
          netmask:
            type: string
            required: true
      nodes_connected:
        type: integer
        required: false
      total_nodes:
        type: integer
        required: true
      network_address:
        type: string
        required: true
      firmware_version:
        type: string
        required: false
      id:
        type: string
        required: true
      "runtime_status":
        type: object
        properties :
          "change_delta":
              type: integer
          "change_time":
              type: integer
          "action_status":
              type: string
              enum: [
                "in progress",
                "finished",
                "error",
                "unknown",
              ]
          "id" :
              type: string
          "action_type":
              type: string
              enum: [
                "registration",
                "enrollment",
                "none",
              ]
          "connection_status":
            type: string
            enum: [
              "connected",
              "pending",
              "disconnected",
              "unknown",
              "never seen",
            ]
          "action_error_message":
            type: string

  getDependentLighthouseInstancesResponse:
    type: object
    properties:
      dependent_lighthouses:
        type: array
        required: true
        items:
          type: dependentLighthouseObject

  getDependentLighthouseInstanceResponse:
    type: object
    properties:
      dependent_lighthouse:
        type: dependentLighthouseObject
        required: true

  dependentLighthousePutRequest:
    type: object
    properties:
      dependent_lighthouse:
        required: true
        type: object
        properties:
          lhvpn_subnet_address:
            type: string
            required: true
          lhvpn_subnet_netmask:
            type: string
            required: true

  multipleInstanceLHVPNResponse:
    type: object
    properties:
      multiple_instance_lhvpn:
        required: true
        type: object
        properties:
          address:
            type: string
            required: true
          mask:
            type: string
            required: true

  multipleInstanceLHVPNPutRequest:
    type: object
    properties:
      multiple_instance_lhvpn:
        required: true
        type: object
        properties:
          address:
            type: string
            required: true
          mask:
            type: string
            required: true

  multipleInstanceRegistrationPostRequest:
    type: object
    properties:
      instance_id:
        type: integer
        required: true
      subnet:
        type: object
        properties:
          address:
            type: string
            required: true
          netmask:
            type: string
            required: true
        required: true
      master_address:
        type: string
        required: true
      vpn_port:
        type: integer
        minimum: 1
        maximum: 65535
        required: true
      instance_network_port:
        type: integer
        minimum: 1
        maximum: 65535
        required: true
      ca:
        type: string
        required: true
      cert:
        type: string
        required: true
      key:
        type: string
        required: true

  getNodeCellHealthRuntimeDetailsResponse:
    type: object
    properties:
      node_cellhealth_runtime_details:
        type: object
        properties:
          id:
            type: string
          failover_status:
            type: string
            description: Current status of fail over.
            enum: [
              "Active",
              "Failover",
              "Failed",
            ]
          signal_strength:
            type: integer
            description: Current signal strength of cellular modem
          failover_enabled:
            type: boolean
            description: Whether fail over has been enabled for cellular modem
          rssi:
            type: integer
            description: Current RSSI of cellular modem
          ipv6_address:
            type: string
            description: The ipv6 address of the modem if the interface is active
          ipv4_address:
            type: string
            description: The ipv4 address of the modem if the interface is active
          connection_status:
            type: boolean
            description: Whether the connection is up or down
          sim_issues:
            type: boolean
            description: If there are any sim issues detected (missing sim, or not enabled)
          connectivity_test:
            type: boolean
            description: >
                The status of the last connectivity test. Which can take up to
                15 minutes depending on the cellular modem within the node.
                There will be some delay between the other values returned in
                the node_cellhealth_runtime_details and the connectivity test.
          passthrough_enabled:
            type: boolean
            description: Whether IP Passthrough has been enabled.
          ar_controlled:
            type: boolean
            description: Whether auto response controlling has been enabled for fail over.
          failover_dormant:
            type: boolean
            description: >
                Whether fail over dormant has been enabled. This would leave the
                cellular connection active even when not used for fail over.
          connection_type:
            type: string
            description: Current connection type, e.g lte, GSM
          carrier:
            type: string
            description: The mobile network carrier of the active SIM in the cellular modem.
          imei:
            type: string
            description: The IMEI of the cellular modem.
          imsi:
            type: string
            description: The IMSI of the active SIM in the cellular modem.
          iccid:
            type: string
            description: The ICCID of the active SIM in the cellular modem.

  configBackupResponse:
    type: object
    properties:
      system_config_backup:
        type: object
        properties:
          id:
            type: string
            description: Identifier for retrieving generated backup file.
            required: true

  configRestoreResponse:
    type: object
    properties:
      system_config_restore:
        type: object
        properties:
          status:
            type: string
            description: Status of the restore process.
            required: true

  uploadRestoreResponse:
    type: object
    properties:
      system_upload_restore:
        type: object
        properties:
          id:
            type: string
            description: Identifier for initiating restore process.
            required: true
          version:
            type: string
            description: Lighthouse version used to create the backup.
            required: true
          status:
            type: string
            description: Status of the restore process.
            required: true

  jobResponse:
    type: object
    properties:
      id:
        type: string
        required: true
      job_id:
        type: string
        required: true
      tube_name:
        type: string
        required: true
      creation_time:
        type: string
        required: true
      finish_time:
        type: string
        required: false
      duration:
        type: integer
        required: false
      last_status:
        type: string
        required: true
      owner:
        type: string
        required: true
      nodes:
        type: jobNode[]
        required: true
      records:
        type: jobRecord[]
        required: true
      lighthouse_configurations:
        type: jobLighthouseConfiguration[]
        required: true

  jobSingleResponse:
    type: object
    properties:
      job:
        type: jobResponse
        required: true

  jobListResponse:
    type: object
    properties:
      jobs:
        type: jobResponse[]
        required: true
      meta:
        type: object
        properties:
          total_pages: integer

  jobNode:
    type: object
    properties:
      id:
        type: integer
        required: true
      node_id:
        type: string
        required: true
      name:
        type: string
        required: true

  jobRecord:
    type: object
    properties:
      id:
        type: integer
        required: true
      job_id:
        type: integer
        required: true
      creation_time:
        type: string
        required: true
      status:
        type: string
        required: true
      retry_count:
        type: integer
        required: true
      delay:
        type: integer
        required: true
      errors:
        type: jobError[]
        required: true

  jobLighthouseConfiguration:
    type: object
    properties:
      id:
        type: integer
        required: true
      job_id:
        type: integer
        required: true
      lighthouse_configuration_id:
        type: integer
        required: true

  jobError:
    type: object
    properties:
      id:
        type: integer
        required: true
      job_track_id:
        type: integer
        required: true
      message:
        type: string
        required: true

  getPortLogsResponse:
    type: object
    properties:
      id:
        type: string
        required: true
      port_id:
        type: string
        required: true
      message:
        type: string
        required: true
      node_time:
        type: string
        required: true
      lighthouse_time:
        type: string
        required: true

  portLogDelete:
    type: object
    properties:
      node_id:
        type: string
        required: false
      port_id:
        type: string
        required: false
      max_kept:
        type: integer
        required: false
        description: 'Maximum number of logs to keep.'
      oldest_date:
        type: string
        required: false
        description: 'Delete logs collected before this date.'

  role:
    type: object
    properties:
      "id":
        type: string
        required: false
      "rolename":
        type: string
        required: true
      "description":
        type: string
        required: false
      "groups":
        type: array
        required: false
        items:
          type: string
      "permissions":
        type: object
        required: false
        description: See the example for schema of object

  getRolesResponse:
    type: object
    properties:
      "roles":
        type: array
        items:
          type: object
          properties:
            "id":
              type: string
              required: true
            "rolename":
              type: string
              required: true
            "description":
              type: string
              required: true
            "group_usage":
              type: number
              required: true
            "number_of_permissions":
              type: number
              required: true
            "last_updated":
              type: string
              required: true
      "meta": metaResponse

  netopsPermissions:
    type: object
    properties:
      user:
        type: string
        required: true
      rights:
        type: array
        required: true
        items:
          type: object
          properties:
            entity:
              type: string
              required: true
            read:
              type: boolean
              required: true
            write:
              type: boolean
              required: true

  getFirewallZonesResponse:
    type: object
    properties:
      "firewall_zones":
        type: array
        items:
          type: object
          properties:
            "name":
              type: string
              required: true
            "label":
              type: string
              required: true

  idpMetadata:
    type: object
    properties:
      idp_metadata:
        type: object
        properties:
          lighthouse_id: integer
          display_name: string
          provider:
            type: string
            description: one of `okta`, `azure_ad`, `onelogin`, `keycloak`
          sp_private_key:
              type: string
              required: false
          sp_certificate:
              type: string
              required: false
          metadata: string

  idpMetadataWithId:
    type: idpMetadata  # extend idpMetadata with the 'id' property
    properties:
      idp_metadata:
        type: object
        properties:
          id: integer

  idpMetadataWithLhDetails:
    type: idpMetadataWithId  # extend idpMetadataWithId with the 'lh_details' property
    properties:
      idp_metadata:
        type: object
        properties:
          lh_details:
            type: object
            required: false
            properties:
              hostname: string
              role: string
              network_address: string

  idpMetadataWithLhDetailsAndLhsWithoutIdpList:
    type: object
    properties:
      idp_metadatas:
        type: array
        items:
          properties:
            lighthouse_id: integer
            display_name: string
            provider:
              type: string
              description: one of `okta`, `azure_ad`, `onelogin`, `keycloak`
            sp_private_key:
              type: string
              required: false
            sp_certificate:
              type: string
              required: false
            metadata: string
            lh_details:
              type: object
              required: false
              properties:
                hostname: string
                role: string
                network_address: string
      lhs_without_idp:
        type: array
        required: false
        items:
          properties:
            lighthouse_id: integer
            lh_details:
                type: object
                properties:
                  hostname: string
                  role: string
                  network_address: string

  getNetopsServiceResponse:
    type: object
    properties:
      "netops":
        type: object
        properties:
          "repository": string
          "enabled": boolean

resourceTypes:
  base-type:
    get?:
      securedBy: [ token ]
      headers:
        Authorization:
          displayName: Authorization
          example: Token {{sessionUid}}
      responses:
        400:
          body:
            application/json:
              type: error
        401:
          description: Authentication failure
          body:
            application/json:
              type: error
              examples:
                example1:
                  value: {
                    "error": [
                      {
                        type: 7,
                        "code": 43,
                        "text": "Invalid session ID.",
                        "args": {},
                        "level": 1,
                      }
                    ]
                  }
                example2:
                  value: {
                    "error": [
                      {
                        type: 7,
                        "code": 47,
                        "text": "Permission denied",
                        "args": {},
                        "level": 1,
                      }
                    ]
                  }
        403:
          description: User is not allowed to access the requested resource.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 47,
                      "text": "Permission denied",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }

    post?:
      securedBy: [ token ]
      headers:
        Authorization:
          displayName: Authorization
          example: Token {{sessionUid}}
      responses:
        400:
          body:
            application/json:
              type: error
        401:
          description: Authentication failure
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 43,
                      "text": "Invalid session ID.",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        403:
          description: User is not allowed to create the requested resource.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 47,
                      "text": "Permission denied",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
    put?:
      securedBy: [ token ]
      headers:
        Authorization:
          displayName: Authorization
          example: Token {{sessionUid}}
      responses:
        400:
          body:
            application/json:
              type: error
        401:
          description: Authentication failure
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 43,
                      "text": "Invalid session ID.",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        403:
          description: User is not allowed to modify the requested resource.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 47,
                      "text": "Permission denied",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        404:
          description: Not found
          body:
            application/json:
              type: error
        500:
          description: Internal error
          body:
            application/json:
              type: error
    delete?:
      securedBy: [ token ]
      headers:
        Authorization:
          displayName: Authorization
          example: Token {{sessionUid}}
      responses:
        400:
          description: Incomplete data
          body:
            application/json:
              type: error
        401:
          description: Authentication failure
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 43,
                      "text": "Invalid session ID.",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        403:
          description: User is not allowed to delete the requested resource.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 47,
                      "text": "Permission denied",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
    patch?:
      securedBy: [ token ]
      headers:
        Authorization:
          displayName: Authorization
          example: Token {{sessionUid}}
      responses:
        400:
          body:
            application/json:
              type: error
        401:
          description: Authentication failure
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 43,
                      "text": "Invalid session ID.",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        403:
          description: User is not allowed to modify the requested resource.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 47,
                      "text": "Permission denied",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
  searchable-type:
    type: base-type
    get:
      queryParameters:
        per_page:
          description: Maximum number of items per page
          type: integer
          required: false
          displayName: per_page
          default: 100000
        page:
          description: The page to return (indexed from 1)
          type: integer
          required: false
          displayName: page
          default: 1
        json:
          description: >
            One or more json URL encoded search parameters.


            Example
            %7B%22type%22%3A1%2C%22items%22%3A%5B%7B%22datatype%22%3A4
            %2C%22type%22%3A3%2C%22oper%22%3A1%2C%22fieldname%22%3A%22
            config%3Aname%22%2C%22value%22%3A%22test%22%7D%5D%7D


            which is the URL encoded json


            {type:1,items:[{"datatype":4,type:3,"oper":1,"fieldname":"config:name","value":"test"}]}
          type: string
          required: false
          displayName: 'json'
        jb64:
          description: >
            one or more base64 encoded json search parameters.


            Ensure that any trailing = padding is URL encoded to %3D
          type: string
          required: false
          displayName: 'jb64'
        searchparameters:
          description: >
            One or more search fields as provided by /nodes/fields.


            For example,

            config:name=\*test\*, will search for nodes with names containing
            test, or


            config:status=!Enrolled will search for
            nodes which are not enrolled.


            Allowed operators are: =value, >value, >=value, <value, <=value,
            !value (not), \*value (ends in), value\* (starts with), \*value\*
            (contains). Reserved characters to be URl encoded, e.g. = as %3D
          type: string
          required: false
          displayName: 'search parameters*'
        operator:
          description: >
            Operator applied between all searchparameters, json and jb64
            query parameters.


            AND or OR

          default: AND
          required: false
        searchId:
          description: >
            Lighthouse maintains search results for a limited timespan,
            which allows the user to paginate through results.
            The searchId is returned in meta data of a normal search and can
            then be used as a parameter to retrieve the same results. When
            searchId is used, no other search parameter may be included,
            only page and per_page can be used to proceed through pagination.
          type: string
          required: false
          displayName: 'searchId'
      responses:
        400:
          description: >
            Invalid request:
            Missing or incorrect page/per_page.
            Invalid Condition value.
            Invalid search parameter.
            Invalid json/jb64 parameter.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 48,
                      "text": "Invalid parameter 'config:nam' was provided.",
                      "args": {
                        "param": "config:nam",
                      },
                      "level": 1,
                    },
                    {
                      type: 2,
                      "code": 49,
                      "text": "Invalid json '{\"type\":1,\"items\":{\"datatype\":4,\"type\":3,\"oper\":1,\"fieldname\":\"config:name\",\"value\":\"test\"}]}' for parameter 'json'",
                      "args": {
                        "line": "1",
                        "position": "92",
                        "value": "{\"type\":1,\"items\":{\"datatype\":4,\"type\":3,\"oper\":1,\"fieldname\":\"config:name\",\"value\":\"test\"}]}",
                        "column": "92",
                        "error": "'}' expected near ']'",
                        "param": "json",
                      },
                      "level": 1,
                    },
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }

/sessions:
  description: >
    The sessions endpoint is used to authenticate the user and create a
    session token for accessing all other Lighthouse endpoints.
  # Auth.session_create
  post:
    displayName: createSession
    description: Create a new authenticated session.
    body:
      application/json:
        type: credentials
        example:
          {"username":"root","password":"default"}
    responses:
      400:
        description: Failed to initiate session creation due to error in post body.
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    type: 4,
                    "code": 40,
                    "text": "Required field 'username' was not provided in the request.",
                    "args": {
                      "param": "username",
                    },
                    "level": 1,
                  },
                  {
                    type: 4,
                    "code": 40,
                    "text": "Required field 'password' was not provided in the request.",
                    "args": {
                      "param": "password",
                    },
                    "level": 1,
                  }
                ]
              }
      401:
        description: Authentication failed due to invalid credentials or session.
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    type: 7,
                    "code": 41,
                    "text": "Invalid login credentials",
                    "args": {},
                    "level": 1,
                  }
                ]
              }
      303:
        description: Redirect to new authentication session
        body:
          application/json:
            example:
              {
                "sid": "71dcba707b6c177644ede1b224f69096",
                "message": "Redirecting to new session at {redirect-url}",
              }
      200:
          body:
            application/json:
              type: getSessionResponse
              example:
                {
                  "state": "authenticated",
                  "password_expired": false,
                  "session": "71dcba707b6c177644ede1b224f69096",
                  "user": "root",
                }
  /{sessionUid}:
    type: base-type
    # Auth.session_get
    get:
      displayName: getSession
      description: >
        Retrieve the state of an authentication session by ID. A session ID may
        be valid for some period after the user logs out.
      responses:
        200:
          description: Session exists
          body:
            application/json:
              type: getSessionResponse
              example:
                {
                  "state": "authenticated",
                  "password_expired": false,
                  "session": "71dcba707b6c177644ede1b224f69096",
                  "user": "root",
                }
        400:
          description: Session does not exist
          body:
            application/json:
              type: getSessionResponse
              example:
                {
                  "state": "unknown",
                  "session": "4cf7ff89791062c2eddcbb7778d532a",
                }
        404:
          description: Session does not exist
          body:
            application/json:
              example:
                {
                  "state": "unknown",
                  "session": "4cf7ff89791062c2eddcbb7778d532a",
                }
    # Auth.session_apply_response
    put:
      body:
        application/json:
          type: responseToSessionChallenge
      displayName: responseToSessionChallenge
      description: Apply a challenge response to a session
      responses:
        200:
          description: Response applied. Next challenge in {challenge} if required.
          body:
            application/json:
              type: responseToSessionChallenge
        400:
          description: Invalid request
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        403:
          description: Authentication failed. No more attempts allowed.
        404:
          description: Authentication failed.
    # Auth.session_delete
    delete:
      displayName: deleteSession
      description: Log out of and delete a session
      responses:
        200:
          description: Session deleted
          body:
            application/json:
              type: deleteSessionResponse
        404:
          description: Session did not exist

/actions:
  description: >
    Action endpoints are related to configuring and accessing information about
    the Lighthouse message bus event system.
  /configurations:
    type: base-type
    description: Retrieve or change the transmission details of the various Lighthouse event types.
    get:
      description: Get the transmission details about the various Lighthouse event types.
      responses:
        200:
          body:
            application/json:
              type: actionConfigurationsGet
              example:
                {
                  action_configurations:
                    [
                      {
                        id: 1,
                        name: "license_added",
                        thirdparty_enabled: true,
                      },
                      {
                        id: 2,
                        name: "system_upgraded",
                        thirdparty_enabled: false,
                      },
                    ]
                }
    put:
      description: Update the transmission details about the various Lighthouse event types.
      responses:
        200:
          body:
            application/json:
            type: actionConfigurationsPut
            example:
              {
                action_configurations:
                  [
                    {
                      id: 1,
                      thirdparty_enabled: true,
                    },
                    {
                      id: 2,
                      thirdparty_enabled: false,
                    },
                  ]
              }
    /{configurationId}:
      type: base-type
      description: Retrieve or change the transmission details of a specific Lighthouse event type.
      get:
        description: Get the transmission details about a specific Lighthouse event type.
        responses:
          200:
            body:
              application/json:
                type: actionConfigurationGet
                example:
                  {
                    action_configuration:
                        {
                          id: 1,
                          name: "license_added",
                          thirdparty_enabled: true,
                        }
                  }
          404:
            description: Configuration id does not exist
      put:
        description: Update the transmission details about a specific Lighthouse event type.
        responses:
          200:
            body:
              application/json:
              type: actionConfigurationPut
              example:
                {
                  action_configuration:
                    {
                      id: 1,
                      thirdparty_enabled: true,
                    }
                }
          404:
            description: Configuration id does not exist

  /subscriptions:
    type: base-type
    description: Register a callback for a specific Lighthouse event type.
    post:
      description: Register a callback for a specific Lighthouse event type.
      responses:
        200:
          body:
            application/json:
              type: actionSubscription
              example:
                {
                  action_type: "license_added",
                  subscription_type: "web_hook",
                  details:
                  {
                    webhook_url: "http://test.com/hook",
                  }
                }
    /{subscriptionId}:
      type: base-type
      description: Retrieve or remove a specific Lighthouse event callback.
      get:
        description: Get a specific Lighthouse event callback.
        responses:
          200:
            body:
              application/json:
                type: actionSubscription
                example:
                  {
                    action_subscription:
                        {
                          action_type: "license_added",
                          subscription_type: "web_hook",
                          details:
                          {
                            webhook_url: "http://test.com/hook",
                          }
                        }
                  }
          404:
            description: Callback does not exist
      delete:
        description: Delete a specific Lighthouse event callback.
        responses:
          200:
            description: The callback was deleted successfully.
          404:
            description: Callback does not exist

/nodes:
  type: searchable-type
  description: >
    Creating/registering and viewing the state of console server nodes.
  # Node.get_node_list
  get:
    displayName: getNodes
    description: >
      Gets nodes attached to this lighthouse instance.


      Any number of search query parameters can be provided to perform an
      ANDed search on the nodes. The parameters possible should be retrieved
      with GET /nodes/fields. The list provided is dynamic.


      The standard ember-data pagination fields {per_page} and {page} apply
      to this list.


      {per_page} and {page} are optional but both are to be supplied if pages
      are requested.


      A node response will also contain a list of tags, which represents the
      user-editable attributes assigned to this node.
    queryParameters:
      per_page:
        description: Maximum number of nodes per page
        type: integer
        required: false
        displayName: per_page
        default: 100000
      page:
        description: The page to return (indexed from 1)
        type: integer
        required: false
        displayName: page
        default: 1
      order_by:
        description: Field by which to sort the nodes.
        type: string
        required: false
        displayName: order_by
        default: 'id'
      desc:
        description: Set the sort order to descending if 'true', '1', 'y' or 'yes' (case insensitive).
        type: string
        required: false
        displayName: desc
        default: 'false'
      searchparameters:
        description: One or more search fields as provided by /nodes/fields
        type: string
        required: false
        displayName: 'search parameters*'
    responses:
      200:
        description: The array of nodes, either a full or as requested by parameters
        body:
          application/json:
            type: getNodesResponse
            example:
              {
                "nodes": [
                  {
                    "name": "test",
                    "id": "nodes-1",
                    "lhvpn_address": "192.168.128.2",
                    "product": "opengear",
                    "runtime_status": {
                      "change_delta": 2148,
                      "change_time": 0,
                      "action_status": "unknown",
                      "id": "nodes-1",
                      "action_type": "none",
                      "connection_status": "unknown",
                      "action_error_message": "",
                    },
                    "cellhealth_runtime_status": {
                      "change_delta": 2148,
                      "change_time": 1471516371,
                      "status": "good",
                      "id": "nodes-1",
                    },
                    "tag_list": {
                        "id": "nodes-1",
                        "tags": [
                          {
                            "id": "nodes_tags-4",
                            "name": "Location",
                            "value": "Hong Kong",
                          }
                        ],
                        "rights": {
                            "create": true,
                            "modify": true,
                            "delete": true,
                        }
                    },
                    "ports": [
                      {
                        "id": "port1",
                        "label": "User Label",
                        "mode": "disabled",
                        "proxied_ssh_url": "",
                      }
                    ],
                    "status": "Enrolled",
                    "rights": {
                      "delete": false,
                      "view_template_push_status": true,
                      "modify": true,
                      "view_config_sync_status": true,
                      "view_cellhealth_runtime_details": true,
                    },
                    "enrollment_bundle": "Global",
                    "mac_address": "00:13:c6:02:47:99",
                    "serial_number": "70000002451668",
                    "model": "ACM7004-5-LMR",
                    "interfaces": [],
                    "approved": true,
                    "firmware_version": "4.0.0",
                    "etags": [
                      {
                        "id": "nodes-etags-1",
                        "name": "serialPorts",
                        "status":"Supported",
                        "version": 1,
                      },
                      {
                        "id": "nodes-etags-2",
                        "name": "nodeDescription",
                        "status":"Supported",
                        "version": 1,
                      },
                      {
                        "id": "nodes-etags-3",
                        "name": "groups",
                        "status":"Supported",
                        "version": 1,
                      },
                      {
                        "id": "nodes-etags-4",
                        "name": "auth",
                        "status":"Supported",
                        "version": 1,
                      }
                    ],
                    "config-push-status": {},
                    "nom_modules": [],
                    "firewall_zones": [],
                  },
                  {
                    "name": "test3",
                    "id": "nodes-2",
                    "lhvpn_address": "192.168.128.3",
                    "product": "opengear",
                    "runtime_status": {
                      "change_delta": 2148,
                      "change_time": 1471516371,
                      "action_status": "error",
                      "id": "nodes-2",
                      "action_error_message": "Failed to contact node.",
                      "action_type": "registration",
                      "connection_status": "never seen",
                    },
                    "cellhealth_runtime_status": {
                      "change_delta": 2148,
                      "change_time": 1471516371,
                      "status": "good",
                      "id": "nodes-2",
                    },
                    "ports": [
                      {
                        "id": "port1",
                        "label": "User Label",
                        "mode": "disabled",
                        "proxied_ssh_url": "",
                      }
                    ],
                    "tag_list": {
                        "id": "nodes-1",
                        "tags": [],
                        "rights": {
                            "create": true,
                            "modify": true,
                            "delete": true,
                        }
                    },
                    "status": "Registering",
                    "rights": {
                      "delete": false,
                      "view_template_push_status": true,
                      "modify": true,
                      "view_config_sync_status": true,
                      "view_cellhealth_runtime_details": true,
                    },
                    "enrollment_bundle": "Global",
                    "mac_address": "00:13:c6:02:5a:d5",
                    "serial_number": "71480488331675",
                    "model": "CM7148-2-DAC",
                    "interfaces": [],
                    "approved": true,
                    "firmware_version": "4.0.0",
                    "etags": [
                      {
                        "id": "nodes-etags-5",
                        "name": "serialPorts",
                        "status":"Supported",
                        "version": 1,
                      },
                      {
                        "id": "nodes-etags-6",
                        "name": "nodeDescription",
                        "status":"Supported",
                        "version": 1,
                      },
                      {
                        "id": "nodes-etags-7",
                        "name": "groups",
                        "status":"Error",
                        "version": 1,
                      },
                      {
                        "id": "nodes-etags-8",
                        "name": "auth",
                        "status":"Supported",
                        "version": 1,
                      }
                    ],
                    "config-push-status": {
                      "finished": ["script1","template1"],
                      "failed": ["script2","groups2"],
                    },
                    "nom_modules": [
                      {
                        "name": "dop",
                        "version": "1.2.0",
                      }
                    ],
                    "firewall_zones": [],
                  }
                ],
                "meta": {
                  "total_pages": 1,
                }
              }
      400:
        description: Invalid request, missing or incorrect page/per_page
        body:
          application/json:
            type: error
            example:
              {
                "error": [
                  {
                    type: 4,
                    "code": 39,
                    "text": "Invalid request body",
                    "args": {},
                    "level": 1,
                  }
                ]
              }
      404:
        description: Invalid request, Incomplete data, Node not found, Failure during retrieval of nodes
        body:
          application/json:
            type: error
      500:
        description: Failed to read nodes.
        body:
          application/json:
            type: error
  # Enrollment.registration
  post:
    body:
      application/json:
        type: new_node
        examples:
          example1:
            {
              "enrollment":
              {
                "product": "opengear",
                "call_home": true,
                "token":"ABCDEFGHIJKLMNOPQRSTUVWXYZ123456",
                "bundle":"console-servers",
                "hostname":"acm7004-5",
              }
            }
          example2:
            {
              "enrollment":
              {
                "product": "opengear",
                "call_home": false,
                "name":"bne-7004-backup",
                "address":"1.2.3.4",
                "username":"root",
                "password":"default",
                "auto_approve":true,
              }
            }
          example3:
            {
              "enrollment":
              {
                "product": "generic",
                "name":"bne-7004-backup",
                "address":"1.2.3.4",
                "connection_method": "ssh",
                "username":"root",
                "password":"default",
                "auto_approve":true,
                "base_port": 2100,
                "port_count": 2,
                "port_labels": [
                  "Port 1",
                  "Port 2",
                ]
              }
            }

    displayName: enrollNewNode
    description: >
      Enqueue a new node for enrollment. This can either be a direct (Lighthouse-driven) enrollment, or a enrollment request by a new node ("call-home").

      The "call-home" parameter in the enrollment request body dictates what style it should be. If true, the request is not authenticated with a sesstion token (ie. from the web UI), but an enrollment request token. The caller should also pass a hostname to be used for the node name, and can optionally pass a bundle identifier to request enrollment against a specific bundle.

      If the enrollment is not "call-home", but directly driven from the Lighthouse, the request should be in an authenticted session, and provide the node details (name, address, username, password and auto-approve). The address must be a valid IPv4 address.
    responses:
      200:
        description: For direct enrollment. Enrollment initiated, but not yet complete. Lighthouse will now try to enroll the node at address given.
        body:
          application/json:
            example: {
              "node": {
                "tag_list": {
                  "id": "nodes-3",
                  "rights": {
                      "delete": true,
                      "create": true,
                      "modify": true,
                  },
                  "tags": [],
                },
                "etags": [],
                "rights": {
                  "view_template_push_status": true,
                  "delete": true,
                  "view_config_sync_status": true,
                  "modify": true,
                },
                "status": "Pending",
                "approved": true,
                "runtime_status": {
                  "change_delta": 0,
                  "change_time": 1535071583,
                  "action_status": "in progress",
                  "id": "nodes-3",
                  "action_error_message": "",
                  "action_type": "registration",
                  "connection_status": "never seen",
                },
                "config_push_status": {},
                "id": "nodes-3",
                "enrollment_bundle": "Global",
                "name": "nodes-3",
                "interfaces": [],
                "ports": [],
              }
            }
      202:
        description: For callhome enrollment. Enrollment initiated, but not yet complete. Client can poll for registration package using given UUID and enrollment package password.
        body:
          application/json:
            example:
              {
                "message": "Enrollment initiated: new registration package will be available soon",
                "uuid": "{uuid}",
                "package_password": "{package_password}",
              }
      303:
        description: Redirect to new node session
        body:
          application/json:
            example:
              {
                "message": "Redirecting to new node at {redirect-url}"}
      400:
        description: Invalid request, or error with supplied data (eg. incorrect IP address)
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    type: 4,
                    "code": 39,
                    "text": "Invalid request body",
                    "args": {},
                    "level": 1,
                  }
                ]
              }
      403:
        description: Request not allowed
        body:
          application/json:
            type: object
            example:
              {
                "error" : "Dependent Lighthouse cannot process node enrollment",
              }
      500:
        description: Unexpected error, including failure to start enrollment due to internal error.
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    type: 2,
                    "code": 26,
                    "text": "Duplicate 'name' fields with value 'test'",
                    "args": {
                      "value": "test",
                      "uuid": "root-1-@nodes",
                      "field": "name",
                    },
                    "level": 1,
                  },
                  {
                    type: 1,
                    "code": 33,
                    "text": "Push command failed",
                    "args": {},
                    "level": 1,
                  }
                ]
              }
  /smartgroups:
    type: base-type
    get:
      displayName: getNodeSmartgroupList
      description: Retrieve a list of node smart groups
      responses:
        200:
          description: A list of nodes
          body:
            application/json:
              example:
                {
                  "meta": {
                    "total_pages": 1,
                  },
                  "smartgroups": [
                    {
                      "id": "smart_groups_node_groups-1",
                      name: "X",
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "query": "{\"type\": 2, \"fieldname\": \"config:example\", \"oper\": 3, \"datatype\": 2}",
                    },
                    {
                      "id": "smart_groups_node_groups-5",
                      name: "X3",
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "query": "{\"type\": 2, \"fieldname\": \"config:example\", \"oper\": 3, \"datatype\": 2}",
                    }
                  ]
                }
        500:
          description: Unexpected error
    post:
      displayName: createNodeSmartgroup
      description: Create a new node smart group
      body:
        application/json:
          example:
            {
              "smartgroup": {
                name: "X9",
                "rights": {
                  "delete": true,
                  "modify": true,
                },
                "query": "{\"type\": 2, \"fieldname\": \"config:example\", \"oper\": 3, \"datatype\": 2}",
              }
            }
      responses:
        200:
          description: Smartgroup created successfully.
          body:
            application/json:
              example: |
                {
                  "smartgroup": {
                    "id": "smart_groups_nodes_groups-4",
                    "rights": {
                      "delete": true,
                      "modify": true,
                    },
                    "name": "X9",
                    "query": "{\"type\": 2, \"fieldname\": \"config:example\", \"oper\": 3, \"datatype\": 2}",
                  }
                }
        303:
          description: Redirect to newly created smartgroup.
        400:
          description: >
            Invalid request: body is not json or does not conform to required json schema.
    /{groupId}:
      type: base-type
      get:
        displayName: getNodeSmartgroup
        description: Retrieve the details for a smart group.
        responses:
          200:
            description: Group exists
            body:
              application/json:
                example:
                  {
                    "smartgroup": {
                      "id": "smart_groups_node_groups-1",
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      name: "X",
                      "query": "{\"type\": 2, \"fieldname\": \"config:example\", \"oper\": 3, \"datatype\": 2}",
                    }
                  }
          404:
            description: Smartgroup does not exist
      delete:
        displayName: deleteNodeSmartgroup
        description: Delete a smart group.
        responses:
          200:
            description: The group was deleted successfully.
          404:
            description: Smartgroup does not exist
      put:
        displayName: updateNodeSmartgroup
        description: Updates the details for a smart group.
        body:
          application/json:
            example:
              {
                "smartgroup": {
                  name: "X9",
                  "query": "{\"type\": 2, \"fieldname\": \"config:example\", \"oper\": 3, \"datatype\": 2}",
                }
              }
        responses:
          200:
            description: Successfully updated
            body:
              application/json:
                example:
                  {
                    "smartgroup": {
                      "id": "smart_groups_node_groups-1",
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      name: "X",
                      "query": "{\"type\": 2, \"fieldname\": \"config:example\", \"oper\": 3, \"datatype\": 2}",
                    }
                  }
          404:
            description: Smartgroup does not exist
          400:
            description: Request data was not valid or incomplete
      /nodes:
        type: base-type
        get:
          displayName: getSmartgroupNodes
          description: Current member nodes of the resolved smart group
          responses:
            200:
              description: Group exists
              body:
                application/json:
                  properties:
                    nodes:
                      type: array
                      items:
                        type: string
                  example:
                    {
                      "nodes": [
                        "nodes-2",
                        "nodes-7",
                        "nodes-9",
                      ]
                    }
            404:
              description: Smartgroup does not exist

  # Node.manifest
  /manifest:
    type: base-type
    get:
      displayName: downloadManifest
      description: Download the system manifest file
      responses:
        200:
          description: The manifest file
          body:
            text/plain:
              example: >
                address=192.168.0.1

                api_port=443

                password=enrollmentToken
        404:
          description: No manifest file is available
  # Node.get_node
  /{id}:
    type: base-type
    uriParameters:
      id:
        description: ID of the node.
        required: true
        displayName: id
        example: nodes-1
    get:
      displayName: findNodeByID
      description: Find a node by unique ID
      responses:
        200:
          description: The requested node
          body:
            application/json:
              type: findNodeByIDResponse
              example:
                {
                  "node": {
                    "name": "test1",
                    "id": "nodes-1",
                    "lhvpn_address": "192.168.128.2",
                    "product": "opengear",
                    "runtime_status": {
                      "change_delta": 2148,
                      "change_time": 1471950616,
                      "action_status": "in progress",
                      "id": "nodes-1",
                      "action_error_message": "",
                      "action_type": "registration",
                      "connection_status": "never seen",
                    },
                    "cellhealth_runtime_status": {
                      "change_delta": 2148,
                      "change_time": 1471516371,
                      "status": "good",
                      "id": "nodes-1",
                    },
                    "tag_list": {
                        "id": "nodes-1",
                        "tags": [
                          {
                            "id": "nodes_tags-4",
                            "name": "Location",
                            "value": "Hong Kong",
                          }
                        ],
                        "rights": {
                            "create": true,
                            "modify": true,
                            "delete": true,
                        }
                    },
                    "rights": {
                      "delete": false,
                      "view_template_push_status": true,
                      "modify": true,
                      "view_config_sync_status": true,
                    },
                    "status": "Registering",
                    "enrollment_bundle": "Global",
                    "mac_address": "00:13:c6:02:47:99",
                    "serial_number": "70000002451668",
                    "model": "ACM7004-5-LMR",
                    "last_job_id": "e26918b7-439e-4daf-8520-6a17e13b0dac",
                    "interfaces": [],
                    "etags": [],
                    "ports": [],
                    "approved": true,
                    "firmware_version": "4.0.0",
                    "nom_modules": [
                      {
                        "name": "dop",
                        "version": "1.2.0",
                      }
                    ]
                  }
                }
        404:
          description: Node does not exist
        500:
          description: Unexpected error
      headers:
        Authorization:
          description: authorization session token
          type: string
          required: true
          displayName: Authorization
    put:
      displayName: putNode
      description: Update a node
      body:
        application/json:
          type: put_node
          example:
            {
              "node": {
                name: "test1",
                "approved": false,
                "connection_info":
                  {
                    "address": "192.168.1.1",
                    "username": "new_username",
                    "password": "new_pass",
                  },
                "tags": [
                  {
                    "id": "nodes_tags-4",
                    name: "Location",
                    "value": "Hong Kong",
                  }
                ]
              }
            }
      responses:
        200:
          description: The updated node
          body:
            application/json:
              type: findNodeByIDResponse
              example:
                {
                  "node": {
                    name: "test1",
                    "id": "nodes-1",
                    "lhvpn_address": "192.168.128.2",
                    "product": "opengear",
                    "runtime_status": {
                      "change_delta": 2148,
                      "change_time": 1471950616,
                      "action_status": "in progress",
                      "id": "nodes-1",
                      "action_error_message": "",
                      "action_type": "registration",
                      "connection_status": "never seen",
                    },
                    "cellhealth_runtime_status": {
                      "change_delta": 2148,
                      "change_time": 1471516371,
                      "id":  "nodes-1",
                      "status": "bad",
                    },
                    "tag_list": {
                        "id": "nodes-1",
                        "tags": [],
                        "rights": {
                            "create": true,
                            "modify": true,
                            "delete": true,
                        }
                    },
                    "rights": {
                      "delete": false,
                      "view_template_push_status": true,
                      "modify": true,
                      "view_config_sync_status": true,
                    },
                    "status": "Registering",
                    "enrollment_bundle": "Global",
                    "mac_address": "00:13:c6:02:47:99",
                    "serial_number": "70000002451668",
                    "model": "ACM7004-5-LMR",
                    "interfaces": [],
                    "etags": [],
                    "ports": [],
                    "approved": false,
                    "firmware_version": "4.0.0",
                    "nom_modules": [
                      {
                        "name": "dop",
                        "version": "1.2.0",
                      }
                    ]
                  }
                }
        400:
          description: Invalid request data
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      "type": 4,
                      "code": 40,
                      "text": "Required field 'name' was not provided in the request.",
                      "args": {
                        "param": "name",
                      },
                      "level": 1,
                    },
                    {
                      "type": 4,
                      "code": 105,
                      "text": "'name' : Opengear devices address and credentials are not editable.",
                      "args": {
                        "param": "name",
                      },
                      "level": 1,
                    }
                  ]
                }
        404:
          description: Node does not exist

    delete:
      description: Delete (unenroll) a node.
      responses:
        204:
          description: The node was deleted successfully.
        403:
          description: Request not allowed
          body:
            application/json:
              type: object
              example:
                {
                  "error" : "Dependent Lighthouse cannot process node unenrollment",
                }

    # Enrollment.get_registration_package
    /registration_package:
      uriParameters:
        password:
          description: >
            Registration password generated by Lighthouse when initiating registration
          required: true
          displayName: package_password
      get:
        displayName: getNodeRegistrationPackageByID
        description: >
          Retrieve the enrollment package for a node, secured by
          the package password generated by lighthouse.
        responses:
          200:
            description: The requested enrollment package
            body:
              application/json:
                type: registrationPackageResponse
          500:
            description: Registration package not available for this node
            body:
              application/json:
                example:
                  {
                    "error": [
                      {
                        type: 5,
                        "code": 45,
                        "text": "Registration package is not currently available for this node",
                        "args": {},
                        "level": 1,
                      }
                    ]
                  }
          404:
            description: Node does not exist
    # Node.get_tags
    /tags:
      type: base-type
      description: >
        Each node can have a list of tags associated with it. These tags are
        references to a global list of tags, allowing for the grouping of nodes.
        For example one can group nodes into geographical location by assigning
        multiple nodes with a tag (tag="Location", value="New York").
      # Node.get_tags
      get:
        displayName: getNodeTags
        description: >
          Get the list of all tags associated with this node.
        responses:
          200:
            description: List of tags
            body:
              application/json:
                type: getNodeTagsResponse
                example:
                  {
                    "tags": [
                      {
                        "id": "nodes_tags-1",
                        name: "myTag",
                        "value": "my tag value",
                      },
                      {
                        "id": "nodes_tags-2",
                        name: "myTag2",
                        "value": "",
                      },
                      {
                        "id": "nodes_tags-3",
                        name: "myTag3",
                        "value": "another value",
                      }
                    ]
                  }
          400:
            description: Incomplete data.
          404:
            description: Node does not exist.
      # Node.create_tag
      post:
        displayName: createNodeTag
        description: >
          Create and associate a new tag with the node.
        body:
          application/json:
            type: createNodeTag
            example:
              {
                "tag": {
                  name: "Location",
                  "value":"New York",
                }
              }
        responses:
          200:
            body:
              application/json:
                type: postNodeTagsResponse
                description: Node with given node id not found.
                example:
                  {
                    "tag":
                      {
                        "id": "nodes_tags-1",
                        name: "Location",
                        "value": "New York",
                      }
                  }
          400:
            description: >
              Invalid request: body is not json or does not conform to required json schema.

              Incomplete data: name item missing.
          404:
            body:
              application/json:
                type: error
                description: Node with given node id not found.
      /{tag_value_id}:
        type: base-type
        uriParameters:
          tag_value_id:
            description: Identifier for unique tag within given node
            required: true
            displayName: tag_value_id
            example: nodes_tags-1
        # Node.get_tag_from_node
        get:
          description: Get a tag's information by ID.
          responses:
            200:
              description: >
                Tag information in node with {id} and tag identification
                {tag_value_id} successfully retrieved.
              body:
                application/json:
                  examples:
                    example1:
                      {
                        "tag": {
                          "id": "nodes_tags-1",
                          name: "Location",
                          "value": "New York",
                        }
                      }
            400:
              description: >
                Invalid request: body is not json or does not conform to required json schema.

                Incomplete data: node id, or tag_value_id parameter missing.
            404:
              body:
                application/json:
                  type: error
                  description: >
                    Node with given node {id} not found.
                    Tag information with given {tag_value_id} not found.
        # Node.delete_tag
        delete:
          description: Delete a tag value from the node.
          responses:
            200:
              description: The {tag_value_id} tag information was deleted.
            400:
              description: >
                Invalid request: body is not json or does not conform to required json schema.

                Incomplete data: node id, or tag_value_id parameter missing.
            404:
              body:
                application/json:
                  type: error
                  description: >
                    Node with given node {id} not found.

                    Tag information with given {tag_value_id} not found.
                  example:
                    {
                      "error": [
                        {
                          type: 5,
                          "code": 29,
                          "text": "Could not find element with UUID 'nodes_tags-0'.",
                          "args": {
                            "uuid": "nodes_tags-0",
                          },
                          "level": 1,
                        }
                      ]
                    }
        # Node.update_tag
        put:
          description: Update tag information for {node_tag_id} in node {id}
          body:
            application/json:
              type: createNodeTag
              example:
                {
                  "tag": {
                    name: "Location",
                    "value": "USA.NewYork",
                  }
                }
          responses:
            200:
              description: The {tag_value_id} tag information was updated.
            400:
              description: >
                Invalid request: body is not json or does not conform to required json schema.

                Incomplete data: node id, or tag_value_id parameter missing.
            404:
              body:
                application/json:
                  type: error
                  description: >
                    Node with given node {id} not found.

                    Tag information with given {tag_value_id} not found.
                  example:
                    {
                      "error": [
                        {
                          type: 5,
                          "code": 29,
                          "text": "Could not find element with UUID 'nodes_tags-0'.",
                          "args": {
                            "uuid": "nodes_tags-0",
                          },
                          "level": 1,
                        }
                      ]
                    }
    /cellhealth_runtime_details:
      type: base-type
      description: >
        If configured each node can display runtime cell health details
        this includes the result of the last connectivity test run
        There may be some delay between the connectivity test and the other results
        due to the time that a connectivity test can take, up to 5 minutes.
      # Node.get_cellhealth_runtime_details
      get:
        displayName: getNodeCellHealthRuntimeDetails
        description: >
          Get the current cell health runtime details
        responses:
          200:
            description: The cell health run time details
            body:
              application/json:
                type: getNodeCellHealthRuntimeDetailsResponse
                example:
                  {
                    "node_cellhealth_runtime_details": {
                      "rssi": -75,
                      "ar_controlled": false,
                      "ipv6_address": "fe80::fc54:ff:fe56:a4b9",
                      "id": "nodes-1",
                      "passthrough_enabled": false,
                      "ipv4_address": "192.168.1.1",
                      "connectivity_test": true,
                      "failover_enabled": false,
                      "failover_dormant": false,
                      "sim_issues": true,
                      "connection_status": false,
                      "connection_type": "lte",
                      "signal_strength": 62,
                      "failover_status": "Active",
                      "carrier": "Telstra",
                      "imei": "353533100575607",
                      "imsi": "89148000004743232368",
                      "iccid": "310410892915611",
                      }
                  }
          400:
            description: Incomplete data.
          404:
            description: Node does not exist.
    /port_logs:
      type: base-type
      description: >
        View the port logs if the node is configured to send their syslogs to Lighthouse.
      get:
        queryParameters:
          port_id:
            description: Filter for which port the logs are from
            type: integer
            required: false
          from_date:
            description: Filter for port logs that received after this time
            type: string
            required: false
          to_date:
            description: Filter for port logs that received before this time
            type: string
            required: false
          contains:
            description: Filter for port logs that contained specific text
            type: string
            required: false
          per_page:
            description: Maximum number of port logs per page
            type: integer
            required: false
            displayName: per_page
            default: 10000
          page:
            description: The page to return (indexed from 1)
            type: integer
            required: false
            displayName: page
            default: 1
        displayName: getPortLogsByID
        description: >
          Retrieve the port logs for a node.
        responses:
          200:
            body:
              application/json:
                type: getPortLogsResponse
                example:
                  {
                    "port_logs": [
                      {
                        "id": 1,
                        "port_id": "nodes_ports-1",
                        "message": "port log message example 1",
                        "node_time": "2020-09-07T03:00:00.000000",
                        "lighthouse_time": "2020-09-07T03:00:00.000005",
                      },
                      {
                        "id": 2,
                        "port_id": "nodes_ports-2",
                        "message": "port log message example 2",
                        "node_time": "2020-09-08T03:11:00.000000",
                        "lighthouse_time": "2020-09-08T03:11:00.000005",
                      }
                    ]
                  }
  /ids:
    type: searchable-type
    get:
      queryParameters:
        per_page:
          description: Maximum number of nodes per page
          type: integer
          required: false
          displayName: per_page
          default: 100000
        page:
          description: The page to return (indexed from 1)
          type: integer
          required: false
          displayName: page
          default: 1
        order_by:
          description: Field by which to sort the nodes.
          type: string
          required: false
          displayName: order_by
          default: 'id'
        desc:
          description: Set the sort order to descending if 'true', '1', 'y' or 'yes' (case insensitive).
          type: string
          required: false
          displayName: desc
          default: 'false'
        searchparameters:
          description: One or more search fields as provided by /nodes/fields
          type: string
          required: false
          displayName: 'search parameters*'
      displayName: Get node search fields
      description: >
        Obtain a list of node ids, for example /nodes/ids?config:name=test.


        Any number of search query parameters can be provided to perform an
        ANDed search on the nodes. The parameters possible should be retrieved
        with GET /nodes/fields. The list provided is dynamic.


        The standard ember-data pagination fields {per_page} and {page} apply
        to this list.


        {per_page} and {page} are optional but both are to be supplied if pages
        are requested.

      responses:
        200:
          description: The list of search fields
          body:
            application/json:
              type: getNodeIdsResponse
              example:
                {
                  "nodes": [
                    "nodes-1",
                    "nodes-2",
                    "nodes-3",
                    "nodes-4",
                    "nodes-5",
                  ],
                  "meta": {
                    "searchId": "{150f460-743e-11e6-baab-080027032960",
                    "total_pages": 1,
                  }
                }
        500:
          description: Unexpected error
      headers:
        Authorization:
          description: authorization session token
          type: string
          required: true
          displayName: Authorization

  # Node.get_search_fields
  /fields:
    type: base-type
    get:
      displayName: Get node search fields
      description: >
        Obtain a list of fields which can be used to perform queries against
        nodes.
      responses:
        200:
          description: The list of search fields
          body:
            application/json:
              type: searchFieldsResponse
              example:
                {
                  "fields": [
                    "config:approved",
                    "config:common_name",
                    "config:description",
                    "config:lhvpn_address",
                    "config:mac_address",
                    "config:name",
                    "config:product",
                    "config:status",
                    "config:ssh_port",
                    "port:attachedDeviceType",
                    "port:hardwareSettings_pinout",
                    "port:hardwareSettings_protocol",
                    "port:hardwareSettings_uart_baud",
                    "port:hardwareSettings_uart_dataBits",
                    "port:hardwareSettings_uart_flowControl",
                    "port:hardwareSettings_uart_parity",
                    "port:hardwareSettings_uart_stopBits",
                    "port:hardwareType",
                    "port:id",
                    "port:label",
                    "port:logging_facility",
                    "port:logging_level",
                    "port:logging_priority",
                    "port:mode",
                    "port:modeSettings_bridge_rfc2217",
                    "port:modeSettings_bridge_server_address",
                    "port:modeSettings_bridge_server_port",
                    "port:modeSettings_bridge_sshTunnel",
                    "port:modeSettings_consoleServer_general_accumulateMS",
                    "port:modeSettings_consoleServer_general_escapeChar",
                    "port:modeSettings_consoleServer_general_powerMenuEnabled",
                    "port:modeSettings_consoleServer_general_replaceBackspace",
                    "port:modeSettings_consoleServer_portShare_authentication",
                    "port:modeSettings_consoleServer_portShare_enabled",
                    "port:modeSettings_consoleServer_portShare_encryption",
                    "port:modeSettings_consoleServer_portShare_password",
                    "port:modeSettings_consoleServer_rfc2217_enabled",
                    "port:modeSettings_consoleServer_ssh_enabled",
                    "port:modeSettings_consoleServer_tcp_enabled",
                    "port:modeSettings_consoleServer_telnet_enabled",
                    "port:modeSettings_consoleServer_telnet_unauthenticated",
                    "port:modeSettings_consoleServer_webShell_enabled",
                    "port:modeSettings_sdtServer_password",
                    "port:modeSettings_sdtServer_username",
                    "port:modeSettings_terminalServer_terminalType",
                    "port:nagios_enabled",
                    "port:nagios_name",
                    "port:nagios_portLogging",
                    "port:nagios_serialStatus",
                  ]
                }
        500:
          description: Unexpected error
      headers:
        Authorization:
          description: authorization session token
          type: string
          required: true
          displayName: Authorization

  /{id}/ports:
    type: base-type
    get:
      description: >
        Retrieve a list of all ports belonging to a node.
      responses:
        200:
          description: The list of ports belonging to the node
          body:
            application/json:
              type: getPortByIdResponseList

/ports:
  type: searchable-type
  description: >
    Used for working with port information.
  get:
    displayName: getPorts
    description: >
      Gets ports attached to this lighthouse instance.


      Any number of search query parameters can be provided to perform an
      ANDed search on the ports.


      The standard ember-data pagination fields {per_page} and {page} apply
      to this list.


      {per_page} and {page} are optional but both are to be supplied if pages
      are requested.

    queryParameters:
      per_page:
        description: Maximum number of ports per page
        type: integer
        required: false
        displayName: per_page
        default: 100000
      page:
        description: The page to return (indexed from 1)
        type: integer
        required: false
        displayName: page
        default: 1
      order_by:
        description: Field by which to sort the ports.
        type: string
        required: false
        displayName: order_by
        default: '_id'
      desc:
        description: Set the sort order to descending if 'true', '1', 'y' or 'yes' (case insensitive).
        type: string
        required: false
        displayName: desc
        default: 'false'
      searchparameters:
        description: One or more search fields
        type: string
        required: false
        displayName: 'search parameters*'
    responses:
      200:
        description: The array of ports, either a full array or as requested by parameters
        body:
          application/json:
            type: getPortByIdResponseList
            example:
              {
                "ports": [{
                  "proxied_ssh_url": "ssh://user:node1:port1@192.168.0.1",
                  "label": "Port 01",
                  "id": "nodes_ports-1",
                  "node_name": "node1",
                  "webshell_enabled": false,
                  "web_terminal_url": "manage/nodes/ports/terminal/node1/port1?name=Port_01",
                  "port_csid": "port1",
                  "mode": "consoleServer",
                  "runtime_status": {
                    "change_delta": 14,
                    "change_time": 1498603761,
                    "action_status": "in progress",
                    "id": "nodes-12",
                    "action_type": "none",
                    "connection_status": "connected",
                  },
                  "ssh_enabled": true,
                }],
                "meta": {
                  "searchId": "{4648d82-5b8a-11e7-a476-773c6172a34}",
                  "total_pages": 5,
                }
              }
      400:
        description: Invalid request, missing or incorrect page/per_page
        body:
          application/json:
            type: error
            example:
              {
                "error": [
                  {
                    type: 4,
                    "code": 39,
                    "text": "Invalid request body",
                    "args": {},
                    "level": 1,
                  }
                ]
              }
      404:
        description: Invalid request, Incomplete data, Port not found, Failure during retrieval of ports
        body:
          application/json:
            type: error
      500:
        description: Failed to read ports.
        body:
          application/json:
            type: error
  /{id}:
    type: base-type
    get:
      description: Retrieve a single port by ID.
      responses:
        200:
          description: Returns properties for a single port.
          body:
            application/json:
              type: getPortByIdResponse
  /smartgroups:
    type: base-type
    get:
      description: Retrieve a list of smart groups for port objects
      responses:
        200:
          description: Returns a list of smart groups for port objects
          body:
            application/json:
              example:
                {
                  "meta": {
                    "total_pages": 1,
                  },
                  "smartgroups": [
                    {
                      "id": "smart_groups_port_groups-1",
                      "name": "single-port-label",
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "query": "{\"type\": 3, \"fieldname\": \"config:label\", \"oper\": 3, \"datatype\": 4, \"value\": \"acm\"}",
                    },
                    {
                      "id": "smart_groups_port_groups-2",
                      "name": "multi-port-label",
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "query": "{\"items\":[{\"type\": 3, \"fieldname\": \"config:label\", \"oper\": 3, \"datatype\": 4, \"value\": \"acm\"}, {\"type\": 3, \"fieldname\": \"config:label\", \"oper\": 3, \"datatype\": 4, \"value\": \"55\"}], \"type\": 1}",
                    }
                  ]
                }
        500:
          description: Unexpected error
    post:
      description: Create a new smart group for port objects
      body:
        application/json:
          example:
            {
              "smartgroup": {
                "name": "single-port-label",
                "query": "{\"type\": 3, \"fieldname\": \"config:label\", \"oper\": 3, \"datatype\": 4, \"value\": \"acm\"}",
              }
            }
      responses:
        200:
          description: Smartgroup created successfully.
          body:
            application/json:
              example: |
                {
                  "smartgroup": {
                    "id": "smart_groups_ports_groups-4",
                    "rights": {
                      "delete": true,
                      "modify": true,
                    },
                    "name": "single-port-label",
                    "query": "{\"type\": 3, \"fieldname\": \"config:label\", \"oper\": 3, \"datatype\": 4, \"value\": \"acm\"}",
                  }
                }
        303:
          description: Redirect to newly created smartgroup.
        400:
          description: >
            Invalid request: body is not json or does not conform to required json schema.
    /{id}:
      type: base-type
      get:
        description: Retrieve a port smart group by ID
        responses:
          200:
            description: Returns smart group query for port objects
            body:
              application/json:
                example:
                  {
                    "smartgroup": {
                      "id": "smart_groups_port_groups-1",
                      "name": "single-port-label",
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "query": "{\"type\": 3, \"fieldname\": \"config:label\", \"oper\": 3, \"datatype\": 4, \"value\": \"acm\"}",
                    }
                  }
          404:
            description: Smartgroup does not exist

      put:
        description: Update a port smart group by ID
        body:
          application/json:
            example:
              {
                "smartgroup": {
                  "id": "smart_groups_port_groups-1",
                  "name": "single-port-label",
                  "query": "{\"type\": 3, \"fieldname\": \"config:label\", \"oper\": 3, \"datatype\": 4, \"value\": \"acm\"}",
                }
              }
        responses:
          200:
            description: Updated port smart group
            body:
              application/json:
                example:
                  {
                    "smartgroup": {
                      "id": "smart_groups_port_groups-1",
                      "name": "single-port-label",
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "query": "{\"type\": 3, \"fieldname\": \"config:label\", \"oper\": 3, \"datatype\": 4, \"value\": \"acm\"}",
                    }
                  }
          404:
            description: Smartgroup does not exist
          400:
            description: Request data was not valid or incomplete
      delete:
        description: Delete a port smart group by ID
        responses:
          200:
            description: The port smart group was deleted
          404:
            description: Smartgroup does not exist

/managed_devices:
  type: base-type
  description: Retrieving information on managed devices grouped by nodes
  get:
    description: >
      Retrieve a list of managed devices grouped by nodes

      Any number of search query parameters can be provided to perform an
      ANDed search on the ports and nodes. This search must be performed with field names in the context of a port search.

      The standard ember-data pagination fields {per_page} and {page} apply
      to this list.

      {per_page} and {page} are optional but both are to be supplied if pages
      are requested.

    queryParameters:
      per_page:
        description: Maximum number of nodes per page
        type: integer
        required: false
        displayName: per_page
        default: 100000
      page:
        description: The page to return (indexed from 1)
        type: integer
        required: false
        displayName: page
        default: 1
      order_by:
        description: Field by which to sort the nodes.
        type: string
        required: false
        displayName: order_by
        default: 'id'
      desc:
        description: Set the sort order to descending if 'true', '1', 'y' or 'yes' (case insensitive).
        type: string
        required: false
        displayName: desc
        default: 'false'
      searchparameters:
        description: One or more search fields
        type: string
        required: false
        displayName: 'search parameters*'
    responses:
      200:
        description: Returns a list of managed devices grouped by nodes
        body:
          application/json:
            example:
              {
                "nodes":[
                  {
                    "interfaces":[
                      {
                        "id":"nodes_interfaces-1",
                        "ipv4_addr":"192.168.1.11",
                        "name":"Network",
                      },
                      {
                        "id":"nodes_interfaces-2",
                        "name":"Management LAN",
                      },
                      {
                        "id":"nodes_interfaces-3",
                        "name":"Internal Cellular Modem",
                      }
                    ],
                    "rights":{
                      "delete":true,
                      "modify":true,
                      "view_cellhealth_runtime_details": true,
                    },
                    "lhvpn_address":"192.168.128.2",
                    "product": "opengear",
                    "id":"nodes-1",
                    "enrollment_bundle":"Global",
                    "mac_address":"00:13:c6:02:a3:07",
                    "common_name":"nodes-1",
                    "ports":[
                      {
                        "label":"Port 1",
                        "id":"nodes_ports-1",
                        "node_name":"acm7008-2",
                        "webshell_enabled":false,
                        "port_csid":"port1",
                        "mode":"localConsole",
                        "runtime_status":{
                          "change_delta":86921,
                          "change_time":1515973541,
                          "action_status":"finished",
                          "id":"nodes-1",
                          "action_error_message":"",
                          "action_type":"enrollment",
                          "connection_status":"connected",
                        },
                        "ssh_enabled":false,
                      },
                      {
                        "proxied_ssh_url":"ssh://root:nodes-1:port3@192.168.1.2",
                        "label":"Crossover 1",
                        "id":"nodes_ports-3",
                        "node_name":"acm7008-2",
                        "webshell_enabled":false,
                        "web_terminal_url":"manage/devices/ports/terminal/nodes-1/port3?name=Crossover 1",
                        "port_csid":"port3",
                        "mode":"consoleServer",
                        "runtime_status":{
                          "change_delta":86921,
                          "change_time":1515973541,
                          "action_status":"finished",
                          "id":"nodes-1",
                          "action_error_message":"",
                          "action_type":"enrollment",
                          "connection_status":"connected",
                        },
                        "cellhealth_runtime_status":{
                          "change_delta":86921,
                          "change_time":1515973541,
                          "status":"moderate",
                          "id":"nodes-1",
                        },
                        "ssh_enabled":true,
                      },
                      {
                        "label":"Rear USB 1",
                        "id":"nodes_ports-9",
                        "node_name":"acm7008-2",
                        "webshell_enabled":false,
                        "port_csid":"port9",
                        "mode":"disabled",
                        "runtime_status":{
                          "change_delta":86921,
                          "change_time":1515973541,
                          "action_status":"finished",
                          "id":"nodes-1",
                          "action_error_message":"",
                          "action_type":"enrollment",
                          "connection_status":"connected",
                        },
                        "ssh_enabled":false,
                      }
                    ],
                    "serial_number":"70081708004801",
                    "name":"acm7008-2",
                    "model":"ACM7008-2",
                    "status":"Enrolled",
                    "approved":1,
                    "runtime_status":{
                      "change_delta":86921,
                      "change_time":1515973541,
                      "action_status":"finished",
                      "id":"nodes-1",
                      "action_error_message":"",
                      "action_type":"enrollment",
                      "connection_status":"connected",
                    },
                    "firmware_version":"CI-1182",
                  },
                  {
                    "interfaces":[
                      {
                        "id":"nodes_interfaces-4",
                        "ipv4_addr":"192.168.1.12",
                        "name":"Network",
                      },
                      {
                        "id":"nodes_interfaces-5",
                        "name":"Management LAN",
                      },
                      {
                        "id":"nodes_interfaces-6",
                        "name":"Internal Cellular Modem",
                      }
                    ],
                    "rights":{
                      "delete":true,
                      "modify":true,
                    },
                    "lhvpn_address":"192.168.128.3",
                    "product": "opengear",
                    "id":"nodes-2",
                    "enrollment_bundle":"Global",
                    "mac_address":"00:13:c6:02:a3:08",
                    "common_name":"nodes-2",
                    "ports":[
                      {
                        "label":"Port 1",
                        "id":"nodes_ports-20",
                        "node_name":"acm7004-5",
                        "webshell_enabled":false,
                        "port_csid":"port1",
                        "mode":"localConsole",
                        "runtime_status":{
                          "change_delta":86921,
                          "change_time":1515973541,
                          "action_status":"finished",
                          "id":"nodes-1",
                          "action_error_message":"",
                          "action_type":"enrollment",
                          "connection_status":"connected",
                        },
                        "ssh_enabled":false,
                      },
                      {
                        "proxied_ssh_url":"ssh://root:nodes-2:port3@192.168.1.2",
                        "label":"Super 1",
                        "id":"nodes_ports-23",
                        "node_name":"acm7004-5",
                        "webshell_enabled":false,
                        "web_terminal_url":"manage/devices/ports/terminal/nodes-2/port3?name=Super 1",
                        "port_csid":"port3",
                        "mode":"consoleServer",
                        "runtime_status":{
                          "change_delta":86921,
                          "change_time":1515973541,
                          "action_status":"finished",
                          "id":"nodes-1",
                          "action_error_message":"",
                          "action_type":"enrollment",
                          "connection_status":"connected",
                        },
                        "ssh_enabled":true,
                      },
                    ],
                    "serial_number":"70081708004801",
                    "name":"acm7004-5",
                    "model":"ACM7004-5",
                    "status":"Enrolled",
                    "approved":1,
                    "runtime_status":{
                      "change_delta":86921,
                      "change_time":1515973541,
                      "action_status":"finished",
                      "id":"nodes-2",
                      "action_error_message":"",
                      "action_type":"enrollment",
                      "connection_status":"connected",
                    },

                    "firmware_version":"CI-1182",
                  },
                ],
                "meta":{
                  "searchId":"{85e937c-fa4f-11e7-9714-fbc312b6355}",
                  "total_pages":1,
                }
              }

/search:
  type: base-type
  description: >
    Used to perform searches on nodes and ports on the system.
  /nodes:
    type: base-type
    description: >
      Creating a search ID for nodes from the given query parameters.
    get:
      displayName: getSearchId
      description: >
        Gets a search ID for searching nodes attached to this lighthouse instance.

        Any number of search query parameters can be provided to perform an
        ANDed search on the nodes. The parameters possible should be retrieved
        with GET /nodes/fields. The list provided is dynamic.
      queryParameters:
        json:
          description: >
            One or more json URL encoded search parameters.

            Example
            %7B%22type%22%3A1%2C%22items%22%3A%5B%7B%22datatype%22%3A4
            %2C%22type%22%3A3%2C%22oper%22%3A1%2C%22fieldname%22%3A%22
            config%3Aname%22%2C%22value%22%3A%22test%22%7D%5D%7D

            which is the URL encoded json

            {type:1,items:[{"datatype":4,type:3,"oper":1,"fieldname":"config:name","value":"test"}]}
          type: string
          required: false
          displayName: 'json'
        jb64:
          description: >
            one or more base64 encoded json search parameters.

            Ensure that any trailing = padding is URL encoded to %3D
          type: string
          required: false
          displayName: 'jb64'
        searchparameters:
          description: >
            One or more search fields as provided by /nodes/fields.

            For example,

            config:name=\*test\*, will search for nodes with names containing
            test, or

            config:status=!Enrolled will search for
            nodes which are not enrolled.

            Allowed operators are: =value, >value, >=value, <value, <=value,
            !value (not), \*value (ends in), value\* (starts with), \*value\*
            (contains). Reserved characters to be URl encoded, e.g. = as %3D
          type: string
          required: false
          displayName: 'search parameters*'
        operator:
          description: >
            Operator applied between all searchparameters, json and jb64
            query parameters.

            AND or OR

          default: AND
          required: false
        order_by:
          description: Field by which to sort the nodes.
          type: string
          required: false
          displayName: order_by
          default: 'id'
        desc:
          description: Set the sort order to descending if 'true', '1', 'y' or 'yes' (case insensitive).
          type: string
          required: false
          displayName: desc
          default: 'false'
      responses:
        200:
          description: The search ID, as defined by given parameters
          body:
            application/json:
              type: getSearchResponse
              example:
                {
                  "search":
                    {
                      "id": "{268daae-5555-11e7-8af6-b7116753aa5}",
                    },
                }
        400:
          description: Invalid request, missing or incorrect search parameters.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        404:
          description: Invalid request, Incomplete data.
          body:
            application/json:
              type: error
        500:
          description: Failed to retrieve a search ID.
          body:
            application/json:
              type: error
  /ports:
    type: base-type
    description: >
      Creating a search ID for ports from the given query parameters.
    get:
      displayName: getSearchId
      description: >
        Gets a search ID for searching ports attached to this lighthouse instance.

        Any number of search query parameters can be provided to perform an
        ANDed search on the ports. The list provided is dynamic.
      queryParameters:
        json:
          description: >
            One or more json URL encoded search parameters.

            Example
            %7B%22type%22%3A1%2C%22items%22%3A%5B%7B%22datatype%22%3A4
            %2C%22type%22%3A3%2C%22oper%22%3A1%2C%22fieldname%22%3A%22
            config%3Aname%22%2C%22value%22%3A%22test%22%7D%5D%7D

            which is the URL encoded json

            {type:1,items:[{"datatype":4,type:3,"oper":1,"fieldname":"config:label","value":"test"}]}
          type: string
          required: false
          displayName: 'json'
        jb64:
          description: >
            one or more base64 encoded json search parameters.

            Ensure that any trailing = padding is URL encoded to %3D
          type: string
          required: false
          displayName: 'jb64'
        searchparameters:
          description: >
            One or more search fields.

            For example,

            config:label=\*test\*, will search for ports with labels containing test.

            Allowed operators are: =value, >value, >=value, <value, <=value,
            !value (not), \*value (ends in), value\* (starts with), \*value\*
            (contains). Reserved characters to be URl encoded, e.g. = as %3D
          type: string
          required: false
          displayName: 'search parameters*'
        operator:
          description: >
            Operator applied between all searchparameters, json and jb64
            query parameters.

            AND or OR

          default: AND
          required: false
      responses:
        200:
          description: The search ID, as defined by given parameters
          body:
            application/json:
              type: getSearchResponse
              example:
                {
                  "search":
                    {
                      "id": "{268daae-5555-11e7-8af6-b7116753aa5}",
                    },
                }
        400:
          description: Invalid request, missing or incorrect search parameters.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        404:
          description: Invalid request, Incomplete data.
          body:
            application/json:
              type: error
        500:
          description: Failed to retrieve a search ID.
          body:
            application/json:
              type: error
  /managed:
    type: base-type
    description: >
      Creating a search ID for managed devices from the given query parameters.
    get:
      displayName: getSearchId
      description: >
        Gets a search ID for searching managed devices attached to this lighthouse instance.

        Any number of search query parameters can be provided to perform an
        ANDed search on the managed devices. The list provided is dynamic.

        This search must be performed with field names in the context of a port search.

      queryParameters:
        json:
          description: >
            One or more json URL encoded search parameters.

            Example
            %7B%22type%22%3A1%2C%22items%22%3A%5B%7B%22datatype%22%3A4
            %2C%22type%22%3A3%2C%22oper%22%3A1%2C%22fieldname%22%3A%22
            config%3Aname%22%2C%22value%22%3A%22test%22%7D%5D%7D

            which is the URL encoded json

            {type:1,items:[{"datatype":4,type:3,"oper":1,"fieldname":"config:label","value":"test"}]}
          type: string
          required: false
          displayName: 'json'
        jb64:
          description: >
            one or more base64 encoded json search parameters.

            Ensure that any trailing = padding is URL encoded to %3D
          type: string
          required: false
          displayName: 'jb64'
        searchparameters:
          description: >
            One or more search fields.

            For example,

            config:label=\*test\*, will search for ports with labels containing test.

            Allowed operators are: =value, >value, >=value, <value, <=value,
            !value (not), \*value (ends in), value\* (starts with), \*value\*
            (contains). Reserved characters to be URl encoded, e.g. = as %3D
          type: string
          required: false
          displayName: 'search parameters*'
        operator:
          description: >
            Operator applied between all searchparameters, json and jb64
            query parameters.

            AND or OR

          default: AND
          required: false
      responses:
        200:
          description: The search ID, as defined by given parameters
          body:
            application/json:
              type: getSearchResponse
              example:
                {
                  "search":
                    {
                      "id": "{268daae-5555-11e7-8af6-b7116753aa5}",
                    },
                }
        400:
          description: Invalid request, missing or incorrect search parameters.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        404:
          description: Invalid request, Incomplete data.
          body:
            application/json:
              type: error
        500:
          description: Failed to retrieve a search ID.
          body:
            application/json:
              type: error

/services:
  description: >
    Used for working with the properties of the various services running on the system.
  /https:
    type: base-type
    description: >
      Provides access to the SSL certificate used by web services on the device.
    get:
      description: Fetch HTTPS certificate details, or a CSR file if the zip flag is set.
      queryParameters:
        zip:
          description: A flag to download the CSR instead of view the details
          type: boolean
          required: false
          default: false
      responses:
        200:
          description: Returns the certificate currently in use by the server, as well as details about any current CSR.
          body:
            application/json:
              example:
                {
                  "https": {
                    "valid_from": "Sep 21 00:39:03 2016 GMT",
                    "valid_to": "Sep 21 00:39:03 2016 GMT",
                    "common_name": "CName",
                    "country": "AU",
                    "locality": "Toowong",
                    "org_unit": "OU",
                    "email": "bob@bob.com",
                    "organization":"Internet Widgits Pty Ltd",
                    "key_length":2048,
                    "cert" : "-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
                    "csr" : {
                      "country": "AU",
                      "common_name": "aa",
                      "state": "ee",
                      "locality": "dd",
                      "email": "bob@bob.com",
                      "key_length": 512,
                    },
                    "key": "-----BEGIN PRIVATE KEY-----...",
                  }
                }
    put:
      description: Update HTTPS details. A certificate matching the CSR can be uploaded by setting the https.cert field, a CSR can be cancelled by sending through no https.csr body, and a new csr can be created by sending through a https.csr body with a csr value of "new".
      body:
        application/json:
          example:
            {
              "https": {
                "key_length":2048,
                "cert" : "-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
                "csr" : {
                  "country": "AU",
                  "challenge_password": "aaa",
                  "common_name": "aa",
                  "state": "ee",
                  "locality": "dd",
                  "key_length": 2048,
                  "email": "bob@bob.com",
                },
                key: "-----BEGIN PRIVATE KEY-----...",
              }
            }
      responses:
        200:
          description: >
            Returns the updated HTTPS server details
          body:
            application/json:
              example:
                {
                  "https": {
                    "valid_from": "Sep 21 00:39:03 2016 GMT",
                    "valid_to": "Sep 21 00:39:03 2016 GMT",
                    "common_name": "CName",
                    "country": "AU",
                    "locality": "Toowong",
                    "org_unit": "OU",
                    "email": "bob@bob.com",
                    "organization":"Internet Widgits Pty Ltd",
                    "key_length":2048,
                    "cert" : "-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
                    "csr" : {
                      "country": "AU",
                      "common_name": "aa",
                      "state": "ee",
                      "locality": "dd",
                      "email": "bob@bob.com",
                      "key_length": 512,
                    },
                    "key": "-----BEGIN PRIVATE KEY-----...",
                  }
                }
        500:
          description: Returns an error after the operation failed.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 2,
                      "code": 14,
                      "text": "String did not conform to the expected format.",
                      "args": {
                        "uuid": "root-1-services_https_csr_email",
                      },
                      "level": 1,
                    },
                    {
                      type: 1,
                      "code": 33,
                      "text": "Push command failed",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        400:
          description: Returns an error after the operation failed due to invalid user input.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 2,
                      "code": 14,
                      "text": "String did not conform to the expected format.",
                      "args": {
                        "uuid": "root-1-services_https_csr_email",
                      },
                      "level": 1,
                    },
                    {
                      type: 1,
                      "code": 33,
                      "text": "Push command failed",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
  /cellhealth:
    type: base-type
    description: >
      Used for Configuring Cellular Health Report.
    get:
      description: Fetch Cellular Health Report configuration.
      responses:
        200:
          description: Returns the configuration currently in use for cellular health report.
          body:
            application/json:
              example:
                {
                  "cellhealth": {
                    "cell_health_enabled":true,
                    "connectivity_test_enabled":true,
                    "interval_unit":"day(s)",
                    "quality_range_quarter1":0,
                    "quality_range_quarter2":33,
                    "quality_range_quarter3":66,
                    "quality_range_quarter4":100,
                    "interval_frequency":1,
                  }
                }
    put:
      description: Updates the cellular health report
      body:
        application/json:
          example:
            {
              "cellhealth": {
                "cell_health_enabled":true,
                "connectivity_test_enabled":true,
                "interval_unit":"day(s)",
                "quality_range_quarter1":0,
                "quality_range_quarter2":33,
                "quality_range_quarter3":66,
                "quality_range_quarter4":100,
                "interval_frequency":1,
              }
            }
      responses:
        200:
          description: Returns the updated Cellular Health Report configuration
          body:
            application/json:
              example:
                {
                  "cellhealth": {
                    "cell_health_enabled":true,
                    "connectivity_test_enabled":true,
                    "interval_unit":"day(s)",
                    "quality_range_quarter1":0,
                    "quality_range_quarter2":33,
                    "quality_range_quarter3":66,
                    "quality_range_quarter4":100,
                    "interval_frequency":1,
                  }
                }
        400:
          description: >
            Invalid request: body is not json or does not conform to required json schema.
            Incomplete data: cell_health_enabled, or "connectivity_test_enabled" parameter missing.
        500:
          description: Failed to save cellular health report configuration.
          body:
            application/json:
              type: error

  /ntp:
    type: base-type
    description: >
      Provides access to the NTP client configuration on the system.
    get:
      description: Fetch NTP client configuration.
      responses:
        200:
          description: Returns the current NTP configuration.
          body:
            application/json:
              example:
                {
                  "ntp": {
                    "enabled": true,
                    "servers": [
                      {
                        "id": "services_ntp_servers-0",
                        "value": "ntp1.example.com",
                      },
                      {
                        "id": "services_ntp_servers-1",
                        "value": "ntp2.example.com",
                      }
                    ],
                    "id": "services_ntp",
                  }
                }
    put:
      description: Update NTP client configuration, including enabling/disabling the NTP service.
      body:
        application/json:
          example:
            {
              "ntp": {
                "enabled": true,
                "servers": [
                  {
                    "id": "services_ntp_servers-0",
                    "value": "ntp1.example.com",
                  },
                  {
                    "id": "services_ntp_servers-1",
                    "value": "ntp2.example.com",
                  },
                  {
                    "id": null,
                    "value": "ntp3.example.com",
                  }
                ],
                "id": "services_ntp",
              }
            }
      responses:
        200:
          description: >
            Returns the updated NTP configuration.
          body:
            application/json:
              example:
                {
                  "ntp": {
                    "enabled": true,
                    "servers": [
                      {
                        "id": "services_ntp_servers-0",
                        "value": "ntp1.example.com",
                      },
                      {
                        "id": "services_ntp_servers-1",
                        "value": "ntp2.example.com",
                      },
                      {
                        "id": null,
                        "value": "ntp3.example.com",
                      }
                    ],
                    "id": "services_ntp",
                  }
                }
        500:
          description: >
            Error saving NTP configuration.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 2,
                      "code": 25,
                      "text": "'' is not a valid hostname",
                      "args": {
                        "address": "",
                        "uuid": "services_ntp_servers-0",
                      },
                      "level": 1,
                    },
                    {
                      type: 1,
                      "code": 33,
                      "text": "Push command failed",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        400:
          description: >
            Returns an error after the operation failed due to invalid request.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 40,
                      "text": "Required field 'server-1' was not provided in the request.",
                      "args": {
                        "param": "server-1",
                      },
                      "level": 1,
                    }
                  ]
                }

  /console_gateway:
    type: base-type
    get:
      description: Requests config parameters related to the Console Gateway service.
      responses:
        200:
          body:
            application/json:
              type: consoleGatewayResponse
              example:
                {
                  "console_gateway": {
                      "ssh_url_delimiter": ":",
                      "ssh_url_address": "address.com",
                  }
                }
    put:
      description: Update config parameters related to the Console Gateway service.
      body:
        application/json:
          example:
                {
                  "console_gateway": {
                      "ssh_url_delimiter": ":",
                      "ssh_url_address": "address.com",
                  }
                }
      responses:
        200:
          body:
            application/json:
              type: consoleGatewayResponse
              example:
                {
                  "console_gateway": {
                      "ssh_url_delimiter": ":",
                      "ssh_url_address": "address.com",
                  }
                }
        400:
          description: >
            Returns an error after the operation failed due to invalid request.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      "type": 2,
                      "code": 25,
                      "text": "'' is not a valid network address",
                      "args": {
                        "uuid": "root-1-services_consoleGateway_ssh_address",
                        "address": "",
                      },
                      "level": 1,
                    },
                    {
                      "type": 1,
                      "code": 33,
                      "text": "Push command failed",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }

  /lhvpn:
    type: base-type
    description: >
      Retrieve and configure the lhvpn settings.
    get:
      description: Get the LHVPN configuration.
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                lhvpn:
                  type: lhvpn
              example:
                {
                    "lhvpn": {
                        "mtu": 1400,
                        "address": "10.16.0.0",
                        "mask": "255.255.0.0",
                    }
                }
    put:
      description: Update the LHVPN configuration.
      body:
        application/json:
          type: object
          properties:
            lhvpn:
              type: lhvpn
          example:
            {
                "lhvpn": {
                  "mtu": 1400,
                  "address": "192.168.128.0",
                  "mask": "255.255.224.0",
                  "cidr": 19,
                }
            }
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                lhvpn:
                  type: lhvpn
              example:
                {
                  "lhvpn": {
                    "mtu": 1400,
                    "address": "192.168.128.0",
                    "mask": "255.255.224.0",
                    }
                }
  /snmp:
    type: base-type
    description: >
      Retrieve and configure the SNMP daemon settings.
    get:
      description: Get the snmp configuration.
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                snmp:
                  type: snmp
              example:
                {
                  "snmp": {
                    "enabled": true,
                    "protocol": "UDP",
                    "read_write_community": "secret",
                    "read_only_community": "secret",
                    "auth_protocol": "SHA",
                    "username": "michaelf",
                    "engine_id": "0x80001f8803555000000000",
                    "v3_enabled": true,
                    "v1_enabled": false,
                    "privacy_protocol": "DES",
                    "security_level": "noAuthNoPriv",
                    "location": "BNE",
                    "contact": "mail@example.com",
                  }
                }
    put:
      description: Update the snmp configuration.
      body:
        application/json:
          type: object
          properties:
            snmp:
              type: snmp
          example:
            {
              "snmp": {
                "enabled": true,
                "protocol": "UDP",
                "read_write_community": "secret",
                "read_only_community": "secret",
                "auth_protocol": "SHA",
                "auth_password": "secret123",
                "username": "michaelf",
                "engine_id": "0x80001f8803555000000000",
                "v3_enabled": true,
                "v1_enabled": false,
                "privacy_protocol": "DES",
                "privacy_password": "secret123",
                "security_level": "noAuthNoPriv",
                "location": "BNE",
                "contact": "mail@example.com",
              }
            }
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                snmp:
                  type: snmp
              example:
                {
                  "snmp": {
                    "enabled": true,
                    "protocol": "UDP",
                    "read_write_community": "secret",
                    "read_only_community": "secret",
                    "auth_protocol": "SHA",
                    "username": "michaelf",
                    "engine_id": "0x80001f8803555000000000",
                    "v3_enabled": true,
                    "v1_enabled": false,
                    "privacy_protocol": "DES",
                    "security_level": "noAuthNoPriv",
                    "location": "BNE",
                    "contact": "mail@example.com",
                  }
                }
  /syslog:
    type: base-type
    description: >
      Provides access to the remote syslog server configuration.
    get:
      description: Fetch remote syslog server configuration list.
      responses:
        200:
          description: Returns the current syslog server configuration.
          body:
            application/json:
              example:
                {
                    "syslogServers": [
                        {
                            "id": "services_syslog_servers-31",
                            "value": "0.au.pool.rsyslog.org",
                            "port": "601",
                            "protocol": "UDP",
                        },
                        {
                            "id": "services_syslog_servers-32",
                            "value": "2.au.pool.rsyslog.org",
                            "port": "602",
                            "protocol": "UDP",
                        }
                    ],
                }
    post:
      description: Create a new syslog server data in the configuration.
      body:
        application/json:
          example:
            {
              "syslogServer" :
                {
                  "address": "192.168.1.1",
                  "port": 1000,
                  "protocol": "UDP",
                }
            }
      responses:
        201:
          body:
            application/json:
              example:
                {
                  "syslogServer" :
                    {
                      "id": "{services_syslog_servers-2}",
                      "port": 1000,
                      "protocol": "UDP",
                      "address": "192.168.1.1",
                  }
                }
        400:
          description: Failed to initiate syslog server creation due to error in post body.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      "type": 2,
                      "code": 22,
                      "text": "Element [protocol] is of the wrong type",
                      "args": {
                        "uuid": "protocol",
                      },
                      "level": 1,
                    }
                  ]
                }
        401:
          description: Authentication failed due to invalid session.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 43,
                      "text": "Invalid session ID.",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
    /{syslog_server_id}:
      type: base-type
      uriParameters:
        syslog_server_id:
          description: unique identifier for syslog servers
          required: true
          displayName: syslog_server_id
          example: services_syslog_servers-1
      get:
        description: Returns the syslog server configuration for given id
        responses:
          200:
            description: >
              Returns the updated syslog server configuration.
            body:
              application/json:
                example:
                  {
                    "syslogServer": {
                      "id": "services_syslog_servers-1",
                      "port": 705,
                      "protocol": "UDP",
                      "address": "192.168.1.1",
                    }
                  }
      put:
        description: Update syslog server configuration
        body:
          application/json:
            example:
              {
                "syslogServer" :
                  {
                      "address": "192.168.1.1",
                      "port": 1000,
                      "protocol": "UDP",
                  }
              }
        responses:
          200:
            description: >
              Returns the updated syslog server configuration.
            body:
              application/json:
                example:
                  {
                    "syslogServer": {
                      "id": "services_syslog_servers-1",
                      "port": 1000,
                      "protocol": "UDP",
                      "address": "192.168.1.1",
                    }
                  }
          500:
            description: >
              Error saving syslog configuration.
            body:
              application/json:
                example:
                  {
                    "error": [
                      {
                        type: 2,
                        "code": 25,
                        "text": "'' is not a valid hostname",
                        "args": {
                          "address": "",
                          "uuid": "services_syslog_servers-1",
                        },
                        "level": 1,
                      },
                      {
                        type: 1,
                        "code": 33,
                        "text": "Push command failed",
                        "args": {},
                        "level": 1,
                      }
                    ]
                  }
          400:
            description: >
              Returns an error after the operation failed due to invalid request.
            body:
              application/json:
                example:
                  {
                    "error": [
                      {
                        type: 4,
                        "code": 40,
                        "text": "Required field 'services_syslog-1' was not provided in the request.",
                        "args": {
                          "param": "server-1",
                        },
                        "level": 1,
                      }
                    ]
                  }
      delete:
        description: Delete a syslog server
        responses:
          204:
            description: syslog server deleted
          404:
            description: syslog server does not exist
            body:
              application/json:
                example:
                  {
                    "error": [
                      {
                        "type": 5,
                        "code": 29,
                        "text": "Could not find element with UUID 'services_syslog_servers-2'.",
                        "args": {
                          "uuid": "services_syslog_servers-2",
                        },
                        "level": 1,
                      }
                    ]
                  }


  /snmp_manager:
    type: base-type
    description: >
      Retrieve and configure the SNMP TRAP/INFORM settings.
    get:
      description: Get the snmp manager configuration.
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                snmp_manager:
                  type: snmp_manager
              example:
                {
                  "snmp_manager": {
                    "enabled": true,
                    "protocol": "UDP",
                    "community": "secret",
                    "auth_protocol": "SHA",
                    "username": "michaelf",
                    "engine_id": "0x80001f8803555000000000",
                    "version": v3,
                    "privacy_protocol": "DES",
                    "security_level": "noAuthNoPriv",
                    "msg_type": "TRAP",
                    "address": "snmp.example.com",
                    "port": 167,
                    "traps": [
                      "nodes_conn_status",
                      "nodes_cellular_health_status",
                    ],
                  }
                }
    put:
      description: Update the snmp manager configuration.
      body:
        application/json:
          type: object
          properties:
            snmp_manager:
              type: snmp_manager
          example:
            {
              "snmp_manager": {
                "enabled": true,
                "protocol": "UDP",
                "community": "secret",
                "auth_protocol": "SHA",
                "auth_password": "secret123",
                "username": "michaelf",
                "engine_id": "0x80001f8803555000000000",
                "version" : "v3",
                "privacy_protocol": "DES",
                "privacy_password": "secret123",
                "security_level": "noAuthNoPriv",
                "msg_type": "TRAP",
                "address": "snmp.example.com",
                "port": 167,
                "traps": [
                  "nodes_conn_status",
                  "nodes_cellular_health_status",
                ],
              }
            }
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                snmp_manager:
                  type: snmp_manager
              example:
                {
                  "snmp_manager": {
                    "enabled": true,
                    "protocol": "UDP",
                    "community": "secret",
                    "auth_protocol": "SHA",
                    "username": "michaelf",
                    "engine_id": "0x80001f8803555000000000",
                    "version" : "v3",
                    "privacy_protocol": "DES",
                    "security_level": "noAuthNoPriv",
                    "msg_type": "TRAP",
                    "address": "snmp.example.com",
                    "port": 167,
                    "traps": [
                      "nodes_conn_status",
                      "nodes_cellular_health_status",
                    ],
                  }
                }


  /netops:
    type: base-type
    get:
      description: Get Netops service status.
      responses:
        200:
          body:
            application/json:
              type: getNetopsServiceResponse
              example:
                {
                  "netops": {
                    "repository": "public.ecr.aws/opengear/netops",
                    "enabled": true,
                  }
                }

    /installer:
      type: base-type
      post:
        description: Installs Netops Modules
        responses:
          200:
            body:
              application/json:
                type: object
                properties:
                  size:
                    type: integer
                    description: The decompressed size of the image archive.
                example:
                  {
                    "size": 3443810816,
                  }
      /status:
        type: base-type
        get:
          description: Shows the status of a current deployment process
          responses:
            200:
              body:
                application/json:
                  type: object
                  properties:
                    status:
                      type: string
                    error_message:
                      type: string
                  example:
                    {
                      "status": "running",
                      "error_message": null,
                    }

    /sync:
      type: base-type
      post:
        description: Synchronizes images with the upstream repository
        responses:
          200:
            body:
              application/json:
                type: object
                properties:
                  status:
                    type: string
                example:
                  {
                    "status": "pending",
                  }
      /status:
        type: base-type
        get:
          description: Shows the status of a current sync process
          responses:
            200:
              body:
                application/json:
                  type: object
                  properties:
                    status:
                      type: string
                    error_message:
                      type: string
                  example:
                    {
                      "status": "running",
                      "error_message": null,
                    }

/tags:
  description: >
    Tags are a user definable set of name/value pairs which can be assigned to
    Lighthouse system objects like nodes.
  /node_tags:
    type: base-type
    description: >
      Provides the ability to retrieve and manipulate all
      tags associated with Lighthouse nodes.
    # Tags.getNodeTags
    get:
      queryParameters:
        per_page:
          description: Maximum number of tags per page
          type: integer
          required: false
          displayName: per_page
          default: 100000
        page:
          description: The page to return (indexed from 1)
          type: integer
          required: false
          displayName: page
          default: 1
      description: >
        Returns the global tag list and associated values. Each associated
        name/value pair can be referenced from any node by using
        nodes/:id/tags/:tag_value_id.
      responses:
        200:
          body:
            application/json:
              type: getTagsListResponse
              example:
                {
                  "nodeTags": [
                    {
                      "id": "tags_node_tags-1",
                      name: "myTag",
                      values: [
                        {
                          "id": "tags_node_tags_values-1",
                          "value": "my tag value",
                        },
                        {
                          "id": "tags_node_tags_values-2",
                          "value": "new value",
                        }
                      ],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      }
                    },
                    {
                      "id": "tags_node_tags-2",
                      name: "myTag2",
                      values: [
                        {
                          "id": "tags_node_tags_values-3",
                          "value": "something else",
                        }
                      ],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      }
                    },
                    {
                      "id": "tags_node_tags-3",
                      name: "myTag3",
                      values: [
                        {
                          "id": "tags_node_tags_values-4",
                          "value": "one item",
                        }
                      ],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      }
                    }
                  ],
                  "meta": {
                    "total_pages": 1,
                  }
                }
        400:
          description: >
            Invalid request: body is not json or does not conform to required json schema.

            Incomplete data: ??.
        404:
          body:
            application/json:
              type: error
              description: >
                No tag list found.

                Error retrieving tag list.
    post:
      description: Create a global node tag
      body:
        application/json:
          type: create_tag
          example:
            {
              "nodeTag": {
                name: "Location",
                values: [
                  {
                    "value": "USA.NewYork",
                  },
                  {
                    "value": "UK.London",
                  }
                ]
              }
            }
      responses:
        200:
          description: The newly created global tag.
          body:
            application/json:
              example:
                {
                  "nodeTag": {
                    "id": "tags_node_tags-50",
                    name: "Location",
                    values: [
                      {
                        "id": "tags_node_tags_values_90",
                        "value": "USA.NewYork",
                      },
                      {
                        "id": "tags_node_tags_values_91",
                        "value": "UK.London",
                      }
                    ]
                  }
                }
    /{tag_value_id}:
      type: base-type
      uriParameters:
        tag_value_id:
          description: Identifier for unique tag
          required: true
          displayName: tag_value_id
          example: nodes_tags-1
      put:
        description: Update tag values for the given id.
        body:
          application/json:
            type: put_tag
            example:
              {
                "nodeTag": {
                  name: "Location",
                  values: [
                    {
                      "id": "tags_node_tags_values_90",
                      "value": "USA.NewYork",
                    },
                    {
                      "id": "tags_node_tags_values_91",
                      "value": "UK.London",
                    },
                    {
                      "value": "France.Paris",
                    }
                  ]
                }
              }
        responses:
          200:
            description: The tag information was updated.
          400:
            description: >
              Invalid request: body is not json or does not conform to required json schema.

              Incomplete data: node id, or tag_value_id parameter missing.
          404:
            body:
              application/json:
                type: error
                description: >
                  Tag information with given {tag_value_id} not found.
                    example:{
                      "error": [
                        {
                          type: 5,
                          "code": 29,
                          "text": "Could not find element with UUID 'tags_node_tags-0'.",
                          "args": {
                            "uuid": "tags_node_tags-0",
                          },
                          "level": 1,
                        }
                      ]
                    }
      # Node.deleteNodeTag
      delete:
        description: Delete a tag by id.
        responses:
          200:
            description: The {tag_value_id} tag information was deleted.
          400:
            description: >
              Invalid request: body is not json or does not conform to required json schema.

              Incomplete data: tag_value_id parameter missing.
          404:
            body:
              application/json:
                type: error
                description: >
                  Tag information with given {tag_value_id} not found.
                example:
                  {
                    "error": [
                      {
                        type: 5,
                        "code": 29,
                        "text": "Could not find element with UUID 'nodes_tags-0'.",
                        "args": {
                          "uuid": "nodes_tags-0",
                        },
                        "level": 1,
                      }
                    ]
                  }

/interfaces:
  description: >
    Read and manipulate the network interfaces on the Lighthouse server.
  type: base-type
  get:
    description: >
      Get a list of the network interfaces on the Lighthouse server.
    displayName: getInterfaces
    queryParameters:
      per_page:
        description: Maximum number of interfaces per page
        type: integer
        required: false
        displayName: per_page
        default: 100000
      page:
        description: The page to return (indexed from 1)
        type: integer
        required: false
        displayName: page
        default: 1
    responses:
      200:
        body:
          application/json:
            type: getInterfaceList
            example:
              {
                "interfaces": [
                  {
                    "enabled": true,
                    description: "Default IPv4 Static Address",
                    name: "default-conn-1",
                    "media": "auto",
                    "physif": "net1",
                    "role": "lan",
                    "mode": "static",
                    "ipv4_static_settings": {
                      "id": "system_net_conns-1",
                      "address": "192.168.1.100",
                      "netmask": "255.255.255.0",
                      "gateway": "192.168.1.1",
                      "dns1": "192.168.1.2",
                      "dns2": "192.168.1.3",
                    },
                    "runtime_status": {
                      "status": "running",
                      "address":"192.168.1.100",
                      "addresses": [
                        {
                          "id": "system_net_conns-1-address-1",
                        }
                      ],
                      "last_status_change": 1471506633,
                      "id": "system_net_conns-1",
                    },
                    "id": "system_net_conns-1",
                  },
                  {
                    "enabled": true,
                    description: "IPv4 DHCP network connection",
                    "media": "auto",
                    "id": "system_net_conns-2",
                    "role": "lan",
                    name: "default-conn-2",
                    "mode": "dhcp",
                    "runtime_status": {
                      "id": "system_net_conns-2",
                      "status": "running",
                      "addresses": [
                        {
                          "id": "system_net_conns-2-address-1",
                          "address": "192.168.1.1",
                          "netmask": "255.255.255.0",
                        }
                      ],
                      "gateway": "192.168.1.1",
                      "dns1": "192.168.1.1",
                      "dns2": "192.168.1.2",
                      "last_status_change": 1471506160,
                    },
                    "physif": "net1",
                  },
                  {
                    "enabled": true,
                    description: "IPv6 Auto-configured connection (RA/DHCPv6)",
                    "media": "auto",
                    "id": "system_net_conns-3",
                    "role": "lan",
                    name: "default-conn-3",
                    "mode": "ipv6_automatic",
                    "runtime_status": {
                      "id": "system_net_conns-3",
                      "status": "running",
                      "addresses": [
                        {
                          "id": "system_net_conns-3-address-1",
                          "address": "fd07:2218:1350:48:5054:ff:fe24:907a",
                          "prefix_length": 64,
                        },
                        {
                          "id": "system_net_conns-3-address-2",
                          "address": "fd07:2218:1350:48::5",
                          "prefix_length": 64,
                        }
                      ],
                      "address": "fd07:2218:1350:48:5054:ff:fe24:907a",
                      "gateway": "fd07:2218:1350:48::1",
                      "dns1": "fd07:2218:1350:48::1",
                      "dns2": "fd07:2218:1350:48::2",
                      "last_status_change": 1471506160,
                    },
                    "physif": "net1",
                  },
                  {
                    "enabled": true,
                    description: "IPv6 Static Address",
                    name: "default-conn-4",
                    "media": "auto",
                    "physif": "net1",
                    "role": "lan",
                    "mode": "ipv6_static",
                    "ipv6_static_settings": {
                      "id": "system_net_conns-4",
                      "address": "fd07:2218:1350:48:5054:ff:fe24:beef",
                      "prefix_length": 64,
                      "gateway": "fd07:2218:1350:48::1",
                      "dns1": "fd07:2218:1350:48::1",
                      "dns2": "fd07:2218:1350:48::2",
                    },
                    "runtime_status": {
                      "status": "running",
                      "address":"fd07:2218:1350:48:5054:ff:fe24:beef",
                      "addresses": [
                        {
                          "id": "system_net_conns-4-address-1",
                        }
                      ],
                      "last_status_change": 1471506633,
                      "id": "system_net_conns-4",
                    },
                    "id": "system_net_conns-4",
                  },
                ],
                "meta": {
                  "total_pages": 1,
                }
              }
  /{id}:
    type: base-type
    uriParameters:
      id:
        description: ID of the interface to fetch
        required: true
        displayName: id
        example: system_net_conns-2
    # Interface.get
    get:
      description: Get interface information by id.
      responses:
        200:
          body:
            application/json:
              type: interfaceItem
              example:
                {
                  "interface": {
                    "enabled": true,
                    "description": "Default IPv4 Static Address",
                    "ipv4_static_settings": {
                      "id": "lighthouse_configurations_system_net_conns-1",
                      "netmask": "255.255.255.0",
                      "address": "192.168.0.8",
                    },
                    "id": "lighthouse_configurations_system_net_conns-1",
                    "physif": "net1",
                    "role": "lan",
                    "name": "default-conn-1",
                    "mode": "static",
                    "runtime_status": {
                      "status": "running",
                      "addresses": [
                        {
                          "id": "lighthouse_configurations_system_net_conns-1-address-1",
                        }
                      ],
                      "last_status_change": 1576545494,
                      "id": "lighthouse_configurations_system_net_conns-1",
                    },
                    "media": "auto",
                  }
                }
    # Interface.put
    put:
      description: Update settings for interface {id}
      body:
        application/json:
          type: interfaceItem
          example:
            {
              "interface": {
                "enabled": true,
                "description": "Default IPv4 Static Address",
                "ipv4_static_settings": {
                  "netmask": "255.255.255.0",
                  "address": "192.168.0.8",
                },
                "physif": "net1",
                "role": "lan",
                "name": "default-conn-1",
                "mode": "static",
                "media": "auto",
              }
            }
      responses:
        200:
          description: The interface {id} settings was updated.
        400:
          description: >
            Invalid request: body is not json or does not conform to required json schema.

            Incomplete data: interface id parameter missing.
        404:
          description: >
            Interface {id} does not exist.

            Attempted to change read only fields.

            Attempted to change unknown fields.

/system:
  description: >
    System endpoints are related to configuring and accessing information about
    the Lighthouse system itself.
  /hostname:
    type: base-type
    description:
      Retrieve or change the Lighthouse system's hostname.
    get:
      description: Get the Lighthouse hostname.
      responses:
        200:
          body:
            application/json:
              type: systemHostname
              example:
                {
                  system_hostname: {
                    hostname: "Lighthouse",
                    }
                }
    put:
      description: Update the Lighthouse hostname.
      body:
        application/json:
          type: systemHostname
          example:
            {
              system_hostname: {
                hostname: "Lighthouse",
                }
            }
      responses:
        200:
          body:
            application/json:
              type: systemHostname
              example:
                { system_hostname: { hostname: "Lighthouse" } }

  /lighthouse_name:
    type: base-type
    description:
      Retrieve the unique Lighthouse system name.
    get:
      description: Get the Lighthouse system name.
      responses:
        200:
          body:
            application/json:
              type: systemLighthouseName
              example:
                {
                  system: {
                    lighthouse_name: "lighthouse-9562-8965",
                  }
                }
  /logging:
    type: base-type
    description:
      Retrieve or change the Lighthouse system's logging setup.
    get:
      description: Get the Lighthouse logging setup.
      responses:
        200:
          body:
            application/json:
              type: systemLogging
              example:
                {
                  system_logging: {
                    cli_enabled: true,
                    rest_enabled: false,
                    rest_request_enabled: false,
                    rest_response_enabled: true,
                    }
                }
    put:
      description: Update the Lighthouse logging setup.
      responses:
        200:
          body:
            application/json:
              type: systemLogging
              example:
                {
                  system_logging: {
                    cli_enabled: true,
                    rest_enabled: false,
                    rest_request_enabled: false,
                    rest_response_enabled: true,
                    }
                }

  /webui_session_timeout:
    type: base-type
    description: Retrieve or change the Lighthouse web session timeout.
    get:
      description: Retrieve the web session timeout (in minutes).
      responses:
        200:
          body:
            application/json:
              type: webSessionTimeout
              example:
                { system_webui_session_timeout: { timeout: 20 } }
    put:
      description: Update the web session timeout (in minutes).
      body:
        application/json:
          type: webSessionTimeout
          example:
            { system_webui_session_timeout: { timeout: 20 } }

      responses:
        200:
          body:
            application/json:
              type: webSessionTimeout
              example:
                { system_webui_session_timeout: { timeout: 20 } }

  /cli_session_timeout:
    type: base-type
    description: Retrieve or change the Lighthouse CLI session timeout.
    get:
      description: Retrieve the CLI session timeout (in minutes).
      responses:
        200:
          body:
            application/json:
              type: cliSessionTimeout
              example:
                { system_cli_session_timeout: { timeout: 10 } }
    put:
      description: Update the CLI session timeout (in minutes).
      body:
        application/json:
          type: cliSessionTimeout
          example:
            { system_cli_session_timeout: { timeout: 10 } }

      responses:
        200:
          body:
            application/json:
              type: cliSessionTimeout
              example:
                { system_cli_session_timeout: { timeout: 10 } }

  /global_enrollment_token:
    type: base-type
    description:
      Retrieve or update the Lighthouse server's global enrollment token.
    get:
      description: Retrieve the Lighthouse's global enrollment token.
      responses:
        200:
          body:
            application/json:
              type: systemGlobalEnrollmentToken
              example:
                { system_global_enrollment_token: { token: "mySomewhatSecret" } }
    put:
      description: Update the Lighthouse's global enrollment token.
      body:
        application/json:
          type: systemGlobalEnrollmentToken
          example:
            { system_global_enrollment_token: { token: "mySomewhatSecret" } }
      responses:
        200:
          body:
            application/json:
              type: systemGlobalEnrollmentToken
              example:
                { system_global_enrollment_token: { token: "mySomewhatSecret" } }

  /manifest_link:
    type: base-type
    description: Retrieve a link to the global enrollment manifest file.
    get:
      description:
        Returns the url for downloading the manifest file in plaintext.
      responses:
        200:
          body:
            application/json:
              type: manifestLink
              example:
                {
                  system_global_manifest_link: {
                    url: "http://192.168.1.1/manifest.txt",
                  }
                }

  /os_default_address:
    type: base-type
    description:
      The primary network address to reach the Lighthouse (taken from the current network interface configuration).
    get:
      description: Retrieve the default network address;
      responses:
        200:
          body:
            application/json:
              type: defaultNetworkAddress
              example:
                {
                    "os_default_external_address":
                        {
                            "address":"192.168.1.100",
                        }
                }

  /ssh_port:
    type: base-type
    description:
      The SSH port used in Direct SSH links.
    get:
      description: Retrieve the system SSH port.
      responses:
        200:
          body:
            application/json:
              type: systemSSHPort
              example:
                {
                    "system_ssh_port":
                      {
                          "port":22,
                      }
                }
    put:
      description: Update the system SSH port.
      body:
        application/json:
          type: systemSSHPort
          example:
                {
                    "system_ssh_port":
                      {
                          "port":22,
                      }
                }
      responses:
        200:
          body:
            application/json:
              type: systemSSHPort
              example:
                {
                    "system_ssh_port":
                      {
                          "port":22,
                      }
                }
  /timezone:
    type: base-type
    description:
      Retrieve and update the system's timezone.
    get:
      description: Retrieves the system timezone.
      responses:
        200:
          body:
            application/json:
              type: systemTimezone
              example:
                { system_timezone: { timezone: "Australia/Brisbane" } }
    put:
      description: Update the system timezone.
      body:
        application/json:
          type: systemTimezone
          example:
            { system_timezone: { timezone: "Australia/Brisbane" } }
      responses:
        200:
          body:
            application/json:
              type: systemTimezone
              example:
                { system_timezone: { timezone: "Australia/Brisbane" } }
  /time:
    type: base-type
    description:
      Retrieve the current Lighthouse system time.
    get:
      description: Retrieve the current Lighthouse system time.
      responses:
        200:
          body:
            application/json:
              type: systemTime
              example:
                {
                  time: {
                    time: "17:03 Apr 22, 2020",
                  }
                }

  /external_endpoints:
    type: base-type
    description: >
      Configured external endpoints for nodes to reach the Lighthouse system.

      A maximum of 5 endpoints can be added.
    get:
      description: Retrieve the configured external endpoints.
      responses:
        200:
          body:
            application/json:
              type: externalEndpoints
              example:
                {
                  "system_external_endpoints":[
                    {
                      "id":"system_net_external_endpoints-2",
                      "vpn_port":1196,
                      "api_port":4443,
                      "mi_vpn_port": 1997,
                      "address":"192.168.122.1",
                    },
                    {
                      "id":"system_net_external_endpoints-3",
                      "vpn_port":1197,
                      "mi_vpn_port": 1999,
                      "api_port":4444,
                      "address":"10.1.1.1",
                    }
                  ]
                }
    post:
      description: Create a new external endpoint.
      body:
        application/json:
          example:
            {
              "system_external_endpoint": {
                "address": "192.168.127.20",
                "api_port": 443,
                "vpn_port": 1194,
                "mi_vpn_port": 1995,
              }
            }
      responses:
        200:
          body:
            application/json:
              type: externalEndpoint
              example:
                {
                  "system_external_endpoint":
                    {
                      "id":"system_net_external_endpoints-2",
                      "vpn_port":1194,
                      "mi_vpn_port":1195,
                      "api_port":443,
                      "address":"10.1.1.2",
                    }
                }
    /{id}:
      type: base-type
      get:
        description: Get an external endpoint by ID
        responses:
          200:
            body:
              application/json:
                type: externalEndpoint
                example:
                  {
                    "system_external_endpoint":
                      {
                        "id": "system_net_external_endpoints-2",
                        "vpn_port": 1196,
                        "mi_vpn_port": 1197,
                        "api_port": 4443,
                        "address": "192.168.122.1",
                      }
                  }
      put:
        description: Update an external endpoint
        body:
          application/json:
            example:
              {
                "system_external_endpoint": {
                  "id": "system_net_external_endpoints-1",
                  "vpn_port": 1194,
                  "mi_vpn_port": 1195,
                  "api_port": 443,
                  "address": "10.127.1.20",
                }
              }
        responses:
          200:
            body:
              application/json:
                type: externalEndpoint
                example:
                  {
                    "system_external_endpoint":
                      {
                        "id": "system_net_external_endpoints-2",
                        "vpn_port": 1196,
                        "mi_vpn_port": 1197,
                        "api_port": 4443,
                        "address": "192.168.122.1",
                      }
                  }
      delete:
        description: Delete an external endpoint
        responses:
          204:
            description: Endpoint deleted

  /config:
    type: base-type
    # System.reset
    delete:
      description: >
        Delete the configuration effectively performing a system reset.
        The Lighthouse host will reset to factory settings and reboot.
        The user will need to access the device via the console to set the
        root password before the network will be available.
      responses:
        200:
          description: >
            The factory reset process was started successfuly.

  /firmware_upgrade:
    type: base-type
    # Firmware.postFirmwareUpgrade
    post:
      description: >
        Upgrade the system firmware either by uploading a file or providing a url
        to download the file from. This endpoint will always return success if the
        firmware upgrade job was started - it occurs in the background and the state
        of which should be retrieved from the GET /system/firmware_upgrade_status
        endpoint.
        At least 'file' or 'firmware_url' are required.
      body:
        multipart/form-data:
          properties:
            file:
              description: The file to be uploaded.
              required: false
              type: file
            firmware_url:
              description: A url for the file to download.
              required: false
              type: string
            firmware_options:
              description: Options for the firmware upgrade tool.
              required: false
              type: string
      responses:
        200:
          description: The firmware upgrade process was started.
          body:
            application/json:
              type: firmwareUpgradeStatus
              example: |
                {
                  "system_firmware_upgrade_status":
                    {
                      "state": "running",
                    }
                }

  /firmware_upgrade_status:
    # Firmware.getFirmwareUpgradeStatus
    type: base-type
    get:
      description: Retrieve the status of the most recent firmware upgrade job.
      responses:
        200:
          description: The factory reset process was started successfuly.
          body:
            application/json:
              type: firmwareUpgradeStatus
              example: |
                {
                  "system_firmware_upgrade_status":
                    {
                      "state": "error",
                      "error_message": "download_error",
                    }
                }

  /node_firmware:
    type: base-type
    post:
      description: >
        Upload a new node firmware file to the Lighthouse
      body:
        multipart/form-data:
          properties:
            file:
              description: The firmware file data to upload
              required: true
              type: file
            firmware_name:
              description: The name to store the firmware file as on the Lighthouse
              required: true
              type: string
      responses:
        200:
          description: The firmware file has been stored on the Lighthouse
          body:
            application/json:
              type: node_firmware
              example: |
                {
                  "node_firmware": {
                    "id": "node-firmware-1",
                    "filename": "ACM7004-5-4.12.0.flash",
                    "family": "ACM7004-5",
                    "version": "4.12.0",
                    "size": "19MiB",
                    "upload_date": "24 Dec 2021 9:12 UTC",
                    "sha1": "a78408990775ca8651dba226c00e45766e45123b",
                  }
                }
        400:
          description: Invalid request, duplicate node firmware or invalid node firmware
          body:
            application/json:
              type: error
              example: |
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                },
                {
                  "error": [
                    {
                      type: 4,
                      "code": 218,
                      "text": "Node firmware <name> already present on the system.",
                      "args": {},
                      "level": 1,
                    }
                  ]
                },
                {
                  "error": [
                    {
                      type: 4,
                      "code": 219,
                      "text": "Node firmware <name> is invalid.",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
    /all:
      type: base-type
      get:
        description: >
          Retrieve the information on all the currently uploaded node firmware
          files.
        responses:
          200:
            description: The information was retrieved successfully
            body:
              application/json:
                type: object
                properties:
                  node_firmwares:
                    type: array
                    items:
                      type: node_firmware
                example: |
                  {
                    "node_firmwares": [
                      {
                        "id": "node-firmware-1",
                        "filename": "ACM7004-5-4.12.0.flash",
                        "family": "ACM7004-5",
                        "version": "4.12.0",
                        "size": "19MiB",
                        "upload_date": "24 Dec 2021 9:12 UTC",
                        "sha1": "a78408990775ca8651dba226c00e45766e45123b",
                      },
                      {
                        "id": "node-firmware-2",
                        "filename": "OperationManager-21.Q3.0.raucb",
                        "family": "",
                        "version": "21.Q3.0",
                        "size": "235MiB",
                        "upload_date": "3 Jan 2022 15:34 UTC",
                        "sha1": "c7b423f2dd732c789a52f2e57353617a716e5a08",
                      }
                    ]
                  }
    /{id}:
      type: base-type
      get:
        description: Retrieve the information on the specified uploaded node firmware file.
        responses:
          200:
            body:
              application/json:
                type: node_firmware
                example: |
                  {
                    "node_firmware": {
                      "id": "node-firmware-1",
                      "filename": "ACM7004-5-4.12.0.flash",
                      "family": "ACM7004-5",
                      "version": "4.12.0",
                      "size": "19MiB",
                      "upload_date": "24 Dec 2021 9:12 UTC",
                      "sha1": "a78408990775ca8651dba226c00e45766e45123b",
                    }
                  }
          404:
            description: Node firmware file doesn't exist.
            body:
              text/plain: !!null
      delete:
        description: Delete the specified node firmware file
        responses:
          204:
            body:
              text/plain: !!null
          400:
          description: Specified node firmware is a directory
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 220,
                      "text": "Directory present at expected file location <name>. Please contact your administrator.",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }

  /node_upgrade:
    description:
      Query and create firmware upgrade jobs for Opengear nodes.
    type: base-type
    get:
      description: >
        Retrieve a list of node upgrade jobs that have run in the past, or are
        scheduled to run in the future.
      responses:
        200:
          description: >
            A JSON object containing scheduled firmware upgrade jobs.
          body:
            application/json:
              type: object
              properties:
                node_upgrades:
                  type: array
                  items:
                    schema: node_upgrade_job_get
                meta: metaResponse
              example:
                {
                  "node_upgrades": [
                    {
                      "id": 1,
                      "firmware": "4.11.0",
                      "name": "Immediate Job",
                      "creator": "root",
                      "creation_time": "2022-02-25T00:05:00",
                      "scheduled_time": "2022-02-25T10:59:00",
                      "status": "IN_PROGRESS",
                      "error_message": null,
                      "start_time": null,
                      "finish_time": null,
                      "total_nodes": 10,
                      "number_failures": 1,
                      "number_successes": 3,
                    },
                    {
                      "id": 2,
                      "firmware": "4.12.1",
                      "name": "my_scheduled_upgrade",
                      "creator": "root",
                      "creation_time": "2022-02-25T00:09:30",
                      "scheduled_time": "2037-12-31T11:59:00",
                      "status": "SCHEDULED",
                      "error_message": null,
                      "start_time": null,
                      "finish_time": null,
                      "total_nodes": 0,
                      "number_failures": 0,
                      "number_successes": 0,
                    },
                  ],
                  "meta": {
                    "total_pages": 1,
                  }
                }
    post:
      description: >
        Schedule a job to run either immediately or at a later date, which will
        upgrade the specified nodes to the specified firmware version.
      body:
        application/json:
          type: node_upgrade_job_post
        responses:
          201:
            description: The job that was just scheduled.
            body:
              application/json:
                type: node_upgrade_job_get
                example:
                  {
                    "node_upgrade": {
                      "id": 21,
                      "name": "Friday Upgrade",
                      "firmware": "21.Q4.1",
                      "creator": "",
                      "status": "SUCCESS",
                      "scheduled_time": "2022-03-10T23:59:00",
                      "creation_time": "2022-02-27T10:14:26",
                      "start_time": "2022-03-10T23:59:07",
                      "finish_time": "2022-03-11T00:18:37",
                      "total_nodes": 10,
                      "number_successes": 8,
                      "number_failures": 2,
                      "error_message": "",
                    }
                  }
          400:
            description: An error with the input fields.
            body:
              application/json:
                example:
                  {
                    "error": [
                      {
                        "text": "Required field 'scheduled_time' must not be in the past.",
                        "code": 111,
                      }
                    ]
                  }
          422:
            description: A node was incompatible with the firmware.
            body:
              application/json:
                example:
                  {
                    "error": [
                      {
                        "text": "Node '1' is not compatible with firmware family 'OMXXXX'.",
                        "code": 225,
                      }
                    ]
                  }
    /{id}:
      type: base-type
      get:
        description: >
          Get a single scheduled node firmware upgrade job.
        responses:
          200:
            body:
              application/json:
                type: node_upgrade_job_get
                example:
                  {
                    "node_upgrade": {
                      "id": 21,
                      "name": "Friday Upgrade",
                      "firmware": "21.Q4.1",
                      "creator": "",
                      "status": "SUCCESS",
                      "scheduled_time": "2022-03-10T23:59:00",
                      "creation_time": "2022-02-27T10:14:26",
                      "start_time": "2022-03-10T23:59:07",
                      "finish_time": "2022-03-11T00:18:37",
                      "total_nodes": 10,
                      "number_successes": 8,
                      "number_failures": 2,
                      "error_message": "",
                    }
                  }
    /{id}/nodes:
      type: base-type
      get:
        description: >
          Get the nodes for a single node firmware upgrade job.
        responses:
          200:
            body:
              application/json:
                type: object
                properties:
                  node_upgrades:
                    type: array
                    items:
                      schema: node_upgrade_node_get
                  meta: metaResponse
                example:
                  {
                    "node_upgrade_nodes": [
                      {
                        "node_id": 4,
                        "status": "SUCCESS",
                        "allow_in_failover": true,
                        "original_firmware": "20.Q2.0",
                        "error_message": "",
                      }
                    ],
                    "meta": {
                      "total_pages": 1,
                    }
                  }

  /entitlements:
    description:
      Retrieve entitlement information for the Lighthouse based on the licenses applied.
    type: base-type
    get:
      description: Retrieve a list of entitlements.
      responses:
        200:
          description:
            A JSON object containing entitlements information.
          body:
            application/json:
              type: object
              properties:
                entitlements:
                  type: array
                  description: A list of entitlements.
                  items:
                    schema: entitlements
              example:
                {
                  "entitlements": [
                    {
                      "id": "SKU1",
                      "contact": {
                        "name": "Jenny Bloggs",
                        "email": "jennyb@bloggs.com",
                      },
                      "features": {
                        "maintenance": 1546214400,
                        "nodes": 20,
                      }
                    },
                    {
                      "id": "SKU2",
                      "contact": {
                        "name": "Joe Bloggs",
                        "email": "joeb@bloggs.com",
                      },
                      "features": {
                        "maintenance": 1546214400,
                        "nodes": 1578,
                      }
                    }
                  ]
                }

  /licenses:
    description:
      Create and view licenses applied to the Lighthouse system.
    type: base-type
    get:
      description: Retrieve a list of license strings.
      responses:
        200:
          description:
            A JSON object containing raw license strings information.
          body:
            application/json:
              type: object
              properties:
                licenses:
                  type: array
                  items:
                    schema: license
              example:
                {
                  "licenses": [
                    {
                      "id": 1,
                      "raw": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pY2hhZWxmQGZpdHp5c2l0ZS5jb20iLCJzdWIiOiJ...",
                    },
                    {
                      "id": 2,
                      "raw": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pY2hhZWxmQGZpdHp5c2l0ZS5jb20iLCJzdWIiOiJ...",
                    }
                  ]
                }

    post:
      description: Apply a list of licenses.
      body:
        application/json:
          type: object
          properties:
            licenses:
              type: array
              items:
                schema: license
          example:
            {
              "licenses": [
                {
                  "raw": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pY2hhZWxmQGZpdHp5c2l0ZS5jb20iLCJzdWIiOiJ...",
                },
                {
                  "raw": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pY2hhZWxmQGZpdHp5c2l0ZS5jb20iLCJzdWIiOiJ...",
                }
              ]
            }
      responses:
        201:
          description:
            A JSON object containing the raw licenses that were just applied.
          body:
            application/json:
              type: object
              properties:
                licenses:
                  type: array
                  items:
                    schema: license
              example:
                {
                  "licenses": [
                    {
                      "id": 1,
                      "raw": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pY2hhZWxmQGZpdHp5c2l0ZS5jb20iLCJzdWIiOiJ...",
                    },
                    {
                      "id": 2,
                      "raw": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pY2hhZWxmQGZpdHp5c2l0ZS5jb20iLCJzdWIiOiJ...",
                    }
                  ]
                }

    /file:
      description: Upload a Lighthouse license file
      type: base-type
      post:
        description: Upload a Lighthouse license file
        body:
          multipart/form-data:
            properties:
              file:
                description: The license zip file to be uploaded.
                required: true
                type: file
        responses:
          201:
            description: >
              A JSON object containing the raw licenses that were just applied.
            body:
              application/json:
                type: object
                properties:
                  licenses:
                    type: array
                    items:
                      schema: license
                example:
                  {
                    "licenses": [
                      {
                        "id": 1,
                        "raw": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pY2hhZWxmQGZpdHp5c2l0ZS5jb20iLCJzdWIiOiJ...",
                      },
                      {
                        "id": 2,
                        "raw": "eyJhbGciOiJSUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pY2hhZWxmQGZpdHp5c2l0ZS5jb20iLCJzdWIiOiJ...",
                      }
                    ]
                  }

  /version:
    type: base-type
    description:
      Retrieve the Lighthouse's most recent firmware and REST API version.
    get:
      description: Get the version information.
      responses:
        200:
          body:
            application/json:
              type: systemVersion
              example:
                {
                  "system_version": {
                    "rest_api_version": "v1.1",
                    "firmware_version": "5.1.1",
                  }
                }
  /alternate_api:
    type: base-type
    description:
      Retrieve the Lighthouse alternate enrollment API information.
    get:
      description: Get the enrollment API information.
      responses:
        200:
          body:
            application/json:
              type: enrollmentAPI
              example:
                {
                  "system_alternate_api": {
                    "enabled": true,
                    "port": 8443,
                  }
                }
    put:
      description: Set the enrollment API information.
      body:
        application/json:
          type: enrollmentAPI
          example:
            {
              "system_alternate_api": {
                "enabled": true,
                "port": 8999,
              }
            }
      responses:
        200:
          body:
            application/json:
              type: enrollmentAPI
              example:
                {
                  "system_alternate_api": {
                    "enabled": true,
                    "port": 8999,
                  }
                }

  /config_backup:
    type: base-type
    # BackupRestore.get_backup_file
    get:
      description: >
        Retrieve a configuration backup file.
      queryParameters:
        id:
          description: Backup file identifier.
          type: string
          required: true
      body:
        application/octet-stream:
          type: file
    # BackupRestore.create_backup_file
    post:
      description: >
        Create a file containing a backup of the current Lighthouse system configuration.
        The file may be optionally encrypted with a password. An optional list of files
        and directories may also be specified, to be included in the archive.
      body:
        application/json:
          properties:
            password:
              description: A password for encrypting the backup archive.
              required: false
              type: string
            user_files:
              description: A list of files and directories to be included.
              required: false
              type: array
              items:
                type: string
      responses:
        200:
          body:
            application/json:
              type: configBackupResponse
              example:
                {
                  "system_config_backup": {
                    "id": "v7RignO1",
                  }
                }

  /config_restore:
    type: base-type
    # BackupRestore.restore_from_backup
    post:
      description: >
        Restore the system configuration from a backup. The backup may be from the
        same or earlier version of Lighthouse, but may not be from a later version.
        The restore process will take several minutes, and the system will be
        restarted.
      body:
        application/json:
          properties:
            id:
              description: Identifier for a backup that has been uploaded.
              required: true
              type: string
      responses:
        200:
          body:
            application/json:
              type: configRestoreResponse
              example:
                {
                  "system_config_restore": {
                    "status": "restoring",
                  }
                }

  /upload_restore:
    type: base-type
    # BackupRestore.upload_restore_file
    post:
      description: >
        Upload a configuration backup file to be validated, in preparation for a system
        restore. If the backup is encrypted, the password must be provided.
        NOTE - the backup being restored MUST be from the same major firmware version OR the
        most recent previous major release (ignoring the last/minor element in the version number).
      body:
        multipart/form-data:
          properties:
            file:
              description: The backup file to be uploaded.
              required: true
              type: file
            password:
              description: Password to decrypt the backup file.
              required: false
              type: string
      responses:
        200:
          body:
            application/json:
              type: uploadRestoreResponse
              example:
                {
                  "system_upload_restore": {
                    "id": "zIb2sw84",
                    "version": "19.Q3.0",
                    "status": "pending",
                  }
                }

/stats:
  description: >
    Retrieve statistical information about the Lighthouse deployment.
  /nodes:
    /connection_summary:
      type: base-type
      get:
        description: >
          A summary of connected, pending and disconnected nodes
        responses:
          200:
            body:
              application/json:
                type: connectionSummaryResponse
                example:
                  {
                    "connectionSummary": [
                      {
                        "status": "connected",
                        "count": 11,
                      },
                      {
                        "status": "pending",
                        "count": 1,
                      },
                      {
                        "status": "disconnected",
                        "count": 1,
                      }
                    ]
                  }
    /cellular_health_summary:
      type: base-type
      get:
        description: >
          A count of nodes by cellular health status. If cellular health
          monitoring is disabled, the response will be an empty JSON object.
        responses:
          200:
            body:
              application/json:
                type: cellularHealthSummaryResponse
                example:
                  {
                    "connectionSummary": [
                      {
                        "status": "bad",
                        "count": 3,
                      },
                      {
                        "status": "moderate",
                        "count": 8,
                      },
                      {
                        "status": "good",
                        "count": 84,
                      },
                      {
                        "status": "pending",
                        "count": 5,
                      }
                    ]
                  }

/support_report:
  description: >
    Obtain a report which will provide information about the state of the
    Lighthouse server. This information can be used to help analyse and
    understand the state of the system.

    The report is large and may take in the order of a minute to obtain.
  type: base-type
  get:
    description: Retrieve the support report data.
    responses:
      200:
        description: >
          System report was successfully generated and returned including a
          url to a corresponding zip file.
        body:
          application/json:
            type: getSupportReport
            example:
              {
                "support_report": {
                  "message": "success",
                  "contents": "*** System time ***\nMon Aug 22 11:27:29 2016\n\n\n*** Firmware Version ***\n$ sysflash_info\nsysflash info\ncurrent copy name: 'root1'\ncurrent config dev: '/dev/sda6'\ncurrent root dev: '/dev/sda5'\ncurrent boot dev: '/dev/sda2'\nother (upgradable) copy name: 'root2'\nother (upgradable) config dev: '/dev/sda8'\nother (upgradable) root dev: '/dev/sda7'\nother (upgradable) boot dev: '/dev/sda3'\nboard name: 'lighthouse-vm'\nboard rev: '1.0'\ncurrent software vendor: 'opengear'\ncurrent software product: 'ironman'\ncurrent software version: '5.0.0'\ncurrent software variant: 'release'\n\n*** Uptime ***\n359140.57 715606.84\n\n*** IP Configuration ***\n$ ifconfig\nnet1      Link encap:Ethernet  HWaddr 08:00:27:d7:1c:38  \n   ",
                  "zip_file": "/api/v1.1/support_report?zip=1",
                }
              }

/auth:
  description: >
    Configure remote authentication, authorization, accounting (AAA) servers.
  type: base-type
  get:
    description: Retrieve information on AAA servers.
    responses:
      200:
        description: >
          A JSON object containing the AAA config is returned.
        body:
          application/json:
            example:
              {
                "auth" : {
                  "mode" : "tacacs",
                  "authStyle" : "auth_local",
                  "radiusAuthenticationServers" : [
                    {
                      "id" : "auth_radius_authenticationServers-2",
                      "hostname" : "192.168.255.1",
                    }
                  ],
                  "radiusAccountingServers" : [
                    {
                      "id" : "auth_radius_accountingServers-1",
                      "hostname" : "192.168.255.1",
                    }
                  ],
                  "tacacsService" : "raccess",
                  "tacacsMethod" : "pap",
                  "tacacsAuthenticationServers" : [
                    {
                      "hostname" : "192.168.1.2",
                      "id" : "auth_tacacs_authenticationServers-2",
                    }
                  ],
                  "ldapAuthenticationServers" : [
                    {
                      "id" : "auth_ldap_authenticationServers-1",
                      "hostname" : "192.168.1.2",
                    }
                  ],
                  "ldapBaseDN" : "cn=Users,dc=example,dc=com",
                  "ldapBindDN" : "cn=Administrator,cn=Users,dc=example,dc=com",
                  "ldapIgnoreReferrals" : false,
                  "ldapUsernameAttribute" : "sAMAccountName",
                  "ldapSslMode" : "ldaps_preferred",
                  "ldapSslIgnoreCertErrors" : false,
                  "ldapSslCaCert" : "-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
                }
              }
  put:
    description: Update the AAA config.
    body:
      application/json:
        examples:
          "Local Auth example":
            {
              "auth": {
                "mode": "local",
                "radiusAuthenticationServers": [],
                "radiusAccountingServers": [],
                "tacacsAuthenticationServers": [],
                "ldapAuthenticationServers": [],
              }
            }
          "Radius Auth example":
            {
              "auth" : {
                "mode" : "radius",
                "authStyle" : "auth",
                "radiusPassword" : "hunter2",
                "radiusAuthenticationServers" : [
                  {
                    "hostname" : "192.168.250.2",
                  }
                ],
                "radiusAccountingServers" : [
                  {
                    "port": 1000,
                    "hostname" : "192.168.250.2",
                  }
                ],
                "tacacsAuthenticationServers":[],
                "ldapAuthenticationServers":[]
              }
            }
          "Tacacs+DownLocal Auth example":
            {
              "auth" : {
                "mode" : "tacacs",
                "authStyle" : "auth_down_local",
                "tacacsPassword" : "hunter2",
                "tacacsMethod": "pap",
                "tacacsService": "raccess",
                "tacacsAuthenticationServers": [
                  {
                    "hostname" : "192.168.250.2",
                    "port": 49,
                  }
                ],
                "radiusAuthenticationServers": [],
                "radiusAccountingServers": [],
                "ldapAuthenticationServers":[]
              }
            }
          "LocalLDAP Auth example":
            {
              "auth" : {
                "mode" : "ldap",
                "authStyle" : "local_auth",
                "ldapBindPassword": "ldapPassword",
                "ldapUsernameAttribute": "sAMAccountName",
                "ldapGroupMembershipAttribute": "memberOf",
                "ldapBaseDN": "cn=Users,dc=test,dc=example,dc=com",
                "ldapBindDN": "cn=Administrator,cn=Users,dc=test,dc=example,dc=com",
                "ldapIgnoreReferrals" : true,
                "ldapSslMode" : "ldaps_preferred",
                "ldapSslIgnoreCertErrors" : false,
                "ldapSslCaCert" : "-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
                "ldapAuthenticationServers": [
                  {
                    "port": 389,
                    "hostname": "10.0.1.1",
                  }
                ],
                "tacacsAuthenticationServers": [],
                "radiusAuthenticationServers": [],
                "radiusAccountingServers": [],
              }
            }

    responses:
      200:
        description: >
          A JSON object containing the AAA config is returned.
        body:
          application/json:
            example:
              {
                "auth" : {
                  "mode" : "radius",
                  "authStyle" : "auth",
                  "radiusAuthenticationServers" : [
                    {
                      "id" : "auth_radius_authenticationServers-1",
                      "hostname" : "192.168.250.2",
                    }
                  ],
                  "radiusAccountingServers" : [
                    {
                      "id" : "auth_radius_accountingServers-1",
                      "hostname" : "192.168.250.2",
                    }
                  ],
                  "tacacsService" : "raccess",
                  "tacacsMethod" : "pap",
                  "tacacsAuthenticationServers" : [
                    {
                      "hostname" : "192.168.1.2",
                      "id" : "auth_tacacs_authenticationServers-2",
                    }
                  ],
                  "ldapAuthenticationServers" : [
                    {
                      "id" : "auth_ldap_authenticationServers-1",
                      "hostname" : "192.168.1.2",
                    }
                  ],
                  "ldapBaseDN" : "cn=Users,dc=example,dc=com",
                  "ldapBindDN" : "cn=Administrator,cn=Users,dc=example,dc=com",
                  "ldapIgnoreReferrals" : true,
                  "ldapUsernameAttribute" : "sAMAccountName",
                }
              }
  /saml/idp_metadatas:
    description: >
      Configure Single-Sign-On.
      A maximum of 1 SSO config per lighthouse is permitted.
    type: base-type
    get:
      description: Retrieve information on SSO config for all lighthouses
      queryParameters:
        include_lh_details:
          description: >
            Includes top level summary details of the lighthouse this IdP metadata
            is associated with in the `lh_details` property.
          type: boolean
          required: false
          displayName: include_lh_details
          default: false
        show_unconfigured_lhs:
          description: >
            Includes top level summary details of lighthouses without an associated
            IdP metadata configuration in the `lhs_without_idp` property of the
            response.
          type: boolean
          required: false
          displayName: show_unconfigured_lhs
          default: false
      responses:
        200:
          body:
            application/json:
              type: idpMetadataWithLhDetailsAndLhsWithoutIdpList
              example:
                {
                  'idp_metadatas': [
                    {
                      'id': 3,
                      'display_name': 'Okta',
                      'sp_private_key': '-----BEGIN RSA PRIVATE KEY-----\n...V9vP179YQwwdAF6L6NLpro=\n-----END RSA PRIVATE KEY-----\n',
                      'sp_certificate': 'Bag Attributes\n    localKeyID: 96 0A DD A5 FD 80 BB 66 44 11 6A D1 CB 13 0E 4E 6D DC 7C 7E \n    friendlyName: test\nsubject=CN = keycloak-lighthouse\n\nissuer=CN = keycloak-lighthouse\n\n-----BEGIN CERTIFICATE-----\nMIICtTCCAZ0CBgF8NGSBqjANBgkqhkiG9w0BAQsFADAeMRwwGgYDVQQDDB...3SJV0\n1r2lzkFY5upAaT/JvQK4L+5dwEAIGyxCAQ==\n-----END CERTIFICATE-----\n',
                      'metadata': '<md:EntityDescriptor xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" entityID="http://localhost/auth/realms/keycloak-lighthouse">\n<md:IDPSSODescriptor WantAuthnRequestsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">\n<md:KeyDescriptor use="signing">\n<ds:KeyInfo>\n<ds:KeyName>o5KTX0J7mYo1FbkUUkb13vTlldGbgM3n0GyIdJhPgHA</ds:KeyName>\n<ds:X509Data>\n<ds:X509Certificate>MIICxTCCAa0CBgF8U9wJP...u2RkuESQYN7W5DzhVVSfyH7u/3CCmqoBW0=</ds:X509Certificate>\n</ds:X509Data>\n</ds:KeyInfo>\n</md:KeyDescriptor>\n<md:ArtifactResolutionService Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml/resolve" index="0"/>\n<md:SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</md:NameIDFormat>\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</md:NameIDFormat>\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>\n<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n</md:IDPSSODescriptor>\n</md:EntityDescriptor>\n',
                      'provider': 'okta',
                      'lighthouse_id': 1,
                      'lh_details': {
                        'hostname': 'lighthouse',
                        'role': 'Primary',
                        'network_address': '192.168.125.120',
                      }
                    }
                  ],
                  'lhs_without_idp': [
                    {
                      'lighthouse_id': 3,
                      'lh_details': {
                        'hostname': 'lighthouse-2',
                        'role': 'Secondary',
                        'network_address': '192.168.125.121',
                      }
                    }
                  ]
                }
    post:
      description: Create a new SSO configuration. Implicitly enables SSO for the lighthouse.
      body:
        application/json:
          example:
            {
              "idp_metadata": {
                "lighthouse_id": 1,
                "provider": "keycloak",
                "display_name": "keycloak-primary",
                "sp_private_key": "-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAq72mEUgBCOdc3LQq8ZW.../GSr0Rj5sRtyV9vP179YQwwdAF6L6NLpro=\\n-----END RSA PRIVATE KEY-----\\n",
                "sp_certificate": "Bag Attributes\\n    localKeyID: 96 0A DD A5 FD 80 BB 66 44 11 6A D1 CB 13 0E 4E 6D DC 7C 7E \\n    friendlyName: test\nsubject=CN = keycloak-lighthouse\\n\\nissuer=CN = keycloak-lighthouse\\n\\n-----BEGIN CERTIFICATE-----\\nMIICtTCCAZ0CBgF8NGSBqjA...+kmY0h0bMJcqNupk3SJV0\\n1r2lzkFY5upAaT/JvQK4L+5dwEAIGyxCAQ==\\n-----END CERTIFICATE-----\\n",
                "metadata": "<md:EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" entityID=\"http://localhost/auth/realms/keycloak-lighthouse\">\\n<md:IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\\n<md:KeyDescriptor use=\"signing\">\\n<ds:KeyInfo>\\n<ds:KeyName>o5KTX0J7mYo1FbkUUkb13vTlldGbgM3n0GyIdJhPgHA</ds:KeyName>\\n<ds:X509Data>\\n<ds:X509Certificate>MIICxTCCAa0CBgF8U9wJPTANBgkqhkiG9w0BAQsFADAmMSQwIg...fXtY3sMqtN3bwKuBzN7P1jQgMR+JeVyz2EfOE9z0RNH1b+u2RkuESQYN7W5DzhVVSfyH7u/3CCmqoBW0=</ds:X509Certificate>\\n</ds:X509Data>\\n</ds:KeyInfo>\\n</md:KeyDescriptor>\\n<md:ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml/resolve\" index=\"0\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n</md:IDPSSODescriptor>\\n</md:EntityDescriptor>\\n",
              }
            }
      responses:
        201:
          body:
            application/json:
              type: idpMetadataWithId
              example:
                {
                  "idp_metadata": {
                    'id': 5,
                    "lighthouse_id": 1,
                    "provider": "keycloak",
                    "display_name": "keycloak-primary",
                    "sp_private_key": "-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAq72mEUgBCOdc3LQq8ZW.../GSr0Rj5sRtyV9vP179YQwwdAF6L6NLpro=\\n-----END RSA PRIVATE KEY-----\\n",
                    "sp_certificate": "Bag Attributes\\n    localKeyID: 96 0A DD A5 FD 80 BB 66 44 11 6A D1 CB 13 0E 4E 6D DC 7C 7E \\n    friendlyName: test\nsubject=CN = keycloak-lighthouse\\n\\nissuer=CN = keycloak-lighthouse\\n\\n-----BEGIN CERTIFICATE-----\\nMIICtTCCAZ0CBgF8NGSBqjA...+kmY0h0bMJcqNupk3SJV0\\n1r2lzkFY5upAaT/JvQK4L+5dwEAIGyxCAQ==\\n-----END CERTIFICATE-----\\n",
                    "metadata": "<md:EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" entityID=\"http://localhost/auth/realms/keycloak-lighthouse\">\\n<md:IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\\n<md:KeyDescriptor use=\"signing\">\\n<ds:KeyInfo>\\n<ds:KeyName>o5KTX0J7mYo1FbkUUkb13vTlldGbgM3n0GyIdJhPgHA</ds:KeyName>\\n<ds:X509Data>\\n<ds:X509Certificate>MIICxTCCAa0CBgF8U9wJPTANBgkqhkiG9w0BAQsFADAmMSQwIg...fXtY3sMqtN3bwKuBzN7P1jQgMR+JeVyz2EfOE9z0RNH1b+u2RkuESQYN7W5DzhVVSfyH7u/3CCmqoBW0=</ds:X509Certificate>\\n</ds:X509Data>\\n</ds:KeyInfo>\\n</md:KeyDescriptor>\\n<md:ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml/resolve\" index=\"0\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n</md:IDPSSODescriptor>\\n</md:EntityDescriptor>\\n",
                  }
                }
    /{id}:
      type: base-type
      get:
        description: Get an IdP metadata configuration by ID
        queryParameters:
          include_lh_details:
            description: >
              Includes top level summary details of the lighthouse this IdP metadata
              is associated with in the `lh_details` property.
            type: boolean
            required: false
            displayName: include_lh_details
            default: false
        responses:
          200:
            body:
              application/json:
                type: idpMetadataWithLhDetails
                example:
                  {
                    'idp_metadata': {
                      'id': 5,
                      'display_name': 'keycloak-primary',
                      'sp_private_key': '-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEAq72mEUgBCOdc3LQq8ZWw...EZRqRuZKYy2ZvIL/GSr0Rj5sRtyV9vP179YQwwdAF6L6NLpro=\n-----END RSA PRIVATE KEY-----\n',
                      'sp_certificate': 'Bag Attributes\n    localKeyID: 96 0A DD A5 FD 80 BB 66 44 11 6A D1 CB 13 0E 4E 6D DC 7C 7E \n    friendlyName: test\nsubject=CN = keycloak-lighthouse\n\nissuer=CN = keycloak-lighthouse\n\n-----BEGIN CERTIFICATE-----\nMIICtTCCAZ0CBgF8NGSBqjANBgkqhkiG9w0BAQsFADAeMRwwGgYDVQQDDBN...n1r2lzkFY5upAaT/JvQK4L+5dwEAIGyxCAQ==\n-----END CERTIFICATE-----\n',
                      'metadata': '<md:EntityDescriptor xmlns="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata" xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" entityID="http://localhost/auth/realms/keycloak-lighthouse">\n<md:IDPSSODescriptor WantAuthnRequestsSigned="true" protocolSupportEnumeration="urn:oasis:names:tc:SAML:2.0:protocol">\n<md:KeyDescriptor use="signing">\n<ds:KeyInfo>\n<ds:KeyName>o5KTX0J7mYo1FbkUUkb13vTlldGbgM3n0GyIdJhPgHA</ds:KeyName>\n<ds:X509Data>\n<ds:X509Certificate>MIICxTCCAa0CBgF8U9wJPTANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtrZXljbG...+JeVyz2EfOE9z0RNH1b+u2RkuESQYN7W5DzhVVSfyH7u/3CCmqoBW0=</ds:X509Certificate>\n</ds:X509Data>\n</ds:KeyInfo>\n</md:KeyDescriptor>\n<md:ArtifactResolutionService Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml/resolve" index="0"/>\n<md:SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleLogoutService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</md:NameIDFormat>\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</md:NameIDFormat>\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>\n<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:SOAP" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n<md:SingleSignOnService Binding="urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact" Location="http://localhost/auth/realms/keycloak-lighthouse/protocol/saml"/>\n</md:IDPSSODescriptor>\n</md:EntityDescriptor>\n',
                      'provider': 'keycloak',
                      'lighthouse_id': 1,
                      'lh_details': {
                        'hostname': 'lighthouse',
                        'role': 'Primary',
                        'network_address': '192.168.125.120',
                      }
                    }
                  }
      put:
        description: Update an IdP metadata configuration
        body:
          application/json:
            example:
              {
                "idp_metadata": {
                  "display_name": "keycloak-primary-updated",
                  "sp_private_key": "-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAq72mEUgBCOdc3LQq8ZWw/j0j.../GSr0Rj5sRtyV9vP179YQwwdAF6L6NLpro=\\n-----END RSA PRIVATE KEY-----\\n",
                  "sp_certificate": "Bag Attributes\\n    localKeyID: 96 0A DD A5 FD 80 BB 66 44 11 6A D1 CB 13 0E 4E 6D DC 7C 7E \\n    friendlyName: test\nsubject=CN = keycloak-lighthouse\\n\\nissuer=CN = keycloak-lighthouse\\n\\n-----BEGIN CERTIFICATE-----\\nMIICtTCCAZ0CBgF8NGSBqjANBgkqhkiG9w0BAQsFADAeMRwwGgYDVQQDDBNrZ...notBcUj2Vwy+kmY0h0bMJcqNupk3SJV0\\n1r2lzkFY5upAaT/JvQK4L+5dwEAIGyxCAQ==\\n-----END CERTIFICATE-----\\n",
                  "metadata": "<md:EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" entityID=\"http://localhost/auth/realms/keycloak-lighthouse\">\\n<md:IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\\n<md:KeyDescriptor use=\"signing\">\\n<ds:KeyInfo>\\n<ds:KeyName>o5KTX0J7mYo1FbkUUkb13vTlldGbgM3n0GyIdJhPgHA</ds:KeyName>\\n<ds:X509Data>\\n<ds:X509Certificate>MIICxTCCAa0CBgF8U9wJPTANBgkqhkiG9w0BAQsFADAmMSQ...JeVyz2EfOE9z0RNH1b+u2RkuESQYN7W5DzhVVSfyH7u/3CCmqoBW0=</ds:X509Certificate>\\n</ds:X509Data>\\n</ds:KeyInfo>\\n</md:KeyDescriptor>\\n<md:ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml/resolve\" index=\"0\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n</md:IDPSSODescriptor>\\n</md:EntityDescriptor>\\n",
                  "provider": "keycloak",
                  "lighthouse_id": 1,
                }
              }
        responses:
          200:
            body:
              application/json:
                type: idpMetadataWithId
                example:
                  {
                    "idp_metadata": {
                      'id': 5,
                      "display_name": "keycloak-primary-updated",
                      "sp_private_key": "-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAq72mEUgBCOdc3LQq8ZWw/j0j.../GSr0Rj5sRtyV9vP179YQwwdAF6L6NLpro=\\n-----END RSA PRIVATE KEY-----\\n",
                      "sp_certificate": "Bag Attributes\\n    localKeyID: 96 0A DD A5 FD 80 BB 66 44 11 6A D1 CB 13 0E 4E 6D DC 7C 7E \\n    friendlyName: test\nsubject=CN = keycloak-lighthouse\\n\\nissuer=CN = keycloak-lighthouse\\n\\n-----BEGIN CERTIFICATE-----\\nMIICtTCCAZ0CBgF8NGSBqjANBgkqhkiG9w0BAQsFADAeMRwwGgYDVQQDDBNrZ...notBcUj2Vwy+kmY0h0bMJcqNupk3SJV0\\n1r2lzkFY5upAaT/JvQK4L+5dwEAIGyxCAQ==\\n-----END CERTIFICATE-----\\n",
                      "metadata": "<md:EntityDescriptor xmlns=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:md=\"urn:oasis:names:tc:SAML:2.0:metadata\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\" entityID=\"http://localhost/auth/realms/keycloak-lighthouse\">\\n<md:IDPSSODescriptor WantAuthnRequestsSigned=\"true\" protocolSupportEnumeration=\"urn:oasis:names:tc:SAML:2.0:protocol\">\\n<md:KeyDescriptor use=\"signing\">\\n<ds:KeyInfo>\\n<ds:KeyName>o5KTX0J7mYo1FbkUUkb13vTlldGbgM3n0GyIdJhPgHA</ds:KeyName>\\n<ds:X509Data>\\n<ds:X509Certificate>MIICxTCCAa0CBgF8U9wJPTANBgkqhkiG9w0BAQsFADAmMSQ...JeVyz2EfOE9z0RNH1b+u2RkuESQYN7W5DzhVVSfyH7u/3CCmqoBW0=</ds:X509Certificate>\\n</ds:X509Data>\\n</ds:KeyInfo>\\n</md:KeyDescriptor>\\n<md:ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml/resolve\" index=\"0\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleLogoutService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:persistent</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:2.0:nameid-format:transient</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified</md:NameIDFormat>\\n<md:NameIDFormat>urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress</md:NameIDFormat>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n<md:SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Artifact\" Location=\"http://localhost/auth/realms/keycloak-lighthouse/protocol/saml\"/>\\n</md:IDPSSODescriptor>\\n</md:EntityDescriptor>\\n",
                      "provider": "keycloak",
                      "lighthouse_id": 1,
                    }
                  }
      delete:
        description: Delete an IdP metadata configuration. Implicitly disables SSO for the lighthouse.
        responses:
          204:
            description: IdP metadata deleted

/bundles:
  type: base-type
  description: >
    Creating/registering and viewing the state of console server bundles.
  get:
    displayName: getBundles
    description: >
      Gets bundles attached to this lighthouse instance.


      The standard ember-data pagination fields {per_page} and {page} apply
      to this list.


      {per_page} and {page} are optional but both are to be supplied if pages
      are requested.

      A bundle response will also contain a list of tags, which represents the
      user-editable attributes assigned to this bundle.
    queryParameters:
      per_page:
        description: Maximum number of bundles per page
        type: integer
        required: false
        displayName: per_page
        default: 100000
      page:
        description: The page to return (indexed from 1)
        type: integer
        required: false
        displayName: page
        default: 1
    responses:
      200:
        description: The array of bundles, either a full or as requested by parameters
        body:
          application/json:
            example:
              {
                "bundles": [
                  {
                    name: "Test Bundle 1",
                    "auto_approve": false,
                    "id": "enrollment_bundles-1",
                    "automatic_tags": [
                      {
                        "id": "enrollment_bundles_automatic_tags-1",
                        name: "Test Tag Key 1",
                        "value": "Test Tag Value 1",
                      },
                      {
                        "id": "enrollment_bundles_automatic_tags-2",
                        name: "Test Tag Key 2",
                        "value": "Test Tag Value 2",
                      }
                    ],
                    "nodes": [],
                    "templates": ["templates-1", "templates-4"],
                    "token": "abcdefghijklmnop",
                    "manifest_link": "/api/v1.1/bundles/enrollment_bundles-1/manifest",
                  },
                  {
                    name: "Test Bundle 2",
                    "auto_approve": false,
                    "id": "enrollment_bundles-2",
                    "automatic_tags": [
                      {
                        "id": "enrollment_bundles_automatic_tags-3",
                        name: "Test Tag Key A",
                        "value": "Test Tag Value B",
                      }
                    ],
                    "nodes": [],
                    "templates": [],
                    "token": "1234567890",
                    "manifest_link": "/api/v1.1/bundles/enrollment_bundles-2/manifest",
                  }
                ],
                "meta": {
                  "total_pages": 1,
                }
              }
      400:
        description: Invalid request, missing or incorrect page/per_page
        body:
          application/json:
            type: error
            example:
              {
                "error": [
                  {
                    type: 4,
                    "code": 39,
                    "text": "Invalid request body",
                    "args": {},
                    "level": 1,
                  }
                ]
              }
      404:
        description: Invalid request, Incomplete data, Bundle not found, Failure during retrieval of bundles
        body:
          application/json:
            type: error
      500:
        description: Failed to read bundles.
        body:
          application/json:
            type: error
  post:
    body:
      application/json:
        example:
          {
            "bundle":
              {
                "name": "PrimaryBundle",
                "auto_approve": true,
                "token": "ABCD1234567",
                "templates": ["templates-5"],
                "automatic_tags": [
                  {
                    "name":"Location",
                    "value":"Brisbane",
                  }
                ]
              }
          }
    displayName: addBundle
    description: >
      Add a new Bundle. The automatic_tags values must be valid as obtained using by a GET on endpoint /tags/node_tags.
    responses:
      200:
        description: Bundle added successfully.
        body:
          application/json:
            example:
              {
                "bundle": {
                  name: "Test Bundle 1",
                  "auto_approve": true,
                  "id": "enrollment_bundles-1",
                  "automatic_tags": [
                    {
                      "id": "enrollment_bundles_automatic_tags-1",
                      name: "Test Tag Key 1",
                      "value": "Test Tag Value 1",
                    },
                    {
                      "id": "enrollment_bundles_automatic_tags-2",
                      name: "Test Tag Key 2",
                      "value": "Test Tag Value 2",
                    }
                  ],
                  "nodes": [],
                  "templates": ["templates-5"],
                  "token": "abcdefghijklmnop",
                  "manifest_link": "/api/v1.1/bundles/enrollment_bundles-1/manifest",
                }
              }
      400:
        description: Invalid request, or error with supplied data
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    type: 4,
                    "code": 39,
                    "text": "Invalid request body",
                    "args": {},
                    "level": 1,
                  }
                ]
              }
      404:
        description: Redirect to new bundle session
        body:
          application/json:
            example:
              {"message": "Redirecting to new bundle at {redirect-url}"}
      500:
        description: Unexpected error.
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    type: 2,
                    "code": 26,
                    "text": "Duplicate 'name' fields with value 'test'",
                    "args": {
                      "value": "test",
                      "uuid": "root-1-@bundles",
                      "field": "name",
                    },
                    "level": 1,
                  },
                  {
                    type: 1,
                    "code": 33,
                    "text": "Push command failed",
                    "args": {},
                    "level": 1,
                  }
                ]
              }

  # Bundle.get_bundle
  /{id}:
    type: base-type
    uriParameters:
      id:
        description: ID of bundle to fetch
        required: true
        displayName: id
        example: enrollment_bundles-1
    get:
      displayName: findBundleByID
      description: Find a bundle by unique ID
      responses:
        200:
          description: The requested bundle
          body:
            application/json:
              example:
                {
                  "bundle": {
                    name: "Test Bundle 1",
                    "auto_approve": false,
                    "id": "enrollment_bundles-1",
                    "automatic_tags": [
                      {
                        "id": "enrollment_bundles_automatic_tags-1",
                        name: "Test Tag Key 1",
                        "value": "Test Tag Value 1",
                      },
                      {
                        "id": "enrollment_bundles_automatic_tags-2",
                        name: "Test Tag Key 2",
                        "value": "Test Tag Value 2",
                      }
                    ],
                    "nodes": [],
                    "templates": ["templates-4"],
                    "token": "abcdefghijklmnop",
                    "manifest_link": "/api/v1.1/bundles/enrollment_bundles-1/manifest",
                  }
                }
        400:
          description: Invalid request, or error with supplied data
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        404:
          description: Bundle does not exist
      headers:
        Authorization:
          description: authorization session token
          type: string
          required: true
          displayName: Authorization
    put:
      displayName: putBundle
      description: Update a bundle
      body:
        application/json:
          example:
            {
              "bundle":
                {
                  "name":"PrimaryBundle",
                  "auto_approve":true,
                  "token":"BCDEFGHIJKLMNOPQRSTUVWXYZ123456",
                  "templates": ["templates-4", "templates-5"],
                  "automatic_tags":[
                    {
                      "name":"Location",
                      "value":"Brisbane",
                    }
                  ]
                }
            }
      responses:
        200:
          description: The updated bundle
          body:
            application/json:
              example:
                {
                  "bundle":
                    {
                      "name": "PrimaryBundle",
                      "auto_approve": true,
                      "id":"enrollment_bundles-3",
                      "automatic_tags": [
                        {
                          "id": "enrollment_bundles_automatic_tags-4",
                          "name": "Location",
                          "value": "Brisbane",
                        }
                      ],
                      "nodes": [],
                      "templates": ["templates-4", "templates-5"],
                      "token": "BCDEFGHIJKLMNOPQRSTUVWXYZ123456",
                      "manifest_link": "/api/v1.1/bundles/enrollment_bundles-3/manifest",
                    }
                }
    # Bundle.get_tags
    /automatic_tags:
      type: base-type
      description: >
        Each bundle can have a list of tags associated with it. These tags are
        references to a global list of tags. Any node that enrolls against a specific
        bundle will automatically be assigned these tags and specified values at
        time of enrollment.
      # Bundle.get_tags
      get:
        displayName: getBundleTags
        description: >
          Get the list of all automatic tags for this bundle.
        responses:
          200:
            description: The list of automatic tags for the bundle
            body:
              application/json:
                example:
                  {
                    "tags": [
                      {
                        "id": "enrollment_bundles_automatic_tags-1",
                        name: "myTag",
                        "value": "my tag value",
                      },
                      {
                        "id": "enrollment_bundles_automatic_tags-2",
                        name: "myTag2",
                        "value": "",
                      },
                      {
                        "id": "enrollment_bundles_automatic_tags-3",
                        name: "myTag3",
                        "value": "another value",
                      }
                    ]
                  }
          400:
            description: Incomplete data.
          404:
            description: Bundle does not exist.
      # Bundle.create_tag
      post:
        displayName: createBundleTag
        description: >
          Create and associate a new tag with the bundle.
        body:
          application/json:
            example:
              {
                "tag": {
                  "name":"Location",
                  "value":"New York",
                }
              }
        responses:
          200:
            body:
              application/json:
                description: Bundle with given bundle id not found.
                example:
                  {
                    "tag": {
                      "id": "enrollment_bundles_automatic_tags-1",
                      "name": "Location",
                      "value": "New York",
                    }
                  }
          400:
            description: >
              Invalid request: body is not json or does not conform to required json schema.

              Incomplete data: name item missing.
          404:
            body:
              application/json:
                type: error
                description: Bundle with given bundle id not found.
      /{tag_value_id}:
        type: base-type
        uriParameters:
          tag_value_id:
            description: Identifier for unique tag within given bundle
            required: true
            displayName: tag_value_id
            example: enrollment_bundles_automatic_tags-1
        # Bundle.get_tag_from_bundle
        get:
          description: Retrieves a bundle's tag by id.
          responses:
            200:
              description: >
                Tag information in bundle with {id} and tag identification
                {tag_value_id} successfully retrieved.
              body:
                application/json:
                  example:
                    {
                      "tag": {
                        "id": "enrollment_bundles_automatic_tags-1",
                        "name": "Location",
                        "value": "New York",
                      }
                    }
            400:
              description: >
                Invalid request: body is not json or does not conform to required json schema.

                Incomplete data: bundle id, or tag_value_id parameter missing.
            404:
              body:
                application/json:
                  type: error
                  description: >
                    Bundle with given bundle {id} not found.
                    Tag information with given {tag_value_id} not found.
        # Bundle.delete_tag
        delete:
          description: Delete a bundle's tag by id.
          responses:
            200:
              description: The {tag_value_id} tag information was deleted.
            400:
              description: >
                Invalid request: body is not json or does not conform to required json schema.

                Incomplete data: bundle id, or tag_value_id parameter missing.
            404:
              body:
                application/json:
                  type: error
                  description: >
                    Bundle with given bundle {id} not found.

                    Tag information with given {tag_value_id} not found.
                  example:
                    {
                      "error": [
                        {
                          type: 5,
                          "code": 29,
                          "text": "Could not find element with UUID 'enrollment_bundles_automatic_tags-0'.",
                          "args": {
                            "uuid": "enrollment_bundles_automatic_tags-0",
                          },
                          "level": 1,
                        }
                      ]
                    }
        # Bundle.update_tag
        put:
          description: Update tag information for {bundle_tag_id} in bundle {id}
          body:
            application/json:
              example:
                {
                  "tag": {
                    "name": "Location",
                    "value": "USA.NewYork",
                  }
                }
          responses:
            200:
              description: The {tag_value_id} tag information was updated.
            400:
              description: >
                Invalid request: body is not json or does not conform to required json schema.

                Incomplete data: bundle id, or tag_value_id parameter missing.
            404:
              body:
                application/json:
                  type: error
                  description: >
                    Bundle with given bundle {id} not found.

                    Tag information with given {tag_value_id} not found.
                  example:
                    {
                      "error": [
                        {
                          type: 5,
                          "code": 29,
                          "text": "Could not find element with UUID 'enrollment_bundles_automatic_tags-0'.",
                          "args": {
                            "uuid": "enrollment_bundles_automatic_tags-0",
                          },
                          "level": 1,
                        }
                      ]
                    }
    /manifest:
      type: base-type
      get:
        displayName: downloadBundleManifest
        description: Download the bundle specific manifest file
        responses:
          200:
            description: The manifest file
            body:
              text/plain:
                example: >
                  address=192.168.0.1

                  bundle=bundle1

                  password=bundle1Token
          404:
            body:
              application/json:
                type: error
                description: >
                  Bundle with given bundle {id} not found.
                  Manifest information with given {bundle_id} not found.
                example:
                  {
                    "error": [
                      {
                        type: 5,
                        "code": 29,
                        "text": "Could not find element with UUID 'enrollment_bundles-1'.",
                        "args": {
                          "uuid": "enrollment_bundles-1",
                        },
                        "level": 1,
                      }
                    ]
                  }

/users:
  description:
    Retrieve and update user information.
  type: base-type
  get:
    description: Retrieve a list of users.
    responses:
      200:
        description:
          An array listing the current users on the system.
        body:
          application/json:
            type: object
            properties:
              users:
                type: array
                items:
                  type: user
            example:
              {
                "users": [
                  {
                    "id": "users-1",
                    "username": "root",
                    "enabled": true,
                    "expired": false,
                    "locked_out": false,
                    "groups": ["groups-1", "groups-2"],
                    "rights": {
                      "delete": true,
                      "modify": true,
                    },
                    "no_password": false,
                    "deletable": false,
                  },
                  {
                    "username": "username-1",
                    "enabled": false,
                    "expired": false,
                    "locked_out": false,
                    "description": "Description- 1",
                    "id": "users-2",
                    "groups": ["groups-1", "groups-2"],
                    "rights": {
                      "delete": true,
                      "modify": true,
                    },
                    "no_password": false,
                    "deletable": true,
                  }
                ]
              }
  post:
    description: Create a new User data in the config.
    body:
      application/json:
        type: object
        properties:
          user:
            type: user
        example:
          {
            "user":{
                "username":"joe",
                "password":"monkey",
                "description":"local user",
                "enabled":true,
                "expired": false,
                "locked_out": false,
                "no_password": false,
                "groups":[
                  "groups-1",
                ]
            }
          }
    responses:
      201:
          body:
            application/json:
              type: object
              properties:
                user:
                  type: user
              example:
                {
                  "user": {
                    "username": "mfp",
                    "description": "local user",
                    "enabled": true,
                    "expired": false,
                    "locked_out": false,
                    "id": "users-10",
                    "no_password": false,
                    "rights": {
                      "delete": true,
                      "modify": true,
                    },
                    "groups":[
                      "groups-1",
                    ],
                    "deletable": true,
                  }
                }
      400:
        description: Failed to create user to error in request body.
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    type: 2,
                    "code": 12,
                    "text": "Element is below the minimum allowed length of 1 character(s)",
                    "args": {
                      "min": "1",
                      "uuid": "{60e2b0a-aafa-11e6-aca7-cb7fd0646002",
                    },
                    "level": 1,
                  },
                  {
                    type: 1,
                    "code": 33,
                    "text": "Push command failed",
                    "args": {},
                    "level": 1,
                  }
                ]
              }
  /{id}:
    type: base-type
    # User.get
    get:
      description: Retrieve the User information by ID.
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                user:
                  type: user
              example:
                {
                  "user": {
                    "username": "joe",
                    "description": "local user",
                    "enabled": true,
                    "expired": false,
                    "locked_out": false,
                    "id": "users-15",
                    "no_password": false,
                    "rights": {
                      "delete": true,
                      "modify": true,
                    },
                    "groups": [
                      "groups-1",
                    ],
                    "deletable": true,
                  }
                }
        404:
          description: User doesn't exist.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 5,
                      "code": 29,
                      "text": "Could not find element with UUID 'users-2'.",
                      "args": {
                        "uuid": "users-2",
                      },
                      "level": 1,
                    }
                  ]
                }
    put:
      description: Update a User.
      body:
        application/json:
          type: object
          properties:
            user:
              type: user
          example:
            {
              "user": {
                "description": "remote auth user",
                "enabled": true,
                "expired": true,
                "locked_out": false,
                "groups": [
                  "groups-1",
                ],
                "password": null,
                "no_password": true,
              }
            }
      responses:
        200:
          description: User updated successfully.
          body:
            application/json:
              type: object
              properties:
                user:
                  type: user
              example:
                {
                  "user": {
                    "username": "joe",
                    "description": "remote auth user",
                    "id": "users-15",
                    "enabled": true,
                    "expired": true,
                    "locked_out": false,
                    "no_password": true,
                    "rights": {
                      "delete": true,
                      "modify": true,
                    },
                    "groups": [
                      "groups-1",
                    ],
                    "deletable": true,
                  }
                }
        400:
          description: Invalid request
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
    delete:
      description: Delete a User
      responses:
        204:
          description: User deleted successfully
        404:
          description: User did not exist
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 5,
                      "code": 29,
                      "text": "Could not find element with UUID 'users-2'.",
                      "args": {
                        "uuid": "users-2",
                      },
                      "level": 1,
                    }
                  ]
                }
  /password_policy:
    type: base-type
    get:
      description: Retrieve the current password policy.
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                password_policy:
                  type: passwordPolicy
              example:
                {
                  "password_policy": {
                    "enabled": true,
                    "min_password_length": 6,
                    "no_username": false,
                    "must_contain_capital_letter": false,
                    "must_contain_number": false,
                    "must_contain_special_character": false,
                    "password_reuse_period": -1,
                    "password_expiry_period": 30,
                    "max_login_attempts": 5,
                    "login_lockout_period": 5,
                  }
                }
    put:
      description: Update the password policy.
      body:
        application/json:
          type: object
          properties:
            password_policy:
              type: passwordPolicy
          example:
            {
              "password_policy": {
                "enabled": true,
                "min_password_length": 6,
                "no_username": false,
                "must_contain_capital_letter": true,
                "must_contain_number": false,
                "must_contain_special_character": true,
                "password_reuse_period": -1,
                "password_expiry_period": 30,
                "max_login_attempts": 5,
                "login_lockout_period": 5,
              }
            }
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                password_policy:
                  type: passwordPolicy
              example:
                {
                  "password_policy": {
                    "enabled": true,
                    "min_password_length": 6,
                    "no_username": false,
                    "must_contain_capital_letter": true,
                    "must_contain_number": false,
                    "must_contain_special_character": true,
                    "password_reuse_period": -1,
                    "password_expiry_period": 30,
                    "max_login_attempts": 5,
                    "login_lockout_period": 5,
                  }
                }
  /password_reset:
    type: base-type
    put:
      description: Reset an authenticated user's password.
      body:
        application/json:
          type: object
          properties:
            current_password:
              type: string
            new_password:
              type: string
          example:
            {
              "current_password": "default",
              "new_password": "default2",
            }
      responses:
        200:
          description: User's password reset successfully.
          body:
            application/json:
              type: object
              properties:
                user:
                  type: user
              example:
                {
                  "user": {
                    "username": "joe",
                    "description": "local user",
                    "enabled": true,
                    "expired": false,
                    "locked_out": false,
                    "id": "users-15",
                    "no_password": false,
                    "rights": {
                      "delete": true,
                      "modify": true,
                    },
                    "groups": [
                      "groups-1",
                    ],
                    "deletable": true,
                  }
                }
        400:
          description: Invalid request
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        403:
          description: User is not allowed to access the requested resource.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 47,
                      "text": "Permission denied",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
  /password_validation:
    type: base-type
    put:
      description: Validate a potential new password against the password policy.
      body:
        application/json:
          type: object
          properties:
            password_validation:
              type: passwordValidation
          example:
            {
              password_validation: {
                "username": "joe",
                "password": "default",
              }
            }
      responses:
        200:
          description: Validate a potential new password against the password policy.
          body:
            application/json:
              type: object
              properties:
                result:
                  type: boolean
                details:
                  type: object
                  properties:
                    number:
                      type: boolean
                    capital:
                      type: boolean
                    special:
                      type: boolean
                    username:
                      type: boolean
                    length:
                      type: boolean
              example:
                {
                  "result": false,
                  "details": {
                    "number": true,
                    "capital": true,
                    "special": false,
                    "username": false,
                    "length": true,
                  }
                }
        400:
          description: Invalid request
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        403:
          description: User is not allowed to access the requested resource.
          body:
            application/json:
              type: error
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 47,
                      "text": "Permission denied",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }

/groups:
  description: Retrieve or update group information.
  type: base-type
  get:
    description: Retrieve a list of groups.
    responses:
      200:
        description:
          A JSON object containing Groups config is returned.
        body:
          application/json:
            example:
              {
                "groups": [
                  {
                    "id": "groups-1",
                    "groupname": "admin",
                    "description": "The admin group",
                    "mode": "global",
                    "enabled": true,
                    "global_roles": "LighthouseAdmin",
                    "members": [],
                    "rights": {
                      "delete": false,
                      "modify": true,
                    }
                  },
                  {
                    "id": "groups-2",
                    "groupname": "smartgroup-admin",
                    "description": null,
                    "mode": "smart_group",
                    "enabled": false,
                    "smart_group_roles": "NodeAdmin",
                    "smart_group": "my_smart_group",
                    "members": [],
                    "rights": {
                      "delete": false,
                      "modify": true,
                    }
                  }
                ]
              }
  post:
    # Group.create
    description: Create a new Group in the config.
    body:
      application/json:
        type: setGroup
        examples:
          "Node admin example":
            {
              "group": {
                "groupname": "my_node_group",
                "description": "to hold the node admin users",
                "mode": "smart_group",
                "enabled": true,
                "smart_group_roles": "NodeAdmin",
                "smart_group": "smart_groups_nodes_groups-1",
              }
            }
          "Node user example":
            {
              "group": {
                "groupname": "my_user_group",
                "description": "to hold the node users",
                "mode": "smart_group",
                "enabled": true,
                "smart_group_roles": "NodeUser",
                "smart_group": "smart_groups_nodes_groups-1",
                "managed_device_filter": "smart_groups_ports_groups-1",
              }
            }
          "Node user with all ports example":
            {
              "group": {
                "groupname": "my_user_all_group",
                "description": "to hold the node users",
                "mode": "smart_group",
                "enabled": true,
                "smart_group_roles": "NodeUser",
                "smart_group": "smart_groups_nodes_groups-1",
              }
            }
          "Lighthouse admin example":
            {
              "group": {
                "groupname": "my_admin_group",
                "description": "all LH admins",
                "mode": "global",
                "enabled": true,
                "global_roles": "LighthouseAdmin",
              }
            }

    responses:
      201:
          body:
            application/json:
              type: getGroupResponse
              examples:
                "Node admin example":
                  {
                    "group": {
                      "smart_group_roles": "NodeAdmin",
                      "description": "to hold the node admin users",
                      "id": "groups-8",
                      "members": [],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "smart_group": "smart_groups_nodes_groups-1",
                      "mode": "smart_group",
                      "enabled": true,
                      "groupname": "my_node_group",
                    }
                  }
                "Node user example":
                  {
                    "group": {
                      "smart_group_roles": "NodeUser",
                      "description": "to hold the node users",
                      "id": "groups-7",
                      "members": [],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "smart_group": "smart_groups_nodes_groups-1",
                      "managed_device_filter": "smart_groups_ports_groups-1",
                      "mode": "smart_group",
                      "enabled": true,
                      "groupname": "my_user_group",
                    }
                  }
                "Node user with all ports example":
                  {
                    "group": {
                      "smart_group_roles": "NodeUser",
                      "description": "to hold the node users",
                      "id": "groups-11",
                      "members": [],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "smart_group": "smart_groups_nodes_groups-1",
                      "mode": "smart_group",
                      "enabled": true,
                      "groupname": "my_user_all_group",
                    }
                  }
                "Lighthouse admin example":
                  {
                    "group": {
                      "groupname": "my_admin_group",
                      "enabled": true,
                      "description": "all LH admins",
                      "global_roles": "LighthouseAdmin",
                      "id": "groups-9",
                      "mode": "global",
                      "members": [],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      }
                    }
                  }

      400:
        description: Failed to initiate group creation due to error in post body.
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    "type": 2,
                    "code": 26,
                    "text": "Duplicate 'groupname' fields with value 'netgrp'",
                    "args": {
                      "value": "netgrp",
                      "uuid": "root-1-@groups",
                      "field": "groupname",
                    },
                    "level": 1,
                  }
                ]
              }
  /{id}:
    # Group.get
    type: base-type
    get:
      displayName: getGroupResponse
      description: Retrieve the Group information by ID.
      responses:
        200:
          description: Group exists
          body:
            application/json:
              type: getGroupResponse
              example:
                {
                  "group": {
                    "smart_group_roles": "NodeUser",
                    "description": "",
                    "id": "groups-3",
                    "members": [],
                    "rights": {
                      "delete": true,
                      "modify": true,
                    },
                    "smart_group": "smart_groups_nodes_groups-1",
                    "managed_device_filter": "smart_groups_ports_groups-1",
                    "mode": "smart_group",
                    "enabled": true,
                    "groupname": "my-new-group",
                  }
                }
        404:
          description: Group does not exist
    put:
      description: Update a Group data in the config.
      body:
        application/json:
          type: setGroup
          examples:
            "Node admin example":
              {
                "group": {
                  "groupname": "my_admin_group2",
                  "enabled": true,
                  "description": "all node admins",
                  "mode": "smart_group",
                  "members": [],
                  "smart_group_roles": "NodeAdmin",
                  "smart_group": "smart_groups_nodes_groups-1",
                }
              }
            "Node user example":
              {
                "group": {
                  "groupname": "my_admin_group2",
                  "enabled": true,
                  "description": "all node users",
                  "mode": "smart_group",
                  "members": [],
                  "smart_group_roles": "NodeUser",
                  "smart_group": "smart_groups_nodes_groups-1",
                  "managed_device_filter": "smart_groups_ports_groups-1",
                }
              }
            "Lighthouse admin example":
              {
                "group": {
                  "groupname": "my_admin_group2",
                  "enabled": true,
                  "description": "all node admins",
                  "mode": "global",
                  "members": [],
                  "global_roles": "LighthouseAdmin",
                }
              }
      responses:
        200:
          description: Group has been updated.
          body:
            application/json:
              type: getGroupResponse
              examples:
                "Node admin example":
                  {
                    "group": {
                      "smart_group_roles": "NodeAdmin",
                      "description": "all node admins",
                      "id": "groups-9",
                      "members": [],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "smart_group": "smart_groups_nodes_groups-1",
                      "mode": "smart_group",
                      "enabled": true,
                      "groupname": "my_admin_group2",
                    }
                  }
                "Node user example":
                  {
                    "group": {
                      "smart_group_roles": "NodeUser",
                      "description": "all node users",
                      "id": "groups-9",
                      "members": [],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      },
                      "smart_group": "smart_groups_nodes_groups-1",
                      "managed_device_filter": "smart_groups_ports_groups-1",
                      "mode": "smart_group",
                      "enabled": true,
                      "groupname": "my_admin_group2",
                    }
                  }
                "Lighthouse admin example":
                  {
                    "group": {
                      "groupname": "my_admin_group2",
                      "enabled": true,
                      "description": "all node admins",
                      "global_roles": "LighthouseAdmin",
                      "id": "groups-9",
                      "mode": "global",
                      "members": [],
                      "rights": {
                        "delete": true,
                        "modify": true,
                      }
                    }
                  }
        404:
          description: Group does not exist
    delete:
      description: Delete a Group
      responses:
        204:
          description: Group deleted
        404:
          description: Group does not exist

/templates:
  description: Create and view configuration templates.
  type: base-type
  get:
    description: Retrieve a list of templates.
    responses:
      200:
        description:
          A JSON object containing configuration templates.
        body:
          application/json:
            type: object
            properties:
              templates:
                type: array
                items:
                  type: template
            example:
              "templates": [
                {
                  "type": "users_groups",
                  "description": "Group admins",
                  "id": "templates-9",
                  "group_operation_type": "group_set_list",
                  "groups": [
                    {
                      "groupname": "bne_east",
                      "description": "Admin over BNE ",
                      "roles": ["administrator"],
                      "restrict_ports": true,
                      "ports": "1,2,5-7",
                    },
                    {
                      "groupname": "syd_west",
                      "description": "Access to SYD west",
                      "roles": ["pmoperator"],
                      "restrict_ports": false,
                    }
                  ],
                  "user_operation_type": "user_set_list",
                  "users": [
                    {
                      "username": "user1",
                      "description": "The first user",
                      "groups": ["syd_west", "bne_east"],
                    },
                    {
                      "username": "user2",
                      "description": "The second user",
                      "groups": [],
                    }
                  ],
                  "name": "QLD users",
                }
              ]
  post:
    # Template.new
    description: Create a new Template.
    body:
      application/json:
        type: object
        properties:
          template:
            type: template
        examples:
          "Radius Auth example":
            {
              "template": {
                "type": "auth",
                "name": "central_radius",
                "description": "radius central auth",
                "authMode": "radius",
                "radiusPassword": "radkey",
                "radiusAuthenticationServers": [
                  {
                    "hostname": "10.0.1.1",
                    "port": 1812,
                  }
                ],
                "radiusAccountingServers": [
                  {
                    "hostname": "10.0.1.1",
                    "port": 1813,
                  }
                ]
              }
            }
          "Tacacs+ Auth example":
            {
              "template": {
                "name": "tacacs_central",
                "description": "tacacs central auth",
                "type": "auth",
                "authMode": "tacacs",
                "tacacsPassword": "tackey",
                "tacacsMethod": "pap",
                "tacacsService": "raccess",
                "tacacsAuthenticationServers":[
                  {
                    "hostname": "10.0.1.1",
                  }
                ],
              }
            }
          "LDAP Auth example":
            {
              "template": {
                "type": "auth",
                "name": "ldap_central",
                "description": "ldap central auth",
                "authMode": "ldap",
                "ldapAuthenticationServers": [
                  {
                    "port": 389,
                    "hostname": "10.0.1.1",
                  }
                ],
                "ldapBindPassword": "ldapPassword!",
                "ldapUsernameAttribute": "sAMAccountName",
                "ldapGroupMembershipAttribute": "memberOf",
                "ldapBaseDN": "cn=Users,dc=test,dc=example,dc=com",
                "ldapBindDN": "cn=Administrator,cn=Users,dc=test,dc=example,dc=com",
              }
            }
          "Local Auth example":
            {
              "template": {
                "type": "auth",
                "name": "local",
                "description": "local auth only",
                "authMode": "local",
              }
            }
          "Users and Groups example":
            {
              "template": {
                "name": "QLD users",
                "description": "Queensland sysadmins",
                "type": "users_groups",
                "group_operation_type": "group_set_list",
                "groups": [
                  {
                    "groupname": "bne_east",
                    "description": "Admin over BNE ",
                    "roles": ["administrator"],
                    "restrict_ports": true,
                    "ports": "1,2,5-7",
                  },
                  {
                    "groupname": "syd_west",
                    "description": "Access to SYD west",
                    "roles": ["pmoperator"],
                    "restrict_ports": false,
                  }
                ],
                "user_operation_type": "user_set_list",
                "users": [
                  {
                    "username": "user1",
                    "description": "The first user",
                    "password": "secret",
                    "groups": ["syd_west", "bne_east"],
                  },
                  {
                    "username": "user2",
                    "description": "The second user",
                    "password": "secret",
                    "groups": [],
                  },
                ],
              }
            }
      multipart/form-data:
        properties:
          name:
            type: string
            required: true
          description:
            type: string
            required: false
          type:
            type: string
            required: true
          file:
            description: The file to be uploaded.
            required: false
            type: file
    responses:
      201:
          body:
            application/json:
              type: object
              properties:
                template:
                  type: template
              examples:
                "Radius Auth example":
                  {
                    "template": {
                      "type": "auth",
                      "id": "templates-8",
                      "radiusAuthenticationServers": [
                        {
                          "id": "templates_radius_authenticationServers-2",
                          "port": 1812,
                          "hostname": "10.0.1.1",
                        }
                      ],
                      "ldapAuthenticationServers": [],
                      "name": "central_radius",
                      "tacacsAuthenticationServers": [],
                      "authMode": "radius",
                      "radiusAccountingServers": [
                        {
                          "id": "templates_radius_accountingServers-2",
                          "port": 1813,
                          "hostname": "10.0.1.1",
                        }
                      ]
                    }
                  }
                "Tacacs Auth example":
                  {
                    "template": {
                      "type": "auth",
                      "description": "Central tacacs auth server",
                      "tacacsService": "raccess",
                      "id": "templates-12",
                      "radiusAuthenticationServers": [],
                      "ldapAuthenticationServers": [],
                      "name": "tacacs_central",
                      "tacacsMethod": "pap",
                      "tacacsAuthenticationServers": [
                        {
                          "id": "templates_tacacs_authenticationServers-2",
                          "port": 49,
                          "hostname": "10.0.1.1",
                        }
                      ],
                      "authMode": "tacacs",
                      "radiusAccountingServers": [],
                    }
                  }
                "LDAP Auth example":
                  {
                    "template": {
                      "type": "auth",
                      "description": "test ldap",
                      "id": "templates-11",
                      "ldapGroupMembershipAttribute": "memberOf",
                      "radiusAuthenticationServers": [],
                      "ldapAuthenticationServers": [
                        {
                          "id": "templates_ldap_authenticationServers-1",
                          "port": 389,
                          "hostname": "10.0.1.1",
                        }
                      ],
                      "ldapUsernameAttribute": "sAMAccountName",
                      "tacacsAuthenticationServers": [],
                      "name": "ldap1",
                      "ldapBaseDN": "cn=Users,dc=test,dc=example,dc=com",
                      "ldapBindDN": "cn=Administrator,cn=Users,dc=test,dc=example,dc=com",
                      "authMode": "ldap",
                      "radiusAccountingServers": [],
                    }
                  }
                "Local Auth example":
                  {
                    "template": {
                      "type": "auth",
                      "description": "local auth only",
                      "id": "templates-15",
                      "radiusAuthenticationServers": [],
                      "ldapAuthenticationServers": [],
                      "name": "local2",
                      "tacacsAuthenticationServers": [],
                      "authMode": "local",
                      "radiusAccountingServers": [],
                    }
                  }
                "Users and Groups example":
                  {
                    "template": {
                      "type": "users_groups",
                      "description": "Group admins",
                      "id": "templates-9",
                      "group_operation_type": "group_set_list",
                      "groups": [
                        {
                          "groupname": "bne_east",
                          "description": "Admin over BNE ",
                          "roles": ["administrator"],
                          "restrict_ports": true,
                          "ports": "1,2,5-7",
                        },
                        {
                          "groupname": "syd_west",
                          "description": "Access to SYD west",
                          "roles": ["pmoperator"],
                          "restrict_ports": false,
                        }
                      ],
                      "user_operation_type": "user_set_list",
                      "users": [
                        {
                          "username": "user1",
                          "description": "The first user",
                          "groups": ["syd_west", "bne_east"],
                        },
                        {
                          "username": "user2",
                          "description": "The second user",
                          "groups": [],
                        },
                      ],
                      "name": "QLD users",
                    }
                  }

      400:
        description: Failed to create the template due to incorrect request body.
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    "type": 4,
                    "code": 40,
                    "text": "Required field 'operation' was not provided in the request.",
                    "args": {
                      "param": "operation",
                    },
                    "level": 1,
                  }
                ]
              }
  /{id}:
    description: View, change, and delete existing templates.
    type: base-type
    # Template.get
    get:
      description: Retrieve a single template.
      responses:
        200:
          description:
            A JSON object containing a configuration template.
          body:
            application/json:
              type: object
              properties:
                template:
                  type: template
              example:
                {
                  "template":{
                    "type": "auth",
                    "id": "templates-98",
                    "radiusAuthenticationServers": [
                      {
                        "id": "templates_radius_authenticationServers-90",
                        "port": 1812,
                        "hostname": "bar",
                      }
                    ],
                    "ldapAuthenticationServers": [],
                    "name": "foo",
                    "tacacsAuthenticationServers": [],
                    "authMode": "radius",
                    "radiusAccountingServers": [
                      {
                        "id": "templates_radius_accountingServers-89",
                        "port": 1813,
                        "hostname": "baz",
                      }
                    ]
                  }
                }
    # Template.update
    put:
      description: Update a template.
      body:
        application/json:
          type: object
          properties:
            template:
              type: template
          example:
            {
              "template": {
                "type": "auth",
                "name": "food",
                "authMode": "radius",
                "radiusPassword": "bork",
                "radiusAuthenticationServers": [
                  {
                    "hostname": "bar",
                  }
                ],
                "radiusAccountingServers": [
                  {
                    "hostname": "baz",
                  }
                ]
              }
            }
        multipart/form-data:
          properties:
            name:
              type: string
              required: true
            description:
              type: string
              required: false
            type:
              type: string
              required: true
            file:
              description: The file to be uploaded.
              required: false
              type: file
      responses:
        200:
          description:
            A JSON object containing a configuration template.
          body:
            application/json:
              type: object
              properties:
                template:
                  type: template
              example:
                {
                  "template":{
                    "type": "auth",
                    "id": "templates-98",
                    "radiusAuthenticationServers": [
                      {
                        "id": "templates_radius_authenticationServers-90",
                        "port": 1812,
                        "hostname": "bar",
                      }
                    ],
                    "ldapAuthenticationServers": [],
                    "name": "foo",
                    "tacacsAuthenticationServers": [],
                    "authMode": "radius",
                    "radiusAccountingServers": [
                      {
                        "id": "templates_radius_accountingServers-89",
                        "port": 1813,
                        "hostname": "baz",
                      }
                    ]
                  }
                }
    # Template.delete
    delete:
      description: Delete a template.
      responses:
        204:
          description: The template was successfully deleted.

/template_push:
  description:
    Create and view configuration template pushes to nodes.
  type: base-type
  get:
    description: Retrieve a list of template pushes.
    responses:
      200:
        description:
          A JSON object containing configuration template pushes.
        body:
          application/json:
            type: object
            properties:
              template_pushes:
                type: array
                items:
                  schema: template_push
            example:
              {
                "template_pushes":[
                  {
                    "id":"cfg_push_exec_ctxts-1",
                    "username":"admin",
                    "status":"preflight_complete",
                    "templates":[
                      "templates-1",
                      "templates-2",
                    ],
                    "node_contexts":[
                      {
                        "id":"cfg_push_exec_ctxts_nodes-1",
                        "node_id":"nodes-1",
                        "preflight_messages":[],
                        "preflight_errors":[],
                        "preflight_warnings":[],
                        "preflight_changes":[],
                        "execution_messages":[],
                        "execution_errors":[],
                        "execution_warnings":[],
                        "execution_changes":[],
                        "status":"preflight_complete",
                      },
                      {
                        "id":"cfg_push_exec_ctxts_nodes-2",
                        "node_id":"nodes-2",
                        "preflight_messages":[
                          {"args":{"dataset":"group list"},"argc":1,"code":67}
                        ],
                        "preflight_errors":[],
                        "preflight_warnings":[],
                        "preflight_changes":[],
                        "execution_messages":[],
                        "execution_errors":[],
                        "execution_warnings":[],
                        "execution_changes":[],
                        "status":"preflight_in_progress",
                      }
                    ]
                  }
                ]
              }
  post:
    description:
      Create a new template push in a default configured (ready for pre-flight) state.
    body:
      application/json:
        type: object
        properties:
          template_push:
            type: template_push_post
        example:
          {
            "template_push":{
              "template_ids":[
                "templates-1",
              ],
              "node_ids":[
                "nodes-1",
                "nodes-2",
              ]
            }
          }
    responses:
      201:
        description:
          A JSON object containing the new template push object.
        body:
          application/json:
            type: object
            properties:
              template_push:
                type: template_push
            example:
              {
                "template_push":{
                  "id":"cfg_push_exec_ctxts-1",
                  "username":"admin",
                  "status":"preflight_ready",
                  "templates":[
                    "templates-1",
                  ],
                  "node_contexts":[
                    {
                      "id":"cfg_push_exec_ctxts_nodes-1",
                      "node_id":"nodes-1",
                      "preflight_messages":[],
                      "preflight_errors":[],
                      "preflight_warnings":[],
                      "preflight_changes":[],
                      "execution_messages":[],
                      "execution_errors":[],
                      "execution_warnings":[],
                      "execution_changes":[],
                      "status":"preflight_ready",
                    },
                    {
                      "id":"cfg_push_exec_ctxts_nodes-2",
                      "node_id":"nodes-2",
                      "preflight_messages":[],
                      "preflight_errors":[],
                      "preflight_warnings":[],
                      "preflight_changes":[],
                      "execution_messages":[],
                      "execution_errors":[],
                      "execution_warnings":[],
                      "execution_changes":[],
                      "status":"preflight_ready",
                    }
                  ]
                }
              }
  /{id}/stage:
    put:
      description: >
        Change the stage of a template push, either to start the preflight process, or
        start the execute process.
      body:
        application/json:
          type: object
          properties:
            "template_push":
              type: object
              properties:
                "stage":
                  type: string
                  enum: [
                    "preflight",
                    "execute",
                  ]
                "node_ids":
                  type: array
                  items:
                    type: string
          example:
            {
              "template_push":{
                "stage":"preflight",
                "node_ids":[
                  "nodes-1",
                  "nodes-2",
                ]
              }
            }
      responses:
        204:
          description: Template push successfully changed to the stage provided.
        409:
          description: >
            Template push was not changed to the stage provided. This failed due to the
            template push not meeting the requirements of the requested stage. Wait before
            making the request again with this resource.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      "type": 4,
                      "code": 39,
                      "text": "Invalid parameter 'stage' was provided.",
                      "args": {
                        "param":"stage",
                      },
                      "level": 1,
                    }
                  ]
                }

/multiple_instance:
  description: Configure Lighthouse Multiple Instance support
  /dependent_lighthouses:
    description: Access dependent Lighthouse instance information
    type: base-type
    get:
      description: Get dependent Lighthouse instance information
      responses:
        200:
          description: Returns dependent Lighthouse instance information
          body:
            application/json:
              type: getDependentLighthouseInstancesResponse
              example:
                {
                  "dependent_lighthouses": [
                    {
                      "name": "lighthouse-secondary-a",
                      "status": "Pending",
                      "lhvpn_subnet": {
                        "netmask": "255.255.255.0",
                        "address": "172.16.2.0",
                      },
                      "nodes_connected": 0,
                      "network_address": "192.168.1.100",
                      "id": "lighthouse_configurations-4",
                      "total_nodes": 0,
                      "runtime_status": {
                        "change_delta": 2148,
                        "change_time": 0,
                        "action_status": "unknown",
                        "id": "nodes-1",
                        "action_type": "none",
                        "connection_status": "unknown",
                        "action_error_message": "",
                      },
                    }
                  ]
                }
    post:
      description: Create new dependent Lighthouse instance
      body:
        application/json:
          type: dependentLighthousePostRequest
          example:
            {
              "dependent_lighthouse": {
                "address": "192.168.1.100",
                "username": "usera",
                "password": "password",
                "lhvpn_subnet_netmask": "255.255.255.0",
                "lhvpn_subnet_address": "172.16.4.0",
              }
            }
      responses:
        201:
          description: Returns newly created dependent Lighthouse instance information
          body:
            application/json:
              type: getDependentLighthouseInstanceResponse
              example:
                {
                  "dependent_lighthouse": {
                    "name": "lighthouse-secondary-a",
                    "status": "Pending",
                    "lhvpn_subnet": {
                      "netmask": "255.255.255.0",
                      "address": "172.16.2.0",
                    },
                    "nodes_connected": 0,
                    "network_address": "192.168.1.100",
                    "id": "lighthouse_configurations-4",
                    "total_nodes": 0,
                    "runtime_status": {
                      "change_delta": 2148,
                      "change_time": 0,
                      "action_status": "unknown",
                      "id": "nodes-1",
                      "action_type": "none",
                      "connection_status": "unknown",
                      "action_error_message": "",
                    },
                  }
                }
        400:
          description: Invalid request
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }

  /dependent_lighthouses/{id}:
    description: Access information for a given dependent Lighthouse instance
    type: base-type
    get:
      description: Get dependent Lighthouse instance information
      responses:
        200:
          description: Returns dependent Lighthouse instance information
          body:
            application/json:
              type: getDependentLighthouseInstanceResponse
              example:
                {
                  "dependent_lighthouse": {
                    "name": "lighthouse-secondary-a",
                    "status": "Pending",
                    "lhvpn_subnet": {
                      "netmask": "255.255.255.0",
                      "address": "172.16.2.0",
                    },
                    "nodes_connected": 0,
                    "network_address": "192.168.1.100",
                    "total_nodes": 0,
                    "runtime_status": {
                      "change_delta": 2148,
                      "change_time": 0,
                      "action_status": "unknown",
                      "id": "nodes-1",
                      "action_type": "none",
                      "connection_status": "unknown",
                      "action_error_message": "",
                    },
                    "id": "lighthouse_configurations-4",
                  }
                }
    put:
      description: Update a dependent Lighthouse Instance
      body:
        application/json:
          type: dependentLighthousePutRequest
          example:
            {
              "dependent_lighthouse": {
                "lhvpn_subnet_address": "172.16.3.128",
                "lhvpn_subnet_netmask": "255.255.255.128",
              }
            }
      responses:
        200:
          body:
            application/json:
              type: getDependentLighthouseInstanceResponse
              example:
                {
                  "dependent_lighthouse": {
                    "name": "lighthouse-secondary-a",
                    "status": "Pending",
                    "lhvpn_subnet": {
                      "netmask": "255.255.255.128",
                      "address": "172.16.3.128",
                    },
                    "nodes_connected": 0,
                    "network_address": "192.168.1.100",
                    "id": "lighthouse_configurations-4",
                    "total_nodes": 0,
                    "runtime_status": {
                      "change_delta": 2148,
                      "change_time": 0,
                      "action_status": "unknown",
                      "id": "nodes-1",
                      "action_type": "none",
                      "connection_status": "unknown",
                      "action_error_message": "",
                    },
                  }
                }
        400:
          description: Invalid request
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }
        404:
            description: Dependent Lighthouse instance does not exist
    delete:
      description: Remove a dependent lighthouse instance
      responses:
          200:
            description: The dependent Lighthouse instance was removed successfully
          404:
            description: Dependent Lighthouse instance does not exist

  /lhvpn:
    description: Access multiple instance LHVPN information
    type: base-type
    get:
      description: Get multiple instance LHVPN information
      responses:
        200:
          body:
            application/json:
              type: multipleInstanceLHVPNResponse
              example:
                {
                  "multiple_instance_lhvpn": {
                    "mask": "255.255.255.0",
                    "address": "172.16.1.0",
                  }
                }
    put:
      description: Update the configuration for a dependent Lighthouse instance
      body:
        application/json:
          type: multipleInstanceLHVPNPutRequest
          example:
            {
              "multiple_instance_lhvpn": {
                "mask": "255.255.255.0",
                "address": "172.16.1.0",
              }
            }
      responses:
        200:
          description:
          body:
            application/json:
              type: multipleInstanceLHVPNResponse
              example:
                {
                  "multiple_instance_lhvpn": {
                    "mask": "255.255.255.0",
                    "address": "172.16.1.0",
                  }
                }
        400:
          description: Invalid request
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }

  /registration:
    description: Register this Lighthouse as a secondary instance
    type: base-type
    post:
      body:
        application/json:
          type: multipleInstanceRegistrationPostRequest
          example:
            {
              "instance_id": 2,
              "subnet": {
                "address": "172.16.2.1",
                "netmask": "255.255.255.0",
              },
              "master_address":"192.168.1.3",
              "vpn_port":1195,
              "instance_network_port":443,
              "ca":"-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
              "key":"-----BEGIN PRIVATE KEY-----...",
              "cert":"-----BEGIN CERTIFICATE-----...-----END CERTIFICATE-----",
            }
      responses:
        201:
          description:
          body:
            application/json:
              example:
                {
                  "message": "configured",
                }
        400:
          description: Invalid request
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }

/jobs:
  description: >
    View and delete jobs which have already run, are currently running, or are
    scheduled to run on Lighthouse.
  type: base-type
  get:
    description: >
      Get all jobs which have already run, are currently running, or are
      scheduled to run.

      Can be filtered to narrow down results.
    queryParameters:
      job_type:
        description: Filter for jobs with this type
        type: string
        required: false
      job_status:
        description: Filter for jobs with this status
        type: string
        required: false
      from_date:
        description: Filter for jobs that started after this time
        type: string
        required: false
      to_date:
        description: Filter for jobs that started before this time
        type: string
        required: false
      duration:
        description: Filter jobs with either less than or greater than this duration (in seconds).
        type: integer
        required: false
      duration_operator:
        description: Specify if the duration of the job should be less than or great than the duration parameter. Required if duration has been specified.
        type: string
        enum: [
          "lt",
          "gt",
        ]
      job_state:
        description: Filter jobs by their state which is either current (still running), finished, and scheduled.
        type: string
        enum: [
            "current",
            "finished",
            "scheduled",
        ]
      per_page:
        description: Maximum number of jobs per page
        type: integer
        required: false
        default: 100000
      page:
        description: The page to return (indexed from 1)
        type: integer
        required: false
        default: 1
    responses:
      200:
        body:
          application/json:
            type: jobListResponse
            example:
              {
                "jobs": [
                  {
                    "id": 1,
                    "job_id": "91fe229b-9e28-496c-a1df-ce7b9128c2b2",
                    "tube_name": "registration",
                    "creation_time": "2020-06-03T00:06:55",
                    "finish_time": "2020-06-03T00:08:55",
                    "duration": 120,
                    "nodes": [
                      {
                        "id": 1,
                        "node_id": "nodes-1",
                        "name": "im7200",
                      }
                    ],
                    "records": [
                      {
                        "id": 1,
                        "job_id": 1,
                        "creation_time": "2020-06-03T00:06:56",
                        "status": "success",
                        "retry_count": 1,
                        "delay": 0,
                        "errors": [],
                      }
                    ],
                    "lighthouse_configurations": [
                      {
                        "id": 1,
                        "job_id": 1,
                        "lighthouse_configuration_id": 1,
                      }
                    ]
                  },
                  {
                    "id": 2,
                    "job_id": "4399f89b-81ee-4b54-b869-1325204cbd0e",
                    "tube_name": "enrollment",
                    "creation_time": "2020-06-03T00:07:06",
                    "finish_time": "2020-06-03T00:07:10",
                    "duration": 4,
                    "nodes": [
                      {
                        "id": 2,
                        "node_id": "nodes-1",
                        "name": "im7200",
                      }
                    ],
                    "records": [
                      {
                        "id": 2,
                        "job_id": 2,
                        "creation_time": "2020-06-03T00:07:08",
                        "status": "permanent_failure",
                        "retry_count": 1,
                        "delay": 0,
                        "errors": [
                          {
                            "id": 1,
                            "job_track_id": 2,
                            "message": "Node [nodes-1] not approved, pausing enrollment",
                          }
                        ]
                      }
                    ],
                    "lighthouse_configurations": [
                      {
                        "id": 2,
                        "job_id": 2,
                        "lighthouse_configuration_id": 1,
                      }
                    ]
                  }
                ]
              }

  /{id}:
    type: base-type
    get:
      description: >
        Get job information by the job id.
      queryParameters:
        id:
          description: the ID of the job to retrieve
          type: integer
          required: true
      responses:
        200:
          body:
            application/json:
              type: jobSingleResponse
              example:
                {
                  "job": {
                      "id": 1,
                      "job_id": "91fe229b-9e28-496c-a1df-ce7b9128c2b2",
                      "tube_name": "registration",
                      "creation_time": "2020-06-03T00:06:55",
                      "finish_time": "2020-06-03T00:08:55",
                      "duration": 120,
                      "nodes": [
                        {
                          "id": 1,
                          "node_id": "nodes-1",
                          "name": "im7200",
                        }
                      ],
                      "records": [
                        {
                          "id": 1,
                          "job_id": 1,
                          "creation_time": "2020-06-03T00:06:56",
                          "status": "success",
                          "retry_count": 1,
                          "delay": 0,
                          "errors": [],
                        }
                      ],
                      "lighthouse_configurations": [
                        {
                          "id": 1,
                          "job_id": 1,
                          "lighthouse_configuration_id": 1,
                        }
                      ]
                  }
                }

/netops:
  description: Work with NetOps features and modules
  /modules:
    type: base-type
    get:
      description: Get NetOps modules information
      responses:
        200:
          description: Returns NetOps module and module activation information.
          body:
            application/json:
              type: getNetopsModulesResponse
              example:
                {
                  "licenses-available": [
                    {
                      "id": "licenses-available-0",
                      "license": "nom-prov",
                      "nodes": 50,
                    }
                  ],
                  "netops-modules": [
                    {
                      "id": "dop",
                      "module": "dop",
                      "name": "Secure Provisioning",
                      "description": "Enable remote nodes to act as bootstrap WAN and LAN for a new remote site.",
                      "status": "available",
                      "version": "2.6.1",
                      "license_required": "nom-prov",
                      "images": [
                        "central-dop",
                        "remote-dop",
                        "dop-ui",
                      ],
                      "containers": [
                        {
                          "description": null,
                          "local_version": null,
                          "name": "central-dop",
                          "tags": [
                            "latest",
                          ]
                        },
                        {
                          "description": null,
                          "local_version": null,
                          "name": "remote-dop",
                          "tags": [
                            "latest",
                          ]
                        },
                        {
                          "description": null,
                          "local_version": null,
                          "name": "dop-ui",
                          "tags": [
                            "latest",
                          ]
                        }
                      ],
                      "port": 9003,
                      "min_lh_version": "5.10.0",
                      "min_ngcs_version": "20.Q3.0",
                      "always_activate": false,
                      "retroactively_activate": false,
                      "running": true,
                      "activations": 0,
                      "to_update": 0,
                      "available_activations": 6,
                      "entitled_activations": 5,
                    }
                  ]
                }
  /modules/{module_name}:
    description: Update the configuration for a particular NetOps module
    type: base-type
    put:
      body:
        application/json:
          type: netopsModuleConfiguration
          example:
            {
              "netops_modules": {
                "always_activate": false,
              }
            }
      description: Update the configuration for a particular NetOps module
      responses:
        200:
          description:
          body:
            application/json:
              type: netopsModuleConfiguration
              example:
                {
                  "netops_modules": {
                    "always_activate": false,
                  }
                }
  /modules/{module_name}/redeploy:
    description: Update all nodes that are running old versions of the particular NetOps module
    type: base-type
    get:
      responses:
        204:
          description: The NetOps module is being redeployed to activated nodes
  /modules/{module_name}/nodes/{node_id}:
    description: Deactivate the node by id from NetOps module config
    type: base-type
    delete:
      responses:
        204:
          description: The node was successfully removed from the netops module config
  /modules/license:
    description: Trigger a sync and redeploy based on a newly applied license
    type: base-type
    post:
      body:
        application/json:
          type: object
          properties:
            sku:
              type: string
          example:
            {
              "sku": "nom-prov",
            }
      responses:
        204:
          description: NetOps modules are being reactivated
  /permissions:
    type: base-type
    get:
      responses:
        200:
          description: Retrieve permissions and related information used by NetOps
          body:
            application/json:
              type: netopsPermissions
              example:
                {
                  "user": "root",
                  "rights": [
                      {
                          "entity": "admin_and_licensing",
                          "read": true,
                          "write": true,
                      },
                      {
                          "entity": "authenticated_backend",
                          "read": true,
                          "write": true,
                      }
                  ]
                }
  /firewall_zones:
    description: Get the current firewall zones list or create a new firewall zone
    type: base-type
    get:
      responses:
        200:
          description: Get a list of all firewall zones
          body:
            application/json:
              type: getFirewallZonesResponse
              example:
                {
                  "firewall_zones": [
                    {
                      'name': 'zone1',
                      'label': 'zone 1',
                    },
                    {
                      'name': 'zone2',
                      'label': 'zone 2',
                    }
                  ]
                }
    post:
      description: Create a new firewall zone
      body:
        application/json:
          type: object
          properties:
            name:
              type: string
            label:
              type: string
          example:
            {
              "name": "zone1",
              "label": "zone 1",
            }
      responses:
        200:
          description: The new firewal zone is created
          body:
            application/json:
              example:
                {
                  "firewall_zone": {
                    "name": "zone1",
                    "label": "zone 1",
                  }
                }
        400:
          description: Invalid request
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 39,
                      "text": "Invalid request body",
                      "args": {},
                      "level": 1,
                    }
                  ]
                }

/port_logs:
  type: base-type
  delete:
    description: |
      Delete old port logs. Either max_kept or oldest_date must be specified.
      Filtering by a node_id and port_id are optional.
    body:
      application/json:
        type: portLogDelete
        example:
          {
            "node_id": "nodes-400",
            "port_id": "nodes_ports-688",
            "max_kept": 1000,
            "oldest_date": null,
          }
    responses:
      204:
        description: A job has been schedule to delete the specified port logs.
      400:
        description: Invalid input has been provided.

/entities:
  description: Access the user accessible role entity rights and their allowed values and dependencies
  type: base-type
  get:
    description: Get a list of the user accessible grouped role entities with allowed permission values and dependencies
    responses:
      200:
        body:
          application/json:
            type: object
            properties:
              "entities":
                type: object
                description: See the example for schema of object
            example:
              {
                "entities": {
                  "actions": {
                    "message_bus_actions": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "subscriptions": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                  },
                  "cli": {
                    "console_shell": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "pm_shell": {
                      "allowed_values": ["On", "Off"]
                    },
                    "shell_access": {
                      "allowed_values": ["On", "Off"]
                    },
                  },
                  "logging": {
                    "logs_portlog": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "logs_syslog": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                  },
                  "netops": {
                    "netops_modules": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                  },
                  "nodes_and_config": {
                    "nodes_devices_advanced": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"],
                      "dependencies": ["nodes_devices_base"]
                    },
                    "nodes_devices_base": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "push_templates": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"],
                      "dependencies": ["nodes_devices_base"]
                    },
                  },
                  "service_settings": {
                    "lhvpn": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_cellhealth":  {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_console_gateway": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_date_and_time": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_https": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_netops": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_node_backup": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_session_settings": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_snmp": {
                        "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_ssh": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "services_syslog": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                  },
                  "smartgroups_and_tags": {
                    "bundles":  {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "smart_groups":  {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "tags":  {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                  },
                  "system": {
                    "admin_and_licensing": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "backup_and_restore": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "jobs": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "multi_instance":  {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "network_interfaces": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "upgrade_and_reset": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                  },
                  "users_and_permissions": {
                    "authentication": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "groups_and_roles": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    },
                    "users": {
                      "allowed_values": ["ReadWrite", "ReadOnly", "Deny"]
                    }
                  }
                }
              }
/roles:
  description: Access and customise out-of-the-box and user created roles
  type: base-type
  get:
    description: Get a list of all active roles
    responses:
      200:
        description: A JSON object containing information of all active roles
        body:
          application/json:
            type: getRolesResponse
            example:
              {
                "roles": [
                  {
                    'id': 'roles-1',
                    'rolename': 'LighthouseAdmin',
                    'description': None,
                    'group_usage': 2,
                    'number_of_permissions': 37,
                    'last_updated': '--',
                  },
                  {
                    'id': 'roles-8',
                    'rolename': 'CustomRole',
                    'description': 'This is a description for a user defined role.',
                    'group_usage': 5,
                    'number_of_permissions': 21,
                    'last_updated': '2020-09-15 14:26',
                  }
                ],
                "meta": {
                  "total_pages": 2,
                }
              }
  post:
    description: Create a new custom role
    body:
      application/json:
        type: object
        properties:
          "role":
            type: role
        example:
            {
              "role": {
                "rolename": "NewRole",
                "description": "This is a description for a new role.",
                "permissions": {
                  "actions": {
                    "message_bus_actions": 'Deny',
                    "subscriptions": 'Deny',
                  },
                  "cli": {
                    "console_shell": "ReadOnly",
                    "pm_shell": "On",
                    "shell_access": "On",
                  },
                  "logging": {
                    "logs_portlog": 'ReadWrite',
                    "logs_syslog": 'Deny',
                  },
                  "netops": {
                    "netops_modules": 'ReadOnly',
                  },
                  "nodes_and_config": {
                    "nodes_devices_base": 'ReadWrite',
                    "nodes_devices_advanced": 'ReadOnly',
                    "push_templates": 'Deny',
                  },
                  "service_settings": {
                    "lhvpn": 'Deny',
                    "services_cellhealth": 'Deny',
                    "services_console_gateway": 'Deny',
                    "services_date_and_time": 'Deny',
                    "services_https": 'Deny',
                    "services_netops": 'Deny',
                    "services_node_backup": 'Deny',
                    "services_session_settings": 'Deny',
                    "services_snmp": 'Deny',
                    "services_ssh": 'Deny',
                    "services_syslog": 'Deny',
                  },
                  "smartgroups_and_tags": {
                    "bundles": 'Deny',
                    "smart_groups": 'Deny',
                    "tags": 'ReadOnly',
                  },
                  "system": {
                    "admin_and_licensing": 'Deny',
                    "backup_and_restore": 'Deny',
                    "jobs": 'Deny',
                    "multi_instance": 'Deny',
                    "network_interfaces": 'Deny',
                    "upgrade_and_reset": 'Deny',
                  },
                  "users_and_permissions": {
                    "authentication": 'Deny',
                    "groups_and_roles": 'Deny',
                    "users": 'ReadOnly',
                  }
                }
              }
            }
    responses:
      201:
        description: Create a new custom role successfully
        body:
          application/json:
            type: object
            properties:
              "role":
                type: role
            example:
              {
                "role": {
                  "id": "roles-8",
                  "rolename": "NewRole",
                  "description": "This is a description for a new role.",
                  "groups": ["testgroup1", "testgroup2"],
                  "permissions": {
                    "actions": {
                      "message_bus_actions": 'Deny',
                      "subscriptions": 'Deny',
                    },
                    "cli": {
                      "console_shell": "ReadOnly",
                      "pm_shell": "On",
                      "shell_access": "On",
                    },
                    "logging": {
                      "logs_portlog": 'ReadWrite',
                      "logs_syslog": 'Deny',
                    },
                    "netops": {
                      "netops_modules": 'ReadOnly',
                    },
                    "nodes_and_config": {
                      "nodes_devices_base": 'ReadWrite',
                      "nodes_devices_advanced": 'ReadOnly',
                      "push_templates": 'Deny',
                    },
                    "service_settings": {
                      "lhvpn": 'Deny',
                      "services_cellhealth": 'Deny',
                      "services_console_gateway": 'Deny',
                      "services_date_and_time": 'Deny',
                      "services_https": 'Deny',
                      "services_netops": 'Deny',
                      "services_node_backup": 'Deny',
                      "services_session_settings": 'Deny',
                      "services_snmp": 'Deny',
                      "services_ssh": 'Deny',
                      "services_syslog": 'Deny',
                    },
                    "smartgroups_and_tags": {
                      "bundles": 'Deny',
                      "smart_groups": 'Deny',
                      "tags": 'ReadOnly',
                    },
                    "system": {
                      "admin_and_licensing": 'Deny',
                      "backup_and_restore": 'Deny',
                      "jobs": 'Deny',
                      "multi_instance": 'Deny',
                      "network_interfaces": 'Deny',
                      "upgrade_and_reset": 'Deny',
                    },
                    "users_and_permissions": {
                      "authentication": 'Deny',
                      "groups_and_roles": 'Deny',
                      "users": 'ReadOnly',
                    }
                  }
                }
              }
      400:
        description: New role cannot be created due to error in post request body
        body:
          application/json:
            example:
              {
                "error": [
                  {
                    type: 4,
                    "code": 50,
                    "text": "Invalid value '54' for parameter 'description' was provided.",
                    "args": {
                      "value": 54,
                      "param": "description",
                    },
                    "level": 1,
                  },
                  {
                    type: 4,
                    "code": 50,
                    "text": "Invalid value 'None' for parameter 'rolename' was provided.",
                    "args": {
                      "value": None,
                      "param": "rolename",
                    },
                    "level": 1,
                  },
                  {
                    "type": 2,
                    "code": 26,
                    "text": "Duplicate record exists for field 'rolename' with value 'LighthouseAdmin'.",
                    "args": {
                      "value": "LighthouseAdmin",
                      "uuid": "root-1-@roles",
                      "field": "rolename",
                    },
                    "level": 1,
                  },
                  {
                  'text': "Cannot overwrite admin role.",
                  },
                  {
                  'text': "Cannot rename a role",
                  }
                ]
              }

  /{id}:
    description: Access information for a given role
    type: base-type
    get:
      description: Retrieve the information of a role by ID
      responses:
        200:
          body:
            application/json:
              type: object
              properties:
                "role":
                  type: role
              example:
                {
                  "role": {
                    "id": "roles-8",
                    "rolename": "CustomRole",
                    "description": "This is a description for a user-defined role.",
                    "groups": ["testgroup1", "testgroup2"],
                    "permissions": {
                      "actions": {
                        "message_bus_actions": 'Deny',
                        "subscriptions": 'Deny',
                      },
                      "cli": {
                        "console_shell": "ReadOnly",
                        "pm_shell": "On",
                        "shell_access": "On",
                      },
                      "logging": {
                        "logs_portlog": 'ReadWrite',
                        "logs_syslog": 'Deny',
                      },
                      "netops": {
                        "netops_modules": 'ReadOnly',
                      },
                      "nodes_and_config": {
                        "nodes_devices_base": 'ReadWrite',
                        "nodes_devices_advanced": 'ReadOnly',
                        "push_templates": 'Deny',
                      },
                      "service_settings": {
                        "lhvpn": 'Deny',
                        "services_cellhealth": 'Deny',
                        "services_console_gateway": 'Deny',
                        "services_date_and_time": 'Deny',
                        "services_https": 'Deny',
                        "services_netops": 'Deny',
                        "services_node_backup": 'Deny',
                        "services_session_settings": 'Deny',
                        "services_snmp": 'Deny',
                        "services_ssh": 'Deny',
                        "services_syslog": 'Deny',
                      },
                      "smartgroups_and_tags": {
                        "bundles": 'Deny',
                        "smart_groups": 'Deny',
                        "tags": 'ReadOnly',
                      },
                      "system": {
                        "admin_and_licensing": 'Deny',
                        "backup_and_restore": 'Deny',
                        "jobs": 'Deny',
                        "multi_instance": 'Deny',
                        "network_interfaces": 'Deny',
                        "upgrade_and_reset": 'Deny',
                      },
                      "users_and_permissions": {
                        "authentication": 'Deny',
                        "groups_and_roles": 'Deny',
                        "users": 'ReadOnly',
                      }
                    }
                  }
                }
        404:
          description: Role doesn't exist.
          body:
            application/json:
              type: error
    put:
      description: Update a role
      body:
        application/json:
          type: object
          properties:
            "role":
              type: role
          example:
            {
              "role": {
                "rolename": "CustomRole",
                "description": "This is an updated description.",
                "permissions": {
                  "cli": {
                    "console_shell": "ReadOnly",
                    "pm_shell": "On",
                    "shell_access": "On",
                  },
                  "logging": {
                    "logs_portlog": 'ReadWrite',
                    "logs_syslog": 'Deny',
                  },
                  "netops": {
                      "netops_modules": 'ReadOnly',
                  },
                  "nodes_and_config": {
                    "nodes_devices_base": 'ReadWrite',
                    "nodes_devices_advanced": 'ReadOnly',
                    "push_templates": 'Deny',
                  },
                  "users_and_permissions": {
                    "authentication": 'Deny',
                    "groups_and_roles": 'Deny',
                    "users": 'ReadOnly',
                  }
                }
              }
            }
      responses:
        200:
          description: Role updated successfully
          body:
            application/json:
              type: object
              properties:
                "role":
                  type: role
              example:
                {
                  "role": {
                    "id": "roles-8",
                    "rolename": "CustomRole",
                    "description": "This is an updated description.",
                    "groups": ["testgroup1", "testgroup2"],
                    "permissions": {
                      "actions": {
                        "message_bus_actions": 'Deny',
                        "subscriptions": 'Deny',
                      },
                      "cli": {
                        "console_shell": "ReadOnly",
                        "pm_shell": "On",
                        "shell_access": "On",
                      },
                      "logging": {
                        "logs_portlog": 'ReadWrite',
                        "logs_syslog": 'Deny',
                      },
                      "netops": {
                        "netops_modules": 'ReadOnly',
                      },
                      "nodes_and_config": {
                        "nodes_devices_base": 'ReadWrite',
                        "nodes_devices_advanced": 'ReadOnly',
                        "push_templates": 'Deny',
                      },
                      "service_settings": {
                        "lhvpn": 'Deny',
                        "services_cellhealth": 'Deny',
                        "services_console_gateway": 'Deny',
                        "services_date_and_time": 'Deny',
                        "services_https": 'Deny',
                        "services_netops": 'Deny',
                        "services_node_backup": 'Deny',
                        "services_session_settings": 'Deny',
                        "services_snmp": 'Deny',
                        "services_ssh": 'Deny',
                        "services_syslog": 'Deny',
                      },
                      "smartgroups_and_tags": {
                        "bundles": 'Deny',
                        "smart_groups": 'Deny',
                        "tags": 'ReadOnly',
                      },
                      "system": {
                        "admin_and_licensing": 'Deny',
                        "backup_and_restore": 'Deny',
                        "jobs": 'Deny',
                        "multi_instance": 'Deny',
                        "network_interfaces": 'Deny',
                        "upgrade_and_reset": 'Deny',
                      },
                      "users_and_permissions": {
                        "authentication": 'Deny',
                        "groups_and_roles": 'Deny',
                        "users": 'ReadOnly',
                      }
                    }
                  }
                }
        400:
          description: New role cannot be created due to error in post request body
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 4,
                      "code": 50,
                      "text": "Invalid value '54' for parameter 'description' was provided.",
                      "args": {
                        "value": 54,
                        "param": "description",
                      },
                      "level": 1,
                    },
                    {
                      type: 4,
                      "code": 50,
                      "text": "Invalid value 'None' for parameter 'rolename' was provided.",
                      "args": {
                        "value": None,
                        "param": "rolename",
                      },
                      "level": 1,
                    },
                    {
                      type: 2,
                      "code": 26,
                      "text": "Duplicate record exists for field 'rolename' with value 'LighthouseAdmin'.",
                      "args": {
                        "value": "LighthouseAdmin",
                        "uuid": "root-1-@roles",
                        "field": "rolename",
                      },
                      "level": 1,
                    },
                    {
                    'text': "Cannot overwrite admin role.",
                    },
                    {
                    'text': "Cannot rename a role.",
                    },
                    {
                      type: 2,
                      "code": 14,
                      "text": "permissions is invalid",
                      "args": {
                        "value": "permissions",
                      },
                      "level": 1,
                    }
                  ]
                }
    delete:
      description: Delete a role
      responses:
        204:
          description: Role deleted successfully
        404:
          description: Role doesn't exist
          body:
            application/json:
              type: error
        403:
          description: Specific roles cannot be deleted.
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 47,
                      "text": "Permission denied for '/api/v3.7/roles/roles-1'.",
                      "args": {
                        "value": "/api/v3.7/roles/roles-1",
                      },
                      "level": 1,
                    }
                  ]
                }

/permissions:
  description: Access to all permissions available to the user based on requested filtering
  type: base-type
  /groups:
    type: base-type
    get:
      description: Get a list of permissions for requested groups with an overall (least-restrictive) permission of the groups
      responses:
        200:
          description: A JSON object containing permissions for all entities of the requested groups
          body:
            application/json:
              type: object
              properties:
                "groups_permissions":
                  type: object
                  description: See the example for schema of object
              example:
                {
                  "groups_permissions": {
                    "actions": {
                      "message_bus_actions": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "subscriptions": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "cli": {
                      "shell_access": {
                        "testgroup1": "On",
                        "testgroup2": "Off",
                        "overall": "On",
                      },
                      "console_shell": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "pm_shell":  {
                        "testgroup1": "Off",
                        "testgroup2": "Off",
                        "overall": "On",
                      },
                    },
                    "logging": {
                      "logs_portlog":  {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "logs_syslog":  {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "netops": {
                      "netops_modules":  {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "nodes_and_config": {
                      "nodes_devices_advanced": {
                        "testgroup1": "ReadOnly",
                        testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "nodes_devices_base": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "push_templates": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "service_settings": {
                      "lhvpn": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_cellhealth":  {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                      },
                      "services_console_gateway": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_date_and_time": {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                      },
                      "services_https":  {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                      },
                      "services_netops":  {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                      },
                      "services_node_backup":  {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                      },
                      "services_snmp":  {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                      },
                      "services_session_settings":  {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                      },
                      "services_ssh":  {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                      },
                      "services_syslog":  {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "smartgroups_and_tags": {
                      "bundles": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "smart_groups": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "tags": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "system": {
                      "network_interfaces": {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                        },
                      "jobs": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "multi_instance": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "backup_and_restore": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "upgrade_and_reset": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "admin_and_licensing":  {
                          "testgroup1": "ReadOnly",
                          "testgroup2": "Deny",
                          "overall": "ReadOnly",
                      },
                    },
                    "users_and_permissions": {
                      "authentication": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "groups_and_roles": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      },
                      "users": {
                        "testgroup1": "ReadOnly",
                        "testgroup2": "Deny",
                        "overall": "ReadOnly",
                      }
                    }
                  }
                }
        400:
          description: At least one of the requested groups do not exist
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 28,
                      "text": "Entity 'testgroup1, testgroup2' not found.",
                      "args": {
                        "value": "testgroup1, testgroup2",
                      },
                      "level": 1,
                    }
                  ]
                }
  /roles:
    type: base-type
    get:
      description: Get a list of permissions for all requested roles and an overall (least-restrictive) permission of those roles
      responses:
        200:
          description: A JSON object containing permissions of the requested roles with an overall permission
          body:
            application/json:
              type: object
              properties:
                "roles_permissions":
                  type: object
                  description: See the example for schema of object
              example:
                {
                  "roles_permissions": {
                    "actions": {
                      "message_bus_actions": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "subscriptions": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "cli": {
                      "console_shell":  {
                        "Reporter": "Deny",
                        "NodeAdmin": "ReadOnly",
                        "overall": "ReadOnly",
                      },
                      "pm_shell": {
                        "Reporter": "Off",
                        "NodeAdmin": "On",
                        "overall": "On",
                      },
                      "shell_access": {
                        "Reporter": "Off",
                        "NodeAdmin": "Off",
                        "overall": "Off",
                      },
                    },
                    "logging": {
                      "logs_portlog": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "logs_syslog":  {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "netops": {
                      "netops_modules": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "ReadWrite",
                        "overall": "ReadWrite",
                      },
                    },
                    "nodes_and_config": {
                      "nodes_devices_advanced": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "ReadOnly",
                        "overall": "ReadOnly",
                      },
                      "nodes_devices_base": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "ReadOnly",
                        "overall": "ReadOnly",
                      },
                      "push_templates": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "ReadOnly",
                        "overall": "ReadOnly",
                      },
                    },
                    "service_settings": {
                      "lhvpn": {
                          "Reporter": "ReadOnly",
                          "NodeAdmin": "Deny",
                          "overall": "ReadOnly",
                        },
                      "services_cellhealth": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_console_gateway": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_date_and_time": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_https": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_netops": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_node_backup": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_session_settings": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      services_snmp": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_ssh": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "services_syslog": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "smartgroups_and_tags": {
                      "bundles": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "smart_groups": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "ReadOnly",
                        "overall": "ReadOnly",
                      },
                      "tags": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "system": {
                      "admin_and_licensing": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "backup_and_restore": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "jobs": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "ReadOnly",
                        "overall": "ReadOnly",
                      },
                      "multi_instance": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "network_interfaces": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "upgrade_and_reset": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                    },
                    "users_and_permissions": {
                      "authentication": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "groups_and_roles": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      },
                      "users": {
                        "Reporter": "ReadOnly",
                        "NodeAdmin": "Deny",
                        "overall": "ReadOnly",
                      }
                    }
                  }
                }
        400:
          description: At least one of the requested roles does not exist
          body:
            application/json:
              example:
                {
                  "error": [
                    {
                      type: 7,
                      "code": 28,
                      "text": "Entity 'testrole1, testrole2' not found.",
                      "args": {
                        "value": "testrole1, testrole2",
                      },
                      "level": 1,
                    }
                  ]
                }

/replication_status:
  description: >
    Query the database position of the requested lighthouse.

    For the primary this is the Position.
    For a secondary this is the Exec_Master_Log_Pos.
  type: base-type
  get:
    description: Retrieve the position information and replication errors.
    responses:
      200:
        description: Successfully retrieved database position.
        body:
          application/json:
            type: object
            properties:
              "position":
                type: integer
              "errors":
                type: array
                description: A list of errors
                required: false
            example:
              {
                "position": 3289234,
                "errors": ['SQL Error', 'IO Error']
              }
